<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTTP&amp;Tomcat&amp;Servlet</title>
    <link href="/2022/07/20/HTTP&amp;Tomcat&amp;Servlet/"/>
    <url>/2022/07/20/HTTP&amp;Tomcat&amp;Servlet/</url>
    
    <content type="html"><![CDATA[<h2 id="1，Web概述"><a href="#1，Web概述" class="headerlink" title="1，Web概述"></a>1，Web概述</h2><h3 id="1-1-Web和JavaWeb的概念"><a href="#1-1-Web和JavaWeb的概念" class="headerlink" title="1.1 Web和JavaWeb的概念"></a>1.1 Web和JavaWeb的概念</h3><p>&#x3D;&#x3D;Web是全球广域网，也称为万维网(www)，能够通过浏览器访问的网站。&#x3D;&#x3D;<br>在我们日常的生活中，经常会使用浏览器去访问<code>百度</code>、<code>京东</code>、<code>传智官网</code>等这些网站，这些网站统称为Web网站。如下就是通过浏览器访问传智官网的界面: </p><p><img src="/images/1627031023395.png"><br>我们知道了什么是Web，那么JavaWeb又是什么呢？顾名思义&#x3D;&#x3D;JavaWeb就是用Java技术来解决相关web互联网领域的技术栈。&#x3D;&#x3D;<br>等学习完JavaWeb之后，同学们就可以使用Java语言开发我们上述所说的网站。而国内很多大型网站公司也是首选Java语言来解决web互联网相关的问题。那都有哪些公司的系统是使用Java语言的呢?</p><p><img src="/images/20210717183958532.png"><br>使用Java语言开发互联网系统是有很多技术栈需要大家了解，具体都有哪些呢?</p><h3 id="1-2-JavaWeb技术栈"><a href="#1-2-JavaWeb技术栈" class="headerlink" title="1.2 JavaWeb技术栈"></a>1.2 JavaWeb技术栈</h3><p>了解JavaWeb技术栈之前，有一个很重要的概念要介绍。</p><h4 id="1-2-1-B-x2F-S架构"><a href="#1-2-1-B-x2F-S架构" class="headerlink" title="1.2.1 B&#x2F;S架构"></a>1.2.1 B&#x2F;S架构</h4><p>什么是B&#x2F;S架构?<br>B&#x2F;S 架构：Browser&#x2F;Server，浏览器&#x2F;服务器 架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可。大家可以通过下面这张图来回想下我们平常的上网过程:</p><p><img src="/images/1627031933553.png"></p><ul><li>打开浏览器访问百度首页，输入要搜索的内容，点击回车或百度一下，就可以获取和搜索相关的内容</li><li>思考下搜索的内容并不在我们自己的点上，那么这些内容从何而来？答案很明显是从百度服务器返回给我们的</li><li>日常百度的小细节，逢年过节百度的logo会更换不同的图片，服务端发生变化，客户端不需做任务事情就能获取最新内容</li><li>所以说B&#x2F;S架构的好处:易于维护升级：服务器端升级后，客户端无需任何部署就可以使用到新的版本。<br>了解了什么是B&#x2F;S架构后，作为后台开发工程师的我们将来主要关注的是服务端的开发和维护工作。在服务端将来会放很多资源,都有哪些资源呢?</li></ul><h4 id="1-2-2-静态资源"><a href="#1-2-2-静态资源" class="headerlink" title="1.2.2 静态资源"></a>1.2.2 静态资源</h4><ul><li><p>静态资源主要包含HTML、CSS、JavaScript、图片等，主要负责页面的展示。</p></li><li><p>我们之前已经学过前端网页制作<code>三剑客</code>(HTML+CSS+JavaScript),使用这些技术我们就可以制作出效果比较丰富的网页，将来展现给用户。但是由于做出来的这些内容都是静态的，这就会导致所有的人看到的内容将是一模一样。</p></li><li><p>在日常上网的过程中，我们除了看到这些好看的页面以外，还会碰到很多动态内容，比如我们常见的百度登录效果:</p><p><img src="/images/1627037814180.png"><br><code>张三</code>登录以后在网页的右上角看到的是 <code>张三</code>，而<code>李四</code>登录以后看到的则是<code>李四</code>。所以不同的用户访问相同的资源看到的内容大多数是不一样的，要想实现这样的效果，光靠静态资源是无法实现的。</p></li></ul><h4 id="1-2-3-动态资源"><a href="#1-2-3-动态资源" class="headerlink" title="1.2.3 动态资源"></a>1.2.3 动态资源</h4><ul><li><p>动态资源主要包含Servlet、JSP等，主要用来负责逻辑处理。</p></li><li><p>动态资源处理完逻辑后会把得到的结果交给静态资源来进行展示，动态资源和静态资源要结合一起使用。</p></li><li><p>动态资源虽然可以处理逻辑，但是当用户来登录百度的时候，就需要输入<code>用户名</code>和<code>密码</code>,这个时候我们就又需要解决的一个问题是，用户在注册的时候填入的用户名和密码、以及我们经常会访问到一些数据列表的内容展示(如下图所示)，这些数据都存储在哪里?我们需要的时候又是从哪里来取呢?</p><p><img src="/images/1627038674340.png"></p></li></ul><h4 id="1-2-4-数据库"><a href="#1-2-4-数据库" class="headerlink" title="1.2.4 数据库"></a>1.2.4 数据库</h4><ul><li><p>数据库主要负责存储数据。</p></li><li><p>整个Web的访问过程就如下图所示:</p><p><img src="/images/1627039320220.png"><br>(1)浏览器发送一个请求到服务端，去请求所需要的相关资源;<br>(2)资源分为动态资源和静态资源,动态资源可以是使用Java代码按照Servlet和JSP的规范编写的内容;<br>(3)在Java代码可以进行业务处理也可以从数据库中读取数据;<br>(4)拿到数据后，把数据交给HTML页面进行展示,再结合CSS和JavaScript使展示效果更好;<br>(5)服务端将静态资源响应给浏览器;<br>(6)浏览器将这些资源进行解析;<br>(7)解析后将效果展示在浏览器，用户就可以看到最终的结果。<br>在整个Web的访问过程中，会设计到很多技术，这些技术有已经学习过的，也有还未涉及到的内容，都有哪些还没有涉及到呢?</p></li></ul><h4 id="1-2-5-HTTP协议"><a href="#1-2-5-HTTP协议" class="headerlink" title="1.2.5 HTTP协议"></a>1.2.5 HTTP协议</h4><ul><li>HTTP协议:主要定义通信规则</li><li>浏览器发送请求给服务器，服务器响应数据给浏览器，这整个过程都需要遵守一定的规则，之前大家学习过TCP、UDP，这些都属于规则，这里我们需要使用的是HTTP协议，这也是一种规则。</li></ul><h4 id="1-2-6-Web服务器"><a href="#1-2-6-Web服务器" class="headerlink" title="1.2.6 Web服务器"></a>1.2.6 Web服务器</h4><ul><li>Web服务器:负责解析 HTTP 协议，解析请求数据，并发送响应数据</li><li>浏览器按照HTTP协议发送请求和数据，后台就需要一个Web服务器软件来根据HTTP协议解析请求和数据，然后把处理结果再按照HTTP协议发送给浏览器</li><li>Web服务器软件有很多，我们课程中将学习的是目前最为常用的&#x3D;&#x3D;Tomcat&#x3D;&#x3D;服务器</li></ul><p>到这为止，关于JavaWeb中用到的技术栈我们就介绍完了，这里面就只有HTTP协议、Servlet、JSP以及Tomcat这些知识是没有学习过的，所以整个Web核心主要就是来学习这些技术。</p><h3 id="1-3-Web核心课程安排"><a href="#1-3-Web核心课程安排" class="headerlink" title="1.3 Web核心课程安排"></a>1.3 Web核心课程安排</h3><p><img src="/images/1627043194238.png"></p><p>整个Web核心，我们总共有六天的学习内容，分别是:</p><ul><li>第一天：HTTP、Tomcat、Servlet</li><li>第二天：Request(请求)、Response(响应)</li><li>第三天：JSP、会话技术(Cookie、Session)</li><li>第四天：Filter(过滤器)、Listener(监听器)</li><li>第五天：Ajax、Vue、ElementUI</li><li>第六天：综合案例</li></ul><p>(1)Request是从客户端向服务端发出的请求对象，</p><p>(2)Response是从服务端响应给客户端的结果对象，</p><p>(3)JSP是动态网页技术,</p><p>(4)会话技术是用来存储客户端和服务端交互所产生的数据，</p><p>(5)过滤器是用来拦截客户端的请求,</p><p>(6)监听器是用来监听特定事件,</p><p>(7)Ajax、Vue、ElementUI都是属于前端技术</p><p>这些技术都该如何来使用，我们后面会一个个进行详细的讲解。接下来我们来学习下HTTP、Tomcat和Servlet。 </p><h2 id="2-HTTP"><a href="#2-HTTP" class="headerlink" title="2, HTTP"></a>2, HTTP</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p><strong>HTTP概念</strong></p><p>HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间&#x3D;&#x3D;数据传输的规则&#x3D;&#x3D;。</p><ul><li><p>数据传输的规则指的是请求数据和响应数据需要按照指定的格式进行传输。</p></li><li><p>如果想知道具体的格式，可以打开浏览器，点击<code>F12</code>打开开发者工具，点击<code>Network</code>来查看某一次请求的请求数据和响应数据具体的格式内容，如下图所示:</p><p><img src="/images/1627046235092.png"></p></li></ul><blockquote><p>注意:在浏览器中如果看不到上述内容，需要清除浏览器的浏览数据。chrome浏览器可以使用ctrl+shift+Del进行清除。</p></blockquote><p>&#x3D;&#x3D;所以学习HTTP主要就是学习请求和响应数据的具体格式内容。&#x3D;&#x3D;</p><p><strong>HTTP协议特点</strong></p><p>HTTP协议有它自己的一些特点，分别是:</p><ul><li><p>基于TCP协议: 面向连接，安全</p><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全。</p></li><li><p>基于请求-响应模型的:一次请求对应一次响应</p><p>请求和响应是一一对应关系</p></li><li><p>HTTP协议是无状态协议:对于事物处理没有记忆能力。每次请求-响应都是独立的</p><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。这种特性有优点也有缺点，</p><ul><li>缺点:多次请求间不能共享数据</li><li>优点:速度快</li></ul><p>请求之间无法共享数据会引发的问题，如:</p><ul><li>京东购物，<code>加入购物车</code>和<code>去购物车结算</code>是两次请求，</li><li>HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li><li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用<code>会话技术(Cookie、Session)</code>来解决这个问题。具体如何来做，我们后面会详细讲到。刚才提到HTTP协议是规定了请求和响应数据的格式，那具体的格式是什么呢?</p></li></ul><h3 id="2-2-请求数据格式"><a href="#2-2-请求数据格式" class="headerlink" title="2.2 请求数据格式"></a>2.2 请求数据格式</h3><h4 id="2-2-1-格式介绍"><a href="#2-2-1-格式介绍" class="headerlink" title="2.2.1 格式介绍"></a>2.2.1 格式介绍</h4><p>请求数据总共分为三部分内容，分别是&#x3D;&#x3D;请求行&#x3D;&#x3D;、&#x3D;&#x3D;请求头&#x3D;&#x3D;、&#x3D;&#x3D;请求体&#x3D;&#x3D;</p><p><img src="/images/1627050004221.png"></p><ul><li><p>请求行: HTTP请求中的第一行数据，请求行包含三块内容，分别是 GET[请求方式] &#x2F;[请求URL路径] HTTP&#x2F;1.1[HTTP协议及版本]</p><p>请求方式有七种,最常用的是GET和POST</p></li><li><p>请求头: 第二行开始，格式为key: value形式</p><p>请求头中会包含若干个属性，常见的HTTP请求头有:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span>: 表示请求的主机名<br><span class="hljs-attribute">User</span>-Agent: 浏览器版本,例如Chrome浏览器的标识类似Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> ...Chrome/<span class="hljs-number">79</span>，IE浏览器的标识类似Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT ...)like Gecko；<br><span class="hljs-attribute">Accept</span>：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；<br><span class="hljs-attribute">Accept</span>-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；<br><span class="hljs-attribute">Accept</span>-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。<br></code></pre></td></tr></table></figure><p> &#x3D;&#x3D;这些数据有什么用处?&#x3D;&#x3D;</p><p>举例说明:服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求，比如:</p><ul><li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li><li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果</li><li>这就是我们常说的浏览器兼容问题</li></ul></li><li><p>请求体: POST请求的最后一部分，存储请求参数</p><p><img src="/images/1627050930378.png"></p><p>如上图红线框的内容就是请求体的内容，请求体和请求头之间是有一个空行隔开。此时浏览器发送的是POST请求，为什么不能使用GET呢?这时就需要回顾GET和POST两个请求之间的区别了:</p><ul><li>GET请求请求参数在请求行中，没有请求体，POST请求请求参数在请求体中</li><li>GET请求请求参数大小有限制，POST没有</li></ul></li></ul><h4 id="2-2-2-实例演示"><a href="#2-2-2-实例演示" class="headerlink" title="2.2.2 实例演示"></a>2.2.2 实例演示</h4><p>把 <code>代码\http</code> 拷贝到IDEA的工作目录中，比如<code>D:\workspace\web</code>目录，</p><p><img src="/images/1627278511902.png"></p><p>使用IDEA打开</p><p><img src="/images/1627278583127.png"></p><p>打开后，可以点击项目中的<code>html\19-表单验证.html</code>，使用浏览器打开，通过修改页面中form表单的method属性来测试GET请求和POST请求的参数携带方式。</p><p><img src="/images/1627278725007.png"></p><p><strong>小结</strong>:</p><ol><li><p>请求数据中包含三部分内容，分别是请求行、请求头和请求体</p></li><li><p>POST请求数据在请求体中，GET请求数据在请求行上</p></li></ol><h3 id="2-3-响应数据格式"><a href="#2-3-响应数据格式" class="headerlink" title="2.3 响应数据格式"></a>2.3 响应数据格式</h3><h4 id="2-3-1-格式介绍"><a href="#2-3-1-格式介绍" class="headerlink" title="2.3.1 格式介绍"></a>2.3.1 格式介绍</h4><p>响应数据总共分为三部分内容，分别是&#x3D;&#x3D;响应行&#x3D;&#x3D;、&#x3D;&#x3D;响应头&#x3D;&#x3D;、&#x3D;&#x3D;响应体&#x3D;&#x3D;</p><p><img src="/images/1627053710214.png"></p><ul><li><p>响应行：响应数据的第一行,响应行包含三块内容，分别是 HTTP&#x2F;1.1[HTTP协议及版本] 200[响应状态码] ok[状态码的描述]</p></li><li><p>响应头：第二行开始，格式为key：value形式</p><p>响应头中会包含若干个属性，常见的HTTP响应头有:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Content-<span class="hljs-keyword">Type</span>：表示该响应内容的类型，例如<span class="hljs-type">text</span>/html，image/jpeg；<br>Content-Length：表示该响应内容的长度（字节数）；<br>Content-<span class="hljs-keyword">Encoding</span>：表示该响应压缩算法，例如gzip；<br><span class="hljs-keyword">Cache</span>-Control：指示客户端应如何缓存，例如max-age=<span class="hljs-number">300</span>表示可以最多缓存<span class="hljs-number">300</span>秒<br></code></pre></td></tr></table></figure></li><li><p>响应体： 最后一部分。存放响应数据</p><p>上图中<html>…</html>这部分内容就是响应体，它和响应头之间有一个空行隔开。</p></li></ul><h4 id="2-3-2-响应状态码"><a href="#2-3-2-响应状态码" class="headerlink" title="2.3.2 响应状态码"></a>2.3.2 响应状态码</h4><p>参考: 资料&#x2F;1.HTTP&#x2F;《响应状态码.md》</p><p>关于响应状态码，我们先主要认识三个状态码，其余的等后期用到了再去掌握:</p><ul><li>200  ok 客户端请求成功</li><li>404  Not Found 请求资源不存在</li><li>500 Internal Server Error 服务端发生不可预期的错误</li></ul><h4 id="2-3-3-自定义服务器"><a href="#2-3-3-自定义服务器" class="headerlink" title="2.3.3 自定义服务器"></a>2.3.3 自定义服务器</h4><p>在前面我们导入到IDEA中的http项目中，有一个Server.java类，这里面就是自定义的一个服务器代码，主要使用到的是<code>ServerSocket</code>和<code>Socket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-keyword">import</span> sun.misc.IOUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    自定义服务器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>); <span class="hljs-comment">// 监听指定端口</span><br>        System.out.println(<span class="hljs-string">&quot;server is running...&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> ss.accept();<br>            System.out.println(<span class="hljs-string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(sock);<br>            t.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Socket sock;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Socket sock)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sock = sock;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sock.getInputStream()) &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sock.getOutputStream()) &#123;<br>                handle(input, output);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.sock.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;client disconnected.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(InputStream input, OutputStream output)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));<br>        <span class="hljs-comment">// 读取HTTP请求:</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">requestOk</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> reader.readLine();<br>        <span class="hljs-keyword">if</span> (first.startsWith(<span class="hljs-string">&quot;GET / HTTP/1.&quot;</span>)) &#123;<br>            requestOk = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> reader.readLine();<br>            <span class="hljs-keyword">if</span> (header.isEmpty()) &#123; <span class="hljs-comment">// 读取到空行时, HTTP Header读取完毕</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(header);<br>        &#125;<br>        System.out.println(requestOk ? <span class="hljs-string">&quot;Response OK&quot;</span> : <span class="hljs-string">&quot;Response Error&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!requestOk) &#123;<br>            <span class="hljs-comment">// 发送错误响应:</span><br>            writer.write(<span class="hljs-string">&quot;HTTP/1.0 404 Not Found\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Content-Length: 0\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>            writer.flush();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 发送成功响应:</span><br><br>            <span class="hljs-comment">//读取html文件，转换为字符串</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;http/html/a.html&quot;</span>));<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                data.append(line);<br>            &#125;<br>            br.close();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> data.toString().getBytes(StandardCharsets.UTF_8).length;<br><br>            writer.write(<span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Connection: keep-alive\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;Content-Length: &quot;</span> + length + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>            writer.write(<span class="hljs-string">&quot;\r\n&quot;</span>); <span class="hljs-comment">// 空行标识Header和Body的分隔</span><br>            writer.write(data.toString());<br>            writer.flush();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码，大家不需要自己写，主要通过上述代码，只需要大家了解到服务器可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，真正用到的Web服务器，我们不会自己写，都是使用目前比较流行的web服务器，比如&#x3D;&#x3D;Tomcat&#x3D;&#x3D;</p><p><strong>小结</strong></p><ol><li><p>响应数据中包含三部分内容，分别是响应行、响应头和响应体</p></li><li><p>掌握200，404，500这三个响应状态码所代表含义，分布是成功、所访问资源不存在和服务的错误</p></li></ol><h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3, Tomcat"></a>3, Tomcat</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><h4 id="3-1-1-什么是Web服务器"><a href="#3-1-1-什么是Web服务器" class="headerlink" title="3.1.1 什么是Web服务器"></a>3.1.1 什么是Web服务器</h4><p>Web服务器是一个应用程序（&#x3D;&#x3D;软件&#x3D;&#x3D;），对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p><p><img src="/images/1627058356051.png"></p><p> Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Web Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p><strong>Web服务器软件使用步骤</strong></p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="/images/1627060368806.png"></p><p>Tomcat就是一款软件，我们主要是以学习如何去使用为主。具体我们会从以下这些方向去学习:</p><ol><li><p>简介: 初步认识下Tomcat</p></li><li><p>基本使用: 安装、卸载、启动、关闭、配置和项目部署，这些都是对Tomcat的基本操作</p></li><li><p>IDEA中如何创建Maven Web项目</p></li><li><p>IDEA中如何使用Tomcat,后面这两个都是我们以后开发经常会用到的方式</p></li></ol><p>首选我们来认识下Tomcat。</p><p><strong>Tomcat</strong></p><p>Tomcat的相关概念:</p><ul><li><p>Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet&#x2F;JSP少量JavaEE规范。</p></li><li><p>概念中提到了JavaEE规范，那什么又是JavaEE规范呢?</p><p>JavaEE: Java Enterprise Edition,Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范:JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF。</p></li><li><p>因为Tomcat支持Servlet&#x2F;JSP规范，所以Tomcat也被称为Web容器、Servlet容器。Servlet需要依赖Tomcat才能运行。</p></li><li><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> 从官网上可以下载对应的版本进行使用。</p></li></ul><p><strong>Tomcat的LOGO</strong></p><p><img src="/images/1627176045795.png"></p><p><strong>小结</strong></p><p>通过这一节的学习，我们需要掌握以下内容:</p><ol><li>Web服务器的作用</li></ol><blockquote><p>封装HTTP协议操作，简化开发</p><p>可以将Web项目部署到服务器中，对外提供网上浏览服务</p></blockquote><ol start="2"><li>Tomcat是一个轻量级的Web服务器，支持Servlet&#x2F;JSP少量JavaEE规范，也称为Web容器，Servlet容器。</li></ol><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><p>Tomcat总共分两部分学习，先来学习Tomcat的基本使用，包括Tomcat的&#x3D;&#x3D;下载、安装、卸载、启动和关闭&#x3D;&#x3D;。</p><h4 id="3-2-1-下载"><a href="#3-2-1-下载" class="headerlink" title="3.2.1 下载"></a>3.2.1 下载</h4><p>直接从官网下载</p><p><img src="/images/1627178001030.png"></p><p>大家可以自行下载，也可以直接使用资料中已经下载好的资源，</p><p>Tomcat的软件程序  资料&#x2F;2. Tomcat&#x2F;apache-tomcat-8.5.68-windows-x64.zip</p><p>Tomcat的源码资料&#x2F;2. Tomcat&#x2F;tomcat源码&#x2F;apache-tomcat-8.5.68-src.zip</p><h4 id="3-2-2-安装"><a href="#3-2-2-安装" class="headerlink" title="3.2.2 安装"></a>3.2.2 安装</h4><p>Tomcat是绿色版,直接解压即可</p><ul><li><p>在D盘的software目录下，将<code>apache-tomcat-8.5.68-windows-x64.zip</code>进行解压缩，会得到一个<code>apache-tomcat-8.5.68</code>的目录，Tomcat就已经安装成功。</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。</p></li><li><p>打开<code>apache-tomcat-8.5.68</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下,</p><p><img src="/images/1627178815892.png"></p><p>bin:目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps:就是以后项目部署的目录</p><p>到此，Tomcat的安装就已经完成。</p></li></ul><h4 id="3-2-3-卸载"><a href="#3-2-3-卸载" class="headerlink" title="3.2.3 卸载"></a>3.2.3 卸载</h4><p>卸载比较简单，可以直接删除目录即可</p><h4 id="3-2-4-启动"><a href="#3-2-4-启动" class="headerlink" title="3.2.4 启动"></a>3.2.4 启动</h4><p>双击: bin\startup.bat</p><p><img src="/images/1627179006011.png"></p><p>启动后，通过浏览器访问 <code>http://localhost:8080</code>能看到Apache Tomcat的内容就说明Tomcat已经启动成功。</p><p><img src="/images/1627199957728.png"></p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;: 启动的过程中，控制台有中文乱码，需要修改conf&#x2F;logging.prooperties</p><p><img src="/images/1627199827589.png"></p><h4 id="3-2-5-关闭"><a href="#3-2-5-关闭" class="headerlink" title="3.2.5 关闭"></a>3.2.5 关闭</h4><p>关闭有三种方式 </p><ul><li>直接x掉运行窗口:强制关闭[不建议]</li><li>bin\shutdown.bat：正常关闭</li><li>ctrl+c： 正常关闭</li></ul><h4 id="3-2-6-配置"><a href="#3-2-6-配置" class="headerlink" title="3.2.6 配置"></a>3.2.6 配置</h4><p><strong>修改端口</strong></p><ul><li><p>Tomcat默认的端口是8080，要想修改Tomcat启动的端口号，需要修改 conf&#x2F;server.xml</p><p><img src="/images/1627200509883.png"></p></li></ul><blockquote><p>注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><p><strong>启动时可能出现的错误</strong></p><ul><li><p>Tomcat的端口号取值范围是0-65535之间任意未被占用的端口，如果设置的端口号被占用，启动的时候就会包如下的错误</p><p><img src="/images/1627200780590.png"></p></li><li><p>Tomcat启动的时候，启动窗口一闪而过: 需要检查JAVA_HOME环境变量是否正确配置</p><p><img src="/images/1627201248802.png"></p></li></ul><h4 id="3-2-7-部署"><a href="#3-2-7-部署" class="headerlink" title="3.2.7 部署"></a>3.2.7 部署</h4><ul><li><p>Tomcat部署项目： 将项目放置到webapps目录下，即部署完成。</p><ul><li><p>将 <code>资料/2. Tomcat/hello</code> 目录拷贝到Tomcat的webapps目录下</p></li><li><p>通过浏览器访问<code>http://localhost/hello/a.html</code>，能看到下面的内容就说明项目已经部署成功。</p><p><img src="/images/1627201572748.png"></p><p>但是呢随着项目的增大，项目中的资源也会越来越多，项目在拷贝的过程中也会越来越费时间，该如何解决呢?</p></li></ul></li><li><p>一般JavaWeb项目会被打包称&#x3D;&#x3D;war&#x3D;&#x3D;包，然后将war包放到Webapps目录下，Tomcat会自动解压缩war文件</p><ul><li><p>将 <code>资料/2. Tomcat/haha.war</code>目录拷贝到Tomcat的webapps目录下</p></li><li><p>Tomcat检测到war包后会自动完成解压缩，在webapps目录下就会多一个haha目录</p></li><li><p>通过浏览器访问<code>http://localhost/haha/a.html</code>，能看到下面的内容就说明项目已经部署成功。</p><p><img src="/images/1627201868752.png"></p></li></ul></li></ul><p>至此，Tomcat的部署就已经完成了，至于如何获得项目对应的war包，后期我们会借助于IDEA工具来生成。</p><h3 id="3-3-Maven创建Web项目"><a href="#3-3-Maven创建Web项目" class="headerlink" title="3.3 Maven创建Web项目"></a>3.3 Maven创建Web项目</h3><p>介绍完Tomcat的基本使用后，我们来学习在IDEA中如何创建Maven Web项目，学习这种方式的原因是以后Tomcat中运行的绝大多数都是Web项目，而使用Maven工具能更加简单快捷的把Web项目给创建出来，所以Maven的Web项目具体如何来构建呢?</p><p>在真正创建Maven Web项目之前，我们先要知道Web项目长什么样子，具体的结构是什么?</p><h4 id="3-3-1-Web项目结构"><a href="#3-3-1-Web项目结构" class="headerlink" title="3.3.1 Web项目结构"></a>3.3.1 Web项目结构</h4><p>Web项目的结构分为:开发中的项目和开发完可以部署的Web项目,这两种项目的结构是不一样的，我们一个个来介绍下:</p><ul><li><p>Maven Web项目结构: 开发中的项目</p><p><img src="/images/1627202865978.png"></p></li><li><p>开发完成部署的Web项目</p><p><img src="/images/1627202903750.png"></p><ul><li>开发项目通过执行Maven打包命令&#x3D;&#x3D;package&#x3D;&#x3D;,可以获取到部署的Web项目目录</li><li>编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下</li><li>pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下</li></ul></li></ul><h4 id="3-3-2-创建Maven-Web项目"><a href="#3-3-2-创建Maven-Web项目" class="headerlink" title="3.3.2 创建Maven Web项目"></a>3.3.2 创建Maven Web项目</h4><p>介绍完Maven Web的项目结构后，接下来使用Maven来创建Web项目，创建方式有两种:使用骨架和不使用骨架</p><p><strong>使用骨架</strong></p><blockquote><p>具体的步骤包含:</p><p>1.创建Maven项目</p><p>2.选择使用Web项目骨架</p><p>3.输入Maven项目坐标创建项目</p><p>4.确认Maven相关的配置信息后，完成项目创建</p><p>5.删除pom.xml中多余内容</p><p>6.补齐Maven Web项目缺失的目录结构</p></blockquote><ol><li><p>创建Maven项目</p><p><img src="/images/1627227574092.png"></p></li><li><p>选择使用Web项目骨架</p><p><img src="/images/1627227650406.png"></p></li><li><p>输入Maven项目坐标创建项目</p><p><img src="/images/1627228065007.png"></p></li><li><p>确认Maven相关的配置信息后，完成项目创建</p><p><img src="/images/1627228413280.png"></p></li><li><p>删除pom.xml中多余内容，只留下面的这些内容，注意打包方式 jar和war的区别</p><p><img src="/images/1627228584625.png"></p></li><li><p>补齐Maven Web项目缺失的目录结构，默认没有java和resources目录，需要手动完成创建补齐，最终的目录结果如下</p><p><img src="/images/1627228673162.png"></p></li></ol><p><strong>不使用骨架</strong></p><blockquote><p>具体的步骤包含:</p><p>1.创建Maven项目</p><p>2.选择不使用Web项目骨架</p><p>3.输入Maven项目坐标创建项目</p><p>4.在pom.xml设置打包方式为war</p><p>5.补齐Maven Web项目缺失webapp的目录结构</p><p>6.补齐Maven Web项目缺失WEB-INF&#x2F;web.xml的目录结构</p></blockquote><ol><li><p>创建Maven项目</p><p><img src="/images/1627229111549.png"></p></li><li><p>选择不使用Web项目骨架</p><p><img src="/images/1627229137316.png"></p></li><li><p>输入Maven项目坐标创建项目</p><p><img src="/images/1627229371251.png"></p></li><li><p>在pom.xml设置打包方式为war,默认是不写代表打包方式为jar</p><p><img src="/images/1627229428161.png"></p></li><li><p>补齐Maven Web项目缺失webapp的目录结构</p><p><img src="/images/1627229584134.png"></p></li><li><p>补齐Maven Web项目缺失WEB-INF&#x2F;web.xml的目录结构</p><p><img src="/images/1627229676800.png"></p></li><li><p>补充完后，最终的项目结构如下:</p><p><img src="/images/1627229478030.png"></p></li></ol><p>上述两种方式，创建的web项目，都不是很全，需要手动补充内容，至于最终采用哪种方式来创建Maven Web项目，都是可以的，根据各自的喜好来选择使用即可。</p><p><strong>小结</strong></p><p>1.掌握Maven Web项目的目录结构</p><p>2.掌握使用骨架的方式创建Maven Web项目</p><p><img src="/images/1627204022604.png"></p><blockquote><p>3.掌握不使用骨架的方式创建Maven Web项目</p></blockquote><p><img src="/images/1627204076090.png"></p><h3 id="3-4-IDEA使用Tomcat"><a href="#3-4-IDEA使用Tomcat" class="headerlink" title="3.4 IDEA使用Tomcat"></a>3.4 IDEA使用Tomcat</h3><ul><li>Maven Web项目创建成功后，通过Maven的package命令可以将项目打包成war包，将war文件拷贝到Tomcat的webapps目录下，启动Tomcat就可以将项目部署成功，然后通过浏览器进行访问即可。</li><li>然而我们在开发的过程中，项目中的内容会经常发生变化，如果按照上面这种方式来部署测试，是非常不方便的</li><li>如何在IDEA中能快速使用Tomcat呢?</li></ul><p>在IDEA中集成使用Tomcat有两种方式，分别是&#x3D;&#x3D;集成本地Tomcat&#x3D;&#x3D;和&#x3D;&#x3D;Tomcat Maven插件&#x3D;&#x3D;</p><h4 id="3-4-1-集成本地Tomcat"><a href="#3-4-1-集成本地Tomcat" class="headerlink" title="3.4.1 集成本地Tomcat"></a>3.4.1 集成本地Tomcat</h4><p>目标: 将刚才本地安装好的Tomcat8集成到IDEA中，完成项目部署，具体的实现步骤</p><ol><li><p>打开添加本地Tomcat的面板</p><p><img src="/images/1627229992900.png"></p></li><li><p>指定本地Tomcat的具体路径</p><p><img src="/images/1627230313062.png"></p></li><li><p>修改Tomcat的名称，此步骤可以不改，只是让名字看起来更有意义，HTTP port中的端口也可以进行修改，比如把8080改成80</p><p><img src="/images/1627230366658.png"></p></li><li><p>将开发项目部署项目到Tomcat中</p><p><img src="/images/1627230913259.png"></p><p>扩展内容： xxx.war和 xxx.war exploded这两种部署项目模式的区别?</p><ul><li><p>war模式是将WEB工程打成war包，把war包发布到Tomcat服务器上</p></li><li><p>war exploded模式是将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上</p></li><li><p>war模式部署成功后，Tomcat的webapps目录下会有部署的项目内容</p></li><li><p>war exploded模式部署成功后，Tomcat的webapps目录下没有，而使用的是项目的target目录下的内容进行部署</p></li><li><p>建议大家都选war模式进行部署，更符合项目部署的实际情况</p></li></ul></li><li><p>部署成功后，就可以启动项目，为了能更好的看到启动的效果，可以在webapp目录下添加a.html页面</p><p><img src="/images/1627233265351.png"></p></li><li><p>启动成功后，可以通过浏览器进行访问测试</p><p><img src="/images/1627232743706.png"></p></li><li><p>最终的注意事项</p><p><img src="/images/1627232916624.png"></p></li></ol><p>至此，IDEA中集成本地Tomcat进行项目部署的内容我们就介绍完了，整体步骤如下，大家需要按照流程进行部署操作练习。</p><p><img src="/images/1627205657117.png"></p><h4 id="3-4-2-Tomcat-Maven插件"><a href="#3-4-2-Tomcat-Maven插件" class="headerlink" title="3.4.2 Tomcat Maven插件"></a>3.4.2 Tomcat Maven插件</h4><p>在IDEA中使用本地Tomcat进行项目部署，相对来说步骤比较繁琐，所以我们需要一种更简便的方式来替换它，那就是直接使用Maven中的Tomcat插件来部署项目，具体的实现步骤，只需要两步，分别是:</p><ol><li><p>在pom.xml中添加Tomcat插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Tomcat插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用Maven Helper插件快速启动项目，选中项目，右键–&gt;Run Maven –&gt; tomcat7:run</p><p><img src="/images/1627233963315.png"></p></li></ol><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><ul><li><p>如果选中项目并右键点击后，看不到Run Maven和Debug Maven，这个时候就需要在IDEA中下载Maven Helper插件，具体的操作方式为: File –&gt; Settings –&gt; Plugins –&gt; Maven Helper —&gt; Install,安装完后按照提示重启IDEA，就可以看到了。</p><p><img src="/images/1627234184076.png"></p></li><li><p>Maven Tomcat插件目前只有Tomcat7版本，没有更高的版本可以使用</p></li><li><p>使用Maven Tomcat插件，要想修改Tomcat的端口和访问路径，可以直接修改pom.xml</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Tomcat插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><span class="hljs-comment">&lt;!--访问端口号 --&gt;</span><br>                <span class="hljs-comment">&lt;!--项目访问路径</span><br><span class="hljs-comment">未配置访问路径: http://localhost:80/tomcat-demo2/a.html</span><br><span class="hljs-comment">配置/后访问路径: http://localhost:80/a.html</span><br><span class="hljs-comment">如果配置成 /hello,访问路径会变成什么?</span><br><span class="hljs-comment">答案: http://localhost:80/hello/a.html</span><br><span class="hljs-comment">--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><p>通过这一节的学习，大家要掌握在IDEA中使用Tomcat的两种方式，集成本地Tomcat和使用Maven的Tomcat插件。后者更简单，推荐大家使用，但是如果对于Tomcat的版本有比较高的要求，要在Tomcat7以上，这个时候就只能用前者了。</p><h2 id="4，-Servlet"><a href="#4，-Servlet" class="headerlink" title="4， Servlet"></a>4， Servlet</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p><img src="/images/1627234763207.png"></p><ul><li><p>Servlet是JavaWeb最为核心的内容，它是Java提供的一门&#x3D;&#x3D;动态&#x3D;&#x3D;web资源开发技术。</p></li><li><p>使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。</p></li><li><p>Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet</p><p><img src="/images/1627234972853.png"></p></li></ul><p>介绍完Servlet是什么以后，接下来我们就按照<code>快速入门</code>-&gt;<code>执行流程</code>-&gt;<code>生命周期</code>-&gt;<code>体系结构</code>-&gt;<code>urlPattern配置</code>-&gt;<code>XML配置</code>的学习步骤，一步步完成对Servlet的知识学习，首选我们来通过一个入门案例来快速把Servlet用起来。</p><h3 id="4-2-快速入门"><a href="#4-2-快速入门" class="headerlink" title="4.2 快速入门"></a>4.2 快速入门</h3><p>&#x3D;&#x3D;需求分析: 编写一个Servlet类，并使用IDEA中Tomcat插件进行部署，最终通过浏览器访问所编写的Servlet程序。&#x3D;&#x3D;</p><p>具体的实现步骤为:</p><ol><li>创建Web项目<code>web-demo</code>，导入Servlet依赖坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      此处为什么需要添加该标签?</span><br><span class="hljs-comment">      provided指的是在编译和测试过程中有效,最后生成的war包时不会加入</span><br><span class="hljs-comment">       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建:定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中输入一句话</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;servlet hello world~&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>配置:在类上使用@WebServlet注解，配置该Servlet的访问路径</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br></code></pre></td></tr></table></figure><ol start="4"><li>访问:启动Tomcat,浏览器中输入URL地址访问该Servlet</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/web-demo/</span>demo1<br></code></pre></td></tr></table></figure><ol start="5"><li>器访问后，在控制台会打印<code>servlet hello world~</code> 说明servlet程序已经成功运行。</li></ol><p>至此，Servlet的入门案例就已经完成，大家可以按照上面的步骤进行练习了。</p><h3 id="4-3-执行流程"><a href="#4-3-执行流程" class="headerlink" title="4.3 执行流程"></a>4.3 执行流程</h3><p>Servlet程序已经能正常运行，但是我们需要思考个问题: 我们并没有创建ServletDemo1类的对象，也没有调用对象中的service方法，为什么在控制台就打印了<code>servlet hello world~</code>这句话呢?</p><p>要想回答上述问题，我们就需要对Servlet的执行流程进行一个学习。</p><p><img src="/images/1627236923139.png"></p><ul><li>浏览器发出<code>http://localhost:8080/web-demo/demo1</code>请求，从请求中可以解析出三部分内容，分别是<code>localhost:8080</code>、<code>web-demo</code>、<code>demo1</code><ul><li>根据<code>localhost:8080</code>可以找到要访问的Tomcat Web服务器</li><li>根据<code>web-demo</code>可以找到部署在Tomcat服务器上的web-demo项目</li><li>根据<code>demo1</code>可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配</li></ul></li><li>找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法<ul><li>ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用</li><li>service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互</li></ul></li></ul><p><strong>小结</strong></p><p>介绍完Servlet的执行流程，需要大家掌握两个问题：</p><ol><li>Servlet由谁创建?Servlet方法由谁调用?</li></ol><blockquote><p>Servlet由web服务器创建，Servlet方法由web服务器调用</p></blockquote><ol start="2"><li>服务器怎么知道Servlet中一定有service方法?</li></ol><blockquote><p>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</p></blockquote><h3 id="4-4-生命周期"><a href="#4-4-生命周期" class="headerlink" title="4.4 生命周期"></a>4.4 生命周期</h3><p>介绍完Servlet的执行流程后，我们知道Servlet是由Tomcat Web服务器帮我们创建的。</p><p>接下来咱们再来思考一个问题:&#x3D;&#x3D;Tomcat什么时候创建的Servlet对象?&#x3D;&#x3D;</p><p>要想回答上述问题，我们就需要对Servlet的生命周期进行一个学习。</p><ul><li><p>生命周期: 对象的生命周期指一个对象从被创建到被销毁的整个过程。</p></li><li><p>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：</p><ol><li>&#x3D;&#x3D;加载和实例化&#x3D;&#x3D;：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配置?<br><br>@WebServlet(urlPatterns = &quot;/demo1&quot;,loadOnStartup = 1)<br>loadOnstartup的取值有两类情况<br>（1）负整数:第一次访问时创建Servlet对象<br>（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高<br></code></pre></td></tr></table></figure><ol start="2"><li>&#x3D;&#x3D;初始化&#x3D;&#x3D;：在Servlet实例化之后，容器将调用Servlet的&#x3D;&#x3D;init()&#x3D;&#x3D;方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只&#x3D;&#x3D;调用一次&#x3D;&#x3D;</li><li>&#x3D;&#x3D;请求处理&#x3D;&#x3D;：&#x3D;&#x3D;每次&#x3D;&#x3D;请求Servlet时，Servlet容器都会调用Servlet的&#x3D;&#x3D;service()&#x3D;&#x3D;方法对请求进行处理</li><li>&#x3D;&#x3D;服务终止&#x3D;&#x3D;：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的&#x3D;&#x3D;destroy()&#x3D;&#x3D;方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</li></ol></li><li><p>通过案例演示下上述的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Servlet生命周期方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span><br><span class="hljs-comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span><br><span class="hljs-comment">     *  2.调用次数: 1次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> config</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供服务</span><br><span class="hljs-comment">     * 1.调用时机:每一次Servlet被访问时，调用</span><br><span class="hljs-comment">     * 2.调用次数: 多次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> res</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;servlet hello world~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁方法</span><br><span class="hljs-comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span><br><span class="hljs-comment">     * 2.调用次数: 1次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:如何才能让Servlet中的destroy方法被执行？&#x3D;&#x3D;</p><p><img src="/images/1627239292226.png"></p></li></ul><p>在Terminal命令行中，先使用<code>mvn tomcat7:run</code>启动，然后再使用<code>ctrl+c</code>关闭tomcat</p><p><strong>小结</strong></p><p>这节中需要掌握的内容是:</p><ol><li>Servlet对象在什么时候被创建的?</li></ol><blockquote><p>默认是第一次访问的时候被创建，可以使用@WebServlet(urlPatterns &#x3D; “&#x2F;demo2”,loadOnStartup &#x3D; 1)的loadOnStartup 修改成在服务器启动的时候创建。</p></blockquote><ol start="2"><li>Servlet生命周期中涉及到的三个方法，这三个方法是什么?什么时候被调用?调用几次?</li></ol><blockquote><p>涉及到三个方法，分别是 init()、service()、destroy()</p><p>init方法在Servlet对象被创建的时候执行，只执行1次</p><p>service方法在Servlet被访问的时候调用，每访问1次就调用1次</p><p>destroy方法在Servlet对象被销毁的时候调用，只执行1次</p></blockquote><h3 id="4-5-方法介绍"><a href="#4-5-方法介绍" class="headerlink" title="4.5 方法介绍"></a>4.5 方法介绍</h3><p>Servlet中总共有5个方法，我们已经介绍过其中的三个，剩下的两个方法作用分别是什么？</p><p>我们先来回顾下前面讲的三个方法，分别是:</p><ul><li>初始化方法，在Servlet被创建时执行，只执行一次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <br></code></pre></td></tr></table></figure><ul><li>提供服务方法， 每次Servlet被访问，都会调用该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span><br></code></pre></td></tr></table></figure><ul><li>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <br></code></pre></td></tr></table></figure><p>剩下的两个方法是:</p><ul><li>获取Servlet信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取ServletConfig对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。具体如何操作?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Servlet方法介绍</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/demo3&quot;,loadOnStartup = 1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ServletConfig servletConfig;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     *  1.调用时机：默认情况下，Servlet被第一次访问时，调用</span><br><span class="hljs-comment">     *      * loadOnStartup: 默认为-1，修改为0或者正整数，则会在服务器启动的时候，调用</span><br><span class="hljs-comment">     *  2.调用次数: 1次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> config</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">this</span>.servletConfig = config;<br>        System.out.println(<span class="hljs-string">&quot;init...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> servletConfig;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供服务</span><br><span class="hljs-comment">     * 1.调用时机:每一次Servlet被访问时，调用</span><br><span class="hljs-comment">     * 2.调用次数: 多次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> res</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;servlet hello world~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁方法</span><br><span class="hljs-comment">     * 1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span><br><span class="hljs-comment">     * 2.调用次数: 1次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>getServletInfo()和getServletConfig()这两个方法使用的不是很多，大家了解下。</p><h3 id="4-6-体系结构"><a href="#4-6-体系结构" class="headerlink" title="4.6 体系结构"></a>4.6 体系结构</h3><p>通过上面的学习，我们知道要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法，那有没有更简单方式来创建Servlet呢?</p><p>要想解决上面的问题，我们需要先对Servlet的体系结构进行下了解:</p><p><img src="/images/1627240593506.png"></p><p>因为我们将来开发B&#x2F;S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承&#x3D;&#x3D;HttpServlet&#x3D;&#x3D;</p><p>具体的编写格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//TODO GET 请求方式处理逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//TODO Post 请求方式处理逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;post...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>要想发送一个GET请求，请求该Servlet，只需要通过浏览器发送<code>http://localhost:8080/web-demo/demo4</code>,就能看到doGet方法被执行了</li><li>要想发送一个POST请求，请求该Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个form表单来发送请求，在webapp下创建一个<code>a.html</code>页面，内容如下:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/web-demo/demo4&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动测试，即可看到doPost方法被执行了。</p><p>Servlet的简化编写就介绍完了，接着需要思考两个问题:</p><ol><li>HttpServlet中为什么要根据请求方式的不同，调用不同的方法?</li><li>如何调用?</li></ol><p>针对问题一，我们需要回顾之前的知识点&#x3D;&#x3D;前端发送GET和POST请求的时候，参数的位置不一致，GET请求参数在请求行中，POST请求参数在请求体中&#x3D;&#x3D;，为了能处理不同的请求方式，我们得在service方法中进行判断，然后写不同的业务处理，这样能实现，但是每个Servlet类中都将有相似的代码，针对这个问题，有什么可以优化的策略么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-meta">@WebServlet(&quot;/demo5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//如何调用?</span><br>        <span class="hljs-comment">//获取请求方式，根据不同的请求方式进行不同的业务处理</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest)req;<br>       <span class="hljs-comment">//1. 获取请求方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>        <span class="hljs-comment">//2. 判断</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            <span class="hljs-comment">// get方式的处理逻辑</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(method))&#123;<br>            <span class="hljs-comment">// post方式的处理逻辑</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>要解决上述问题，我们可以对Servlet接口进行继承封装，来简化代码开发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHttpServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest)req;<br>        <span class="hljs-comment">//1. 获取请求方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>        <span class="hljs-comment">//2. 判断</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            <span class="hljs-comment">// get方式的处理逻辑</span><br>            doGet(req,res);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(method))&#123;<br>            <span class="hljs-comment">// post方式的处理逻辑</span><br>            doPost(req,res);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>有了MyHttpServlet这个类，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。接下来，可以把ServletDemo5代码进行改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;get...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;post...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。</p><p>类似MyHttpServlet这样的类Servlet中已经为我们提供好了，就是HttpServlet,翻开源码，大家可以搜索<code>service()</code>方法，你会发现HttpServlet做的事更多，不仅可以处理GET和POST还可以处理其他五种请求方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>        <span class="hljs-keyword">throws</span> ServletException, IOException<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br><br>        <span class="hljs-keyword">if</span> (method.equals(METHOD_GET)) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> getLastModified(req);<br>            <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// servlet doesn&#x27;t support if-modified-since, no reason</span><br>                <span class="hljs-comment">// to go through further expensive logic</span><br>                doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">ifModifiedSince</span> <span class="hljs-operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);<br>                <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;<br>                    <span class="hljs-comment">// If the servlet mod time is later, call doGet()</span><br>                    <span class="hljs-comment">// Round down to the nearest second for a proper compare</span><br>                    <span class="hljs-comment">// A ifModifiedSince of -1 will always be less</span><br>                    maybeSetLastModified(resp, lastModified);<br>                    doGet(req, resp);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_HEAD)) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> getLastModified(req);<br>            maybeSetLastModified(resp, lastModified);<br>            doHead(req, resp);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_POST)) &#123;<br>            doPost(req, resp);<br>            <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_PUT)) &#123;<br>            doPut(req, resp);<br>            <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_DELETE)) &#123;<br>            doDelete(req, resp);<br>            <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;<br>            doOptions(req,resp);<br>            <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_TRACE)) &#123;<br>            doTrace(req,resp);<br>            <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//</span><br>            <span class="hljs-comment">// Note that this means NO servlet supports whatever</span><br>            <span class="hljs-comment">// method was requested, anywhere on this server.</span><br>            <span class="hljs-comment">//</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>            Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>];<br>            errArgs[<span class="hljs-number">0</span>] = method;<br>            errMsg = MessageFormat.format(errMsg, errArgs);<br>            <br>            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><p>通过这一节的学习，要掌握:</p><ol><li>HttpServlet的使用步骤</li></ol><blockquote><p>继承HttpServlet</p><p>重写doGet和doPost方法</p></blockquote><ol start="2"><li>HttpServlet原理</li></ol><blockquote><p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法</p></blockquote><h3 id="4-7-urlPattern配置"><a href="#4-7-urlPattern配置" class="headerlink" title="4.7 urlPattern配置"></a>4.7 urlPattern配置</h3><p>Servlet类编写好后，要想被访问到，就需要配置其访问路径（&#x3D;&#x3D;urlPattern&#x3D;&#x3D;）</p><ul><li><p>一个Servlet,可以配置多个urlPattern</p><p><img src="/images/1627272805178.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* urlPattern: 一个Servlet可以配置多个访问路径</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &#123;&quot;/demo7&quot;,&quot;/demo8&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>        <br>        System.out.println(<span class="hljs-string">&quot;demo7 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在浏览器上输入<code>http://localhost:8080/web-demo/demo7</code>,<code>http://localhost:8080/web-demo/demo8</code>这两个地址都能访问到ServletDemo7的doGet方法。</p></li><li><p>&#x3D;&#x3D;urlPattern配置规则&#x3D;&#x3D;</p><ul><li><p>精确匹配</p><p><img src="/images/1627273174144.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UrlPattern:</span><br><span class="hljs-comment"> * * 精确匹配</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/user/select&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;demo8 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径<code>http://localhost:8080/web-demo/user/select</code></p></li><li><p>目录匹配</p><p><img src="/images/1627273184095.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UrlPattern:</span><br><span class="hljs-comment"> * * 目录匹配: /user/*</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/user/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo9</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;demo9 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径<code>http://localhost:8080/web-demo/user/任意</code></p><p>&#x3D;&#x3D;思考:&#x3D;&#x3D;</p><ol><li>访问路径<code>http://localhost:8080/web-demo/user</code>是否能访问到demo9的doGet方法?</li><li>访问路径<code>http://localhost:8080/web-demo/user/a/b</code>是否能访问到demo9的doGet方法?</li><li>访问路径<code>http://localhost:8080/web-demo/user/select</code>是否能访问到demo9还是demo8的doGet方法?</li></ol><p>答案是: 能、能、demo8，进而我们可以得到的结论是<code>/user/*</code>中的<code>/*</code>代表的是零或多个层级访问目录同时精确匹配优先级要高于目录匹配。</p></li><li><p>扩展名匹配</p><p><img src="/images/1627273194118.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UrlPattern:</span><br><span class="hljs-comment"> * * 扩展名匹配: *.do</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;*.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo10</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;demo10 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径<code>http://localhost:8080/web-demo/任意.do</code></p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;:</p><ol><li><p>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</p><p><img src="/images/1627274483755.png"></p></li><li><p>如果路径配置的是<code>*.do</code>,那么在*.do的前面不能加<code>/</code>,否则会报错</p><p><img src="/images/1627274368245.png"></p></li></ol></li><li><p>任意匹配</p><p><img src="/images/1627273201370.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UrlPattern:</span><br><span class="hljs-comment"> * * 任意匹配： /</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo11</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;demo11 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问路径<code>http://localhost:8080/demo-web/任意</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UrlPattern:</span><br><span class="hljs-comment"> * * 任意匹配： /*</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo12</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;demo12 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>访问路径&#96;<a href="http://localhost:8080/demo-web/%E4%BB%BB%E6%84%8F">http://localhost:8080/demo-web/任意</a></p><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;<code>/</code>和<code>/*</code>的区别?</p><ol><li><p>当我们的项目中的Servlet配置了 “&#x2F;“,会覆盖掉tomcat中的DefaultServlet,当其他的url-pattern都匹配不上时都会走这个Servlet</p></li><li><p>当我们的项目中配置了”&#x2F;*”,意味着匹配任意访问路径</p></li><li><p>DefaultServlet是用来处理静态资源，如果配置了”&#x2F;“会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问</p></li></ol></li></ul></li></ul><p><strong>小结</strong></p><ol><li><p>urlPattern总共有四种配置方式，分别是精确匹配、目录匹配、扩展名匹配、任意匹配</p></li><li><p>五种配置的优先级为 精确匹配 &gt; 目录匹配&gt; 扩展名匹配 &gt; &#x2F;* &gt; &#x2F; ,无需记，以最终运行结果为准。</p></li></ol><h3 id="4-8-XML配置"><a href="#4-8-XML配置" class="headerlink" title="4.8 XML配置"></a>4.8 XML配置</h3><p>前面对应Servlet的配置，我们都使用的是@WebServlet,这个是Servlet从3.0版本后开始支持注解配置，3.0版本前只支持XML配置文件的配置方法。</p><p>对于XML的配置步骤有两步:</p><ul><li>编写Servlet类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo13</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyHttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;demo13 get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在web.xml中配置该Servlet</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>   <br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        Servlet 全类名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet的名称，名字任意--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo13<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet的类全名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.itheima.web.ServletDemo13<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        Servlet 访问路径</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet的名称，要和上面的名称一致--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo13<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet的访问路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/demo13<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种配置方式和注解比起来，确认麻烦很多，所以建议大家使用注解来开发。但是大家要认识上面这种配置方式，因为并不是所有的项目都是基于注解开发的。</p>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/20/Request&amp;Response/"/>
    <url>/2022/07/20/Request&amp;Response/</url>
    
    <content type="html"><![CDATA[<h2 id="1，Request和Response的概述"><a href="#1，Request和Response的概述" class="headerlink" title="1，Request和Response的概述"></a>1，Request和Response的概述</h2><p>&#x3D;&#x3D;Request是请求对象，Response是响应对象。&#x3D;&#x3D;这两个对象在我们使用Servlet的时候有看到：</p><p><img src="/images/1628735216156.png"> </p><p>此时，我们就需要思考一个问题request和response这两个参数的作用是什么?</p><p><img src="/images/1628735746602.png"> </p><ul><li>request:&#x3D;&#x3D;获取&#x3D;&#x3D;请求数据<ul><li>浏览器会发送HTTP请求到后台服务器[Tomcat]</li><li>HTTP的请求中会包含很多请求数据[请求行+请求头+请求体]</li><li>后台服务器[Tomcat]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</li><li>所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数</li><li>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务</li></ul></li><li>response:&#x3D;&#x3D;设置&#x3D;&#x3D;响应数据<ul><li>业务处理完后，后台就需要给前端返回业务处理的结果即响应数据</li><li>把响应数据封装到response对象中</li><li>后台服务器[Tomcat]会解析response对象,按照[响应行+响应头+响应体]格式拼接结果</li><li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li></ul></li></ul><p>对于上述所讲的内容，我们通过一个案例来初步体验下request和response对象的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//使用request对象 获取请求数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">//url?name=zhangsan</span><br><br>        <span class="hljs-comment">//使用response对象 设置响应数据</span><br>        response.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        response.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span>+name+<span class="hljs-string">&quot;,欢迎您！&lt;/h1&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Post...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动成功后就可以通过浏览器来访问，并且根据传入参数的不同就可以在页面上展示不同的内容:</p><p><img src="/images/1628738273049.png"> </p><p><strong>小结</strong></p><p>在这节中，我们主要认识了下request对象和reponse对象:</p><ul><li>request对象是用来封装请求数据的对象</li><li>response对象是用来封装响应数据的对象</li></ul><p>目前我们只知道这两个对象是用来干什么的，那么它们具体是如何实现的，就需要我们继续深入的学习。接下来，就先从Request对象来学习,主要学习下面这些内容:</p><ul><li><p>request继承体系</p></li><li><p>request获取请求参数</p></li><li><p>request请求转发</p></li></ul><h2 id="2，Request对象"><a href="#2，Request对象" class="headerlink" title="2，Request对象"></a>2，Request对象</h2><h3 id="2-1-Request继承体系"><a href="#2-1-Request继承体系" class="headerlink" title="2.1 Request继承体系"></a>2.1 Request继承体系</h3><p>在学习这节内容之前，我们先思考一个问题，前面在介绍Request和Reponse对象的时候，比较细心的同学可能已经发现：</p><ul><li>当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse</li><li>当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse</li></ul><p>那么，</p><ul><li>ServletRequest和HttpServletRequest的关系是什么?</li><li>request对象是有谁来创建的?</li><li>request提供了哪些API,这些API从哪里查?</li></ul><p>首先，我们先来看下Request的继承体系:</p><p><img src="/images/1628740441008.png"> </p><p>从上图中可以看出，ServletRequest和HttpServletRequest都是Java提供的，所以我们可以打开JavaEE提供的API文档[参考: 资料&#x2F;JavaEE7-api.chm],打开后可以看到:</p><p><img src="/images/1628741839475.png"> </p><p>所以ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象，这个时候就引发了下面这个问题:</p><p><img src="/images/1628742224589.png"> </p><p>这个时候，我们就需要用到Request继承体系中的<code>RequestFacade</code>:</p><ul><li>该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。</li><li>Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器[Tomcat]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建</li><li>要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法</li></ul><p>对于上述结论，要想验证，可以编写一个Servlet，在方法中把request对象打印下，就能看到最终的对象是不是RequestFacade,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(request);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务器，运行访问<code>http://localhost:8080/request-demo/demo2</code>,得到运行结果:</p><p><img src="/images/1628743040046.png"> </p><p><strong>小结</strong></p><ul><li>Request的继承体系为ServletRequest–&gt;HttpServletRequest–&gt;RequestFacade</li><li>Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法</li><li>使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明</li></ul><h3 id="2-2-Request获取请求数据"><a href="#2-2-Request获取请求数据" class="headerlink" title="2.2 Request获取请求数据"></a>2.2 Request获取请求数据</h3><p>HTTP请求数据总共分为三部分内容，分别是&#x3D;&#x3D;请求行、请求头、请求体&#x3D;&#x3D;，对于这三部分内容的数据，分别该如何获取，首先我们先来学习请求行数据如何获取?</p><h4 id="2-2-1-获取请求行数据"><a href="#2-2-1-获取请求行数据" class="headerlink" title="2.2.1 获取请求行数据"></a>2.2.1 获取请求行数据</h4><p>请求行包含三块内容，分别是<code>请求方式</code>、<code>请求资源路径</code>、<code>HTTP协议及版本</code></p><p><img src="/images/1628748240075.png"> </p><p>对于这三部分内容，request对象都提供了对应的API方法来获取，具体如下:</p><ul><li>获取请求方式: <code>GET</code></li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getMethod</span>()</span><br></code></pre></td></tr></table></figure><ul><li>获取虚拟目录(项目访问路径): <code>/request-demo</code></li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getContextPath</span>()</span><br></code></pre></td></tr></table></figure><ul><li>获取URL(统一资源定位符): <code>http://localhost:8080/request-demo/req1</code></li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">StringBuffer</span> <span class="hljs-function"><span class="hljs-title">getRequestURL</span>()</span><br></code></pre></td></tr></table></figure><ul><li>获取URI(统一资源标识符): <code>/request-demo/req1</code></li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getRequestURI</span>()</span><br></code></pre></td></tr></table></figure><ul><li>获取请求参数(GET方式): <code>username=zhangsan&amp;password=123</code></li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getQueryString</span>()</span><br></code></pre></td></tr></table></figure><p>介绍完上述方法后，咱们通过代码把上述方法都使用下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 获取请求数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// String getMethod()：获取请求方式： GET</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>        System.out.println(method);<span class="hljs-comment">//GET</span><br>        <span class="hljs-comment">// String getContextPath()：获取虚拟目录(项目访问路径)：/request-demo</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> req.getContextPath();<br>        System.out.println(contextPath);<br>        <span class="hljs-comment">// StringBuffer getRequestURL(): 获取URL(统一资源定位符)：http://localhost:8080/request-demo/req1</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL();<br>        System.out.println(url.toString());<br>        <span class="hljs-comment">// String getRequestURI()：获取URI(统一资源标识符)： /request-demo/req1</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> req.getRequestURI();<br>        System.out.println(uri);<br>        <span class="hljs-comment">// String getQueryString()：获取请求参数（GET方式）： username=zhangsan</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queryString</span> <span class="hljs-operator">=</span> req.getQueryString();<br>        System.out.println(queryString);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务器，访问<code>http://localhost:8080/request-demo/req1?username=zhangsan&amp;passwrod=123</code>，获取的结果如下:</p><p><img src="/images/1628762794935.png"> </p><h4 id="2-2-2-获取请求头数据"><a href="#2-2-2-获取请求头数据" class="headerlink" title="2.2.2 获取请求头数据"></a>2.2.2 获取请求头数据</h4><p>对于请求头的数据，格式为<code>key: value</code>如下:</p><p><img src="/images/1628768652535.png"> </p><p>所以根据请求头名称获取对应值的方法为:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">String</span> getHeader(<span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>)<br></code></pre></td></tr></table></figure><p>接下来，在代码中如果想要获取客户端浏览器的版本信息，则可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 获取请求数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求头: user-agent: 浏览器的版本信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> req.getHeader(<span class="hljs-string">&quot;user-agent&quot;</span>);<br>System.out.println(agent);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重新启动服务器后，<code>http://localhost:8080/request-demo/req1?username=zhangsan&amp;passwrod=123</code>，获取的结果如下:</p><p><img src="/images/1628769145524.png"> </p><h4 id="2-2-3-获取请求体数据"><a href="#2-2-3-获取请求体数据" class="headerlink" title="2.2.3 获取请求体数据"></a>2.2.3 获取请求体数据</h4><p>浏览器在发送GET请求的时候是没有请求体的，所以需要把请求方式变更为POST，请求体中的数据格式如下:</p><p><img src="/images/1628768665185.png"> </p><p>对于请求体中的数据，Request对象提供了如下两种方式来获取其中的数据，分别是:</p><ul><li>获取字节输入流，如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">ServletInputStream</span> <span class="hljs-function"><span class="hljs-title">getInputStream</span>()</span><br>该方法可以获取字节<br></code></pre></td></tr></table></figure><ul><li>获取字符输入流，如果前端发送的是纯文本数据，则使用该方法</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">BufferedReader</span> <span class="hljs-function"><span class="hljs-title">getReader</span>()</span><br></code></pre></td></tr></table></figure><p>接下来，大家需要思考，要想获取到请求体的内容该如何实现?</p><blockquote><p>具体实现的步骤如下:</p><p>1.准备一个页面，在页面中添加form表单,用来发送post请求</p><p>2.在Servlet的doPost方法中获取请求体数据</p><p>3.在doPost方法中使用request的getReader()或者getInputStream()来获取</p><p>4.访问测试</p></blockquote><ol><li>在项目的webapp目录下添加一个html页面，名称为：<code>req.html</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    action:form表单提交的请求地址</span><br><span class="hljs-comment">    method:请求方式，指定为post</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/request-demo/req1&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在Servlet的doPost方法中获取数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 获取请求数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//在此处获取请求体中的数据</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>调用getReader()或者getInputStream()方法，因为目前前端传递的是纯文本数据，所以我们采用getReader()方法来获取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 获取请求数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>         <span class="hljs-comment">//获取post 请求体：请求参数</span><br>        <span class="hljs-comment">//1. 获取字符输入流</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> req.getReader();<br>        <span class="hljs-comment">//2. 读取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(line);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p><p>BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后，BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。</p><ol start="4"><li><p>启动服务器，通过浏览器访问<code>http://localhost:8080/request-demo/req.html</code></p><p><img src="/images/1628770516387.png"></p></li></ol><p>点击<code>提交</code>按钮后，就可以在控制台看到前端所发送的请求数据</p><p><img src="/images/1628770585480.png"> </p><p><strong>小结</strong></p><p>HTTP请求数据中包含了<code>请求行</code>、<code>请求头</code>和<code>请求体</code>，针对这三部分内容，Request对象都提供了对应的API方法来获取对应的值:</p><ul><li>请求行<ul><li>getMethod()获取请求方式</li><li>getContextPath()获取项目访问路径</li><li>getRequestURL()获取请求URL</li><li>getRequestURI()获取请求URI</li><li>getQueryString()获取GET请求方式的请求参数</li></ul></li><li>请求头<ul><li>getHeader(String name)根据请求头名称获取其对应的值</li></ul></li><li>请求体<ul><li>注意: &#x3D;&#x3D;浏览器发送的POST请求才有请求体&#x3D;&#x3D;</li><li>如果是纯文本数据:getReader()</li><li>如果是字节数据如文件数据:getInputStream()</li></ul></li></ul><h4 id="2-2-4-获取请求参数的通用方式"><a href="#2-2-4-获取请求参数的通用方式" class="headerlink" title="2.2.4 获取请求参数的通用方式"></a>2.2.4 获取请求参数的通用方式</h4><p>在学习下面内容之前，我们先提出两个问题:</p><ul><li>什么是请求参数?</li><li>请求参数和请求数据的关系是什么?</li></ul><p>1.什么是请求参数?</p><p>为了能更好的回答上述两个问题，我们拿用户登录的例子来说明</p><p>1.1 想要登录网址，需要进入登录页面</p><p>1.2 在登录页面输入用户名和密码</p><p>1.3 将用户名和密码提交到后台</p><p>1.4 后台校验用户名和密码是否正确</p><p>1.5 如果正确，则正常登录，如果不正确，则提示用户名或密码错误</p><p>上述例子中，用户名和密码其实就是我们所说的请求参数。</p><p>2.什么是请求数据?</p><p>请求数据则是包含请求行、请求头和请求体的所有数据</p><p>3.请求参数和请求数据的关系是什么?</p><p>3.1 请求参数是请求数据中的部分内容</p><p>3.2 如果是GET请求，请求参数在请求行中</p><p>3.3 如果是POST请求，请求参数一般在请求体中</p><p>对于请求参数的获取,常用的有以下两种:</p><ul><li>GET方式:</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getQueryString</span>()</span><br></code></pre></td></tr></table></figure><ul><li>POST方式:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">BufferedReader <span class="hljs-title">getReader</span>()</span>;<br></code></pre></td></tr></table></figure><p>有了上述的知识储备，我们来实现一个案例需求:</p><p>（1）发送一个GET请求并携带用户名，后台接收后打印到控制台</p><p>（2）发送一个POST请求并携带用户名，后台接收后打印到控制台</p><p>此处大家需要注意的是GET请求和POST请求接收参数的方式不一样，具体实现的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> req.getQueryString();<br>        System.out.println(result);<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> req.getReader();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>对于上述的代码，会存在什么问题呢?</p><p><img src="/images/1628776252445.png"> </p></li><li><p>如何解决上述重复代码的问题呢?</p><p><img src="/images/1628776433318.png"></p></li></ul><p>当然，也可以在doGet中调用doPost,在doPost中完成参数的获取和打印,另外需要注意的是，doGet和doPost方法都必须存在，不能删除任意一个。</p><p>&#x3D;&#x3D;GET请求和POST请求获取请求参数的方式不一样，在获取请求参数这块该如何实现呢?&#x3D;&#x3D;</p><p>要想实现，我们就需要&#x3D;&#x3D;思考&#x3D;&#x3D;:</p><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种&#x3D;&#x3D;统一&#x3D;&#x3D;获取请求参数的方式，从而&#x3D;&#x3D;统一&#x3D;&#x3D;doGet和doPost方法内的代码?</p><p>解决方案一:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>        <span class="hljs-comment">//获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            params = req.getQueryString();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(method))&#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> req.getReader();<br>            params = reader.readLine();<br>        &#125;<br>        <span class="hljs-comment">//将请求参数进行打印控制台</span><br>        System.out.println(params);<br>      <br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用request的getMethod()来获取请求方式，根据请求方式的不同分别获取请求参数值，这样就可以解决上述问题，但是以后每个Servlet都需要这样写代码，实现起来比较麻烦，这种方案我们不采用</p><p>解决方案二:</p><p>request对象已经将上述获取请求参数的方法进行了封装，并且request提供的方法实现的功能更强大，以后只需要调用request提供的方法即可，在request的方法中都实现了哪些操作?</p><p>(1)根据不同的请求方式获取请求参数，获取的内容如下:</p><p><img src="/images/1628778931277.png"> </p><p>(2)把获取到的内容进行分割，内容如下:</p><p><img src="/images/1628779067793.png"> </p><p>(3)把分割后端数据，存入到一个Map集合中:</p><p><img src="/images/1628779368501.png"> </p><p><strong>注意</strong>:因为参数的值可能是一个，也可能有多个，所以Map的值的类型为String数组。</p><p>基于上述理论，request对象为我们提供了如下方法:</p><ul><li>获取所有参数Map集合</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>[]&gt; getParameterMap()<br></code></pre></td></tr></table></figure><ul><li>根据名称获取参数值（数组）</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">String</span>[] getParameterValues(<span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>)<br></code></pre></td></tr></table></figure><ul><li>根据名称获取参数值(单个值)</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">String</span> getParameter(<span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>)<br></code></pre></td></tr></table></figure><p>接下来，我们通过案例来把上述的三个方法进行实例演示:</p><p>1.修改req.html页面，添加爱好选项，爱好可以同时选多个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/request-demo/req2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 游泳<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 爬山 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/1628780937599.png"> </p><p>2.在Servlet代码中获取页面传递GET请求的参数值</p><p> 2.1获取GET方式的所有请求参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 通用方式获取请求参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//GET请求逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;get....&quot;</span>);<br>        <span class="hljs-comment">//1. 获取所有参数的Map集合</span><br>        Map&lt;String, String[]&gt; map = req.getParameterMap();<br>        <span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;<br>            <span class="hljs-comment">// username:zhangsan lisi</span><br>            System.out.print(key+<span class="hljs-string">&quot;:&quot;</span>);<br><br>            <span class="hljs-comment">//获取值</span><br>            String[] values = map.get(key);<br>            <span class="hljs-keyword">for</span> (String value : values) &#123;<br>                System.out.print(value + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取的结果为:</p><p><img src="/images/1628780965283.png"> </p><p> 2.2获取GET请求参数中的爱好，结果是数组值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 通用方式获取请求参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//GET请求逻辑</span><br>        <span class="hljs-comment">//...</span><br>        System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>        String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String hobby : hobbies) &#123;<br>            System.out.println(hobby);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取的结果为:</p><p><img src="/images/1628781031437.png"> </p><p> 2.3获取GET请求参数中的用户名和密码，结果是单个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * request 通用方式获取请求参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//GET请求逻辑</span><br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(username);<br>        System.out.println(password);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取的结果为:</p><p><img src="/images/1628781176434.png"> </p><p>3.在Servlet代码中获取页面传递POST请求的参数值</p><p> 3.1将req.html页面form表单的提交方式改成post</p><p> 3.2将doGet方法中的内容复制到doPost方法中即可</p><p><strong>小结</strong></p><ul><li><p>req.getParameter()方法使用的频率会比较高</p></li><li><p>以后我们再写代码的时候，就只需要按照如下格式来编写:</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>       <span class="hljs-comment">//采用request提供的获取请求参数的通用方式来获取请求参数</span><br>       <span class="hljs-comment">//编写其他的业务代码...</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-keyword">this</span>.doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-IDEA快速创建Servlet"><a href="#2-3-IDEA快速创建Servlet" class="headerlink" title="2.3 IDEA快速创建Servlet"></a>2.3 IDEA快速创建Servlet</h3><p>使用通用方式获取请求参数后，屏蔽了GET和POST的请求方式代码的不同，则代码可以定义如下格式:</p><p><img src="/images/1628781419752.png"> </p><p>由于格式固定，所以我们可以使用IDEA提供的模板来制作一个Servlet的模板，这样我们后期在创建Servlet的时候就会更高效，具体如何实现:</p><p>(1)按照自己的需求，修改Servlet创建的模板内容</p><p><img src="/images/1628781545912.png"> </p><p>（2）使用servlet模板创建Servlet类</p><p><img src="/images/1628782117420.png"> </p><h3 id="2-4-请求参数中文乱码问题"><a href="#2-4-请求参数中文乱码问题" class="headerlink" title="2.4 请求参数中文乱码问题"></a>2.4 请求参数中文乱码问题</h3><p>问题展示:</p><p>(1)将req.html页面的请求方式修改为get</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/request-demo/req2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 游泳<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 爬山 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2)在Servlet方法中获取参数，并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中文乱码问题解决方案</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-comment">//1. 获取username</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>       System.out.println(username);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）启动服务器，页面上输入中文参数</p><p><img src="/images/1628784323297.png"> </p><p>（4）查看控制台打印内容</p><p><img src="/images/1628784356157.png"> </p><p>（5）把req.html页面的请求方式改成post,再次发送请求和中文参数</p><p><img src="/images/1628784425182.png"> </p><p>（6）查看控制台打印内容，依然为乱码</p><p><img src="/images/1628784356157.png"> </p><p>通过上面的案例，会发现，不管是GET还是POST请求，在发送的请求参数中如果有中文，在后台接收的时候，都会出现中文乱码的问题。具体该如何解决呢？</p><h4 id="2-4-1-POST请求解决方案"><a href="#2-4-1-POST请求解决方案" class="headerlink" title="2.4.1 POST请求解决方案"></a>2.4.1 POST请求解决方案</h4><ul><li>分析出现中文乱码的原因：<ul><li>POST的请求参数是通过request的getReader()来获取流中的数据</li><li>TOMCAT在获取流的时候采用的编码是ISO-8859-1</li><li>ISO-8859-1编码是不支持中文的，所以会出现乱码</li></ul></li><li>解决方案：<ul><li>页面设置的编码格式为UTF-8</li><li>把TOMCAT在获取流数据之前的编码设置为UTF-8</li><li>通过request.setCharacterEncoding(“UTF-8”)设置编码,UTF-8也可以写成小写</li></ul></li></ul><p>修改后的代码为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中文乱码问题解决方案</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 解决乱码: POST getReader()</span><br>        <span class="hljs-comment">//设置字符输入流的编码，设置的字符集要和页面保持一致</span><br>        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>       <span class="hljs-comment">//2. 获取username</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>       System.out.println(username);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新发送POST请求，就会在控制台看到正常展示的中文结果。</p><p>至此POST请求中文乱码的问题就已经解决，但是这种方案不适用于GET请求，这个原因是什么呢，咱们下面再分析。</p><h4 id="2-4-2-GET请求解决方案"><a href="#2-4-2-GET请求解决方案" class="headerlink" title="2.4.2 GET请求解决方案"></a>2.4.2 GET请求解决方案</h4><p>刚才提到一个问题是<code>POST请求的中文乱码解决方案为什么不适用GET请求？</code></p><ul><li>GET请求获取请求参数的方式是<code>request.getQueryString()</code></li><li>POST请求获取请求参数的方式是<code>request.getReader()</code></li><li>request.setCharacterEncoding(“utf-8”)是设置request处理流的编码</li><li>getQueryString方法并没有通过流的方式获取数据</li></ul><p>所以GET请求不能用设置编码的方式来解决中文乱码问题，那问题又来了，如何解决GET请求的中文乱码呢? </p><ol><li>首先我们需要先分析下GET请求出现乱码的原因:</li></ol><p> <img src="/images/1628829610823.png"> </p><p>(1)浏览器通过HTTP协议发送请求和数据给后台服务器（Tomcat)</p><p>(2)浏览器在发送HTTP的过程中会对中文数据进行URL&#x3D;&#x3D;编码&#x3D;&#x3D;</p><p>(3)在进行URL编码的时候会采用页面<code>&lt;meta&gt;</code>标签指定的UTF-8的方式进行编码，<code>张三</code>编码后的结果为<code>%E5%BC%A0%E4%B8%89</code></p><p>(4)后台服务器(Tomcat)接收到<code>%E5%BC%A0%E4%B8%89</code>后会默认按照<code>ISO-8859-1</code>进行URL&#x3D;&#x3D;解码&#x3D;&#x3D;</p><p>(5)由于前后编码与解码采用的格式不一样，就会导致后台获取到的数据为乱码。</p><p>思考: 如果把<code>req.html</code>页面的<code>&lt;meta&gt;</code>标签的charset属性改成<code>ISO-8859-1</code>,后台不做操作，能解决中文乱码问题么?</p><p>答案是否定的，因为<code>ISO-8859-1</code>本身是不支持中文展示的，所以改了<meta>标签的charset属性后，会导致页面上的中文内容都无法正常展示。</p><p>分析完上面的问题后，我们会发现，其中有两个我们不熟悉的内容就是&#x3D;&#x3D;URL编码&#x3D;&#x3D;和&#x3D;&#x3D;URL解码&#x3D;&#x3D;，什么是URL编码，什么又是URL解码呢?</p><p><strong>URL编码</strong></p><p>这块知识我们只需要了解下即可,具体编码过程分两步，分别是:</p><p>(1)将字符串按照编码方式转为二进制</p><p>(2)每个字节转为2个16进制数并在前边加上%</p><p><code>张三</code>按照UTF-8的方式转换成二进制的结果为:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1110 </span><span class="hljs-number">0101 </span><span class="hljs-number">1011 </span><span class="hljs-number">1100 </span><span class="hljs-number">1010 </span><span class="hljs-number">0000 </span><span class="hljs-number">1110 </span><span class="hljs-number">0100 </span><span class="hljs-number">1011 </span><span class="hljs-number">1000 </span><span class="hljs-number">1000 </span><span class="hljs-number">1001</span><br></code></pre></td></tr></table></figure><p>这个结果是如何计算的?</p><p>使用<code>http://www.mytju.com/classcode/tools/encode_utf8.asp</code>，输入<code>张三</code></p><p><img src="/images/1628833310473.png"> </p><p>就可以获取张和三分别对应的10进制，然后在使用计算器，选择程序员模式，计算出对应的二进制数据结果:</p><p><img src="/images/1628833496171.png"> </p><p>在计算的十六进制结果中，每两位前面加一个%,就可以获取到<code>%E5%BC%A0%E4%B8%89</code>。</p><p>当然你从上面所提供的网站中就已经能看到编码16进制的结果了:</p><p><img src="/images/1628833310473.png"> </p><p>但是对于上面的计算过程，如果没有工具，纯手工计算的话，相对来说还是比较复杂的，我们也不需要进行手动计算，在Java中已经为我们提供了编码和解码的API工具类可以让我们更快速的进行编码和解码:</p><p>编码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.net.URLEncoder.encode(<span class="hljs-string">&quot;需要被编码的内容&quot;</span>,<span class="hljs-string">&quot;字符集(UTF-8)&quot;</span>)<br></code></pre></td></tr></table></figure><p>解码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.net.URLDecoder.decode(<span class="hljs-string">&quot;需要被解码的内容&quot;</span>,<span class="hljs-string">&quot;字符集(UTF-8)&quot;</span>)<br></code></pre></td></tr></table></figure><p>接下来咱们对<code>张三</code>来进行编码和解码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata">public <span class="hljs-keyword">class</span> URLDemo &#123;<br><br>  public static void main(String[] <span class="hljs-keyword">args</span>) throws UnsupportedEncodingException &#123;<br>        String username = <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-comment">//1. URL编码</span><br>        String <span class="hljs-keyword">encode</span> = URLEncoder.<span class="hljs-keyword">encode</span>(username, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">encode</span>); <span class="hljs-comment">//打印:%E5%BC%A0%E4%B8%89</span><br><br>       <span class="hljs-comment">//2. URL解码</span><br>       <span class="hljs-comment">//String decode = URLDecoder.decode(encode, &quot;utf-8&quot;);//打印:张三</span><br>       String <span class="hljs-keyword">decode</span> = URLDecoder.<span class="hljs-keyword">decode</span>(<span class="hljs-keyword">encode</span>, <span class="hljs-string">&quot;ISO-8859-1&quot;</span>);<span class="hljs-comment">//打印:`å¼ ä¸ `</span><br>       System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">decode</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>到这，我们就可以分析出GET请求中文参数出现乱码的原因了，</p><ul><li>浏览器把中文参数按照<code>UTF-8</code>进行URL编码</li><li>Tomcat对获取到的内容进行了<code>ISO-8859-1</code>的URL解码</li><li>在控制台就会出现类上<code>å¼ ä¸</code>的乱码，最后一位是个空格</li></ul><ol start="2"><li><p>清楚了出现乱码的原因，接下来我们就需要想办法进行解决</p><p><img src="/images/1628846824194.png"></p></li></ol><p>从上图可以看住，</p><ul><li><p>在进行编码和解码的时候，不管使用的是哪个字符集，他们对应的<code>%E5%BC%A0%E4%B8%89</code>是一致的</p></li><li><p>那他们对应的二进制值也是一样的，为:</p><ul><li>&#96;&#96;&#96;<br>1110 0101 1011 1100 1010 0000 1110 0100 1011 1000 1000 1001<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>* 为所以我们可以考虑把`å¼ ä¸`转换成字节，在把字节转换成`张三`，在转换的过程中是它们的编码一致，就可以解决中文乱码问题。<br><br><span class="hljs-title">具体的实现步骤为:</span><br><br>&gt;<span class="hljs-number">1</span>.按照ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>编码获取乱码`å¼ ä¸`对应的字节数组<br>&gt;<br>&gt;<span class="hljs-number">2</span>.按照UTF-<span class="hljs-number">8</span>编码获取字节数组对应的字符串<br><br><span class="hljs-title">实现代码如下:</span><br><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>public class URLDemo {</p><p>  public static void main(String[] args) throws UnsupportedEncodingException {<br>        String username &#x3D; “张三”;<br>        &#x2F;&#x2F;1. URL编码<br>        String encode &#x3D; URLEncoder.encode(username, “utf-8”);<br>        System.out.println(encode);<br>        &#x2F;&#x2F;2. URL解码<br>        String decode &#x3D; URLDecoder.decode(encode, “ISO-8859-1”);</p><pre><code class="hljs">    System.out.println(decode); //此处打印的是对应的乱码数据    //3. 转换为字节数据,编码    byte[] bytes = decode.getBytes(&quot;ISO-8859-1&quot;);    for (byte b : bytes) &#123;        System.out.print(b + &quot; &quot;);    &#125;    //此处打印的是:-27 -68 -96 -28 -72 -119    //4. 将字节数组转为字符串，解码    String s = new String(bytes, &quot;utf-8&quot;);    System.out.println(s); //此处打印的是张三&#125;</code></pre><p>}</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>**说明**:在第<span class="hljs-number">18</span>行中打印的数据是`-<span class="hljs-number">27</span> -<span class="hljs-number">68</span> -<span class="hljs-number">96</span> -<span class="hljs-number">28</span> -<span class="hljs-number">72</span> -<span class="hljs-number">119</span>`和`张三`转换成的二进制数据`<span class="hljs-number">1110</span> <span class="hljs-number">0101</span> <span class="hljs-number">1011</span> <span class="hljs-number">1100</span> <span class="hljs-number">1010</span> <span class="hljs-number">0000</span> <span class="hljs-number">1110</span> <span class="hljs-number">0100</span> <span class="hljs-number">1011</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1001</span>`为什么不一样呢？<br><br>其实打印出来的是十进制数据，我们只需要使用计算机换算下就能得到他们的对应关系，如下图:<br><br>!<span class="hljs-literal">[]</span>(/images/<span class="hljs-number">1628849231208.</span>png) <br><br>至此对于GET请求中文乱码的解决方案，我们就已经分析完了，最后在代码中去实现下:<br><br>```java<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中文乱码问题解决方案</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">WebServlet(<span class="hljs-string">&quot;/req4&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> RequestDemo4 extends HttpServlet &#123;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 解决乱码：POST，getReader()</span><br>        <span class="hljs-comment">//request.setCharacterEncoding(&quot;UTF-8&quot;);//设置字符输入流的编码</span><br><br>        <span class="hljs-comment">//2. 获取username</span><br>        String username = request.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;解决乱码前：&quot;</span>+username);<br><br>        <span class="hljs-comment">//3. GET,获取参数的方式：getQueryString</span><br>        <span class="hljs-comment">// 乱码原因：tomcat进行URL解码，默认的字符集ISO-8859-1</span><br>       <span class="hljs-comment">/* //3.1 先对乱码数据进行编码：转为字节数组</span><br><span class="hljs-comment">        byte[] bytes = username.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class="hljs-comment">        //3.2 字节数组解码</span><br><span class="hljs-comment">        username = new String(bytes, StandardCharsets.UTF_8);*/</span><br><br>        username  = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">username</span>.<span class="hljs-params">getBytes</span>(StandardCharsets.ISO_8859_1)</span>,StandardCharsets.UTF_8);<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;解决乱码后：&quot;</span>+username);<br><br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> throws ServletException, IOException &#123;<br>        this.<span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>把<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>代码注释掉后，会发现GET请求参数乱码解决方案同时也可也把POST请求参数乱码的问题也解决了</li><li>只不过对于POST请求参数一般都会比较多，采用这种方式解决乱码起来比较麻烦，所以对于POST请求还是建议使用设置编码的方式进行。</li></ul><p>另外需要说明一点的是&#x3D;&#x3D;Tomcat8.0之后，已将GET请求乱码问题解决，设置默认的解码方式为UTF-8&#x3D;&#x3D;</p><p><strong>小结</strong></p><ol><li>中文乱码解决方案</li></ol><ul><li><p>POST请求和GET请求的参数中如果有中文，后台接收数据就会出现中文乱码问题</p><p>GET请求在Tomcat8.0以后的版本就不会出现了</p></li><li><p>POST请求解决方案是:设置输入流的编码</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-section">注意:设置的字符集要和页面保持一致</span><br></code></pre></td></tr></table></figure></li><li><p>通用方式（GET&#x2F;POST）：需要先解码，再编码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">username</span>.<span class="hljs-params">getBytes</span>(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>URL编码实现方式:</li></ol><ul><li><p>编码:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">URLEncoder.encode(<span class="hljs-built_in">str</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>解码:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">URLDecoder.<span class="hljs-built_in">decode</span>(s,<span class="hljs-string">&quot;ISO-8859-1&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-5-Request请求转发"><a href="#2-5-Request请求转发" class="headerlink" title="2.5 Request请求转发"></a>2.5 Request请求转发</h3><ol><li><p>&#x3D;&#x3D;请求转发(forward):一种在服务器内部的资源跳转方式。&#x3D;&#x3D;</p><p><img src="/images/1628851404283.png"></p></li></ol><p>(1)浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p><p>(2)资源A处理完请求后将请求发给资源B</p><p>(3)资源B处理完后将结果响应给浏览器</p><p>(4)请求从资源A到资源B的过程就叫&#x3D;&#x3D;请求转发&#x3D;&#x3D;</p><ol start="2"><li>请求转发的实现方式:</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">req.getRequestDispatcher<span class="hljs-comment">(&quot;资源B路径&quot;)</span>.forward<span class="hljs-comment">(req,resp)</span>;<br></code></pre></td></tr></table></figure><p>具体如何来使用，我们先来看下需求:</p><p><img src="/images/1628854783523.png"> </p><p>针对上述需求，具体的实现步骤为:</p><blockquote><p>1.创建一个RequestDemo5类，接收&#x2F;req5的请求，在doGet方法中打印<code>demo5</code></p><p>2.创建一个RequestDemo6类，接收&#x2F;req6的请求，在doGet方法中打印<code>demo6</code></p><p>3.在RequestDemo5的方法中使用</p><p>​req.getRequestDispatcher(“&#x2F;req6”).forward(req,resp)进行请求转发</p><p>4.启动测试</p></blockquote><p>(1)创建RequestDemo5类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求转发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;demo5...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)创建RequestDemo6类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求转发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;demo6...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(3)在RequestDemo5的doGet方法中进行请求转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求转发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;demo5...&quot;</span>);<br>        <span class="hljs-comment">//请求转发</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/req6&quot;</span>).forward(request,response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4)启动测试</p><p>访问<code>http://localhost:8080/request-demo/req5</code>,就可以在控制台看到如下内容:</p><p><img src="/images/1628855192876.png"> </p><p>说明请求已经转发到了<code>/req6</code></p><ol start="3"><li>请求转发资源间共享数据:使用Request对象</li></ol><p>此处主要解决的问题是把请求从<code>/req5</code>转发到<code>/req6</code>的时候，如何传递数据给<code>/req6</code>。</p><p>需要使用request对象提供的三个方法:</p><ul><li>存储数据到request域[范围,数据是存储在request对象]中</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name,Object o)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>根据key获取值</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">Object</span> getAttribute(<span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>);<br></code></pre></td></tr></table></figure><ul><li>根据key删除该键值对</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>;<br></code></pre></td></tr></table></figure><p>接着上个需求来:</p><p><img src="/images/1628856995417.png"> </p><blockquote><p>1.在RequestDemo5的doGet方法中转发请求之前，将数据存入request域对象中</p><p>2.在RequestDemo6的doGet方法从request域对象中获取数据，并将数据打印到控制台</p><p>3.启动访问测试</p></blockquote><p>(1)修改RequestDemo5中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;demo5...&quot;</span>);<br>        <span class="hljs-comment">//存储数据</span><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-comment">//请求转发</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/req6&quot;</span>).forward(request,response);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)修改RequestDemo6中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求转发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/req6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestDemo6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;demo6...&quot;</span>);<br>        <span class="hljs-comment">//获取数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br>        System.out.println(msg);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(3)启动测试</p><p>访问<code>http://localhost:8080/request-demo/req5</code>,就可以在控制台看到如下内容:</p><p><img src="/images/1628857213364.png"> </p><p>此时就可以实现在转发多个资源之间共享数据。</p><ol start="4"><li>请求转发的特点</li></ol><ul><li><p>浏览器地址栏路径不发生变化</p><p>虽然后台从<code>/req5</code>转发到<code>/req6</code>,但是浏览器的地址一直是<code>/req5</code>,未发生变化</p><p><img src="/images/1628857365153.png"> </p></li><li><p>只能转发到当前服务器的内部资源</p><p>不能从一个服务器通过转发访问另一台服务器</p></li><li><p>一次请求，可以在转发资源间使用request共享数据</p><p>虽然后台从<code>/req5</code>转发到<code>/req6</code>，但是这个&#x3D;&#x3D;只有一次请求&#x3D;&#x3D;</p></li></ul><h2 id="3，Response对象"><a href="#3，Response对象" class="headerlink" title="3，Response对象"></a>3，Response对象</h2><p>前面讲解完Request对象，接下来我们回到刚开始的那张图:</p><p><img src="/images/1628857632899.png"> </p><ul><li>Request:使用request对象来&#x3D;&#x3D;获取&#x3D;&#x3D;请求数据</li><li>Response:使用response对象来&#x3D;&#x3D;设置&#x3D;&#x3D;响应数据</li></ul><p>Reponse的继承体系和Request的继承体系也非常相似:</p><p><img src="/images/1628857761317.png"> </p><p> 介绍完Response的相关体系结构后，接下来对于Response我们需要学习如下内容:</p><ul><li>Response设置响应数据的功能介绍</li><li>Response完成重定向</li><li>Response响应字符数据</li><li>Response响应字节数据</li></ul><h3 id="3-1-Response设置响应数据功能介绍"><a href="#3-1-Response设置响应数据功能介绍" class="headerlink" title="3.1 Response设置响应数据功能介绍"></a>3.1 Response设置响应数据功能介绍</h3><p>HTTP响应数据总共分为三部分内容，分别是&#x3D;&#x3D;响应行、响应头、响应体&#x3D;&#x3D;，对于这三部分内容的数据，respone对象都提供了哪些方法来进行设置?</p><ol><li><p>响应行</p><p><img src="/images/1628858926498.png"></p></li></ol><p>对于响应头，比较常用的就是设置响应状态码:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> sc)</span></span>;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>响应头</p><p><img src="/images/1628859051368.png"></p></li></ol><p>设置响应头键值对：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name,<span class="hljs-type">String</span> value)</span></span>;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>响应体</p><p><img src="/images/1628859268095.png"></p></li></ol><p>对于响应体，是通过字符、字节输出流的方式往浏览器写，</p><p>获取字符输出流:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">PrintWriter <span class="hljs-title">getWriter</span>()</span>;<br></code></pre></td></tr></table></figure><p>获取字节输出流</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">ServletOutputStream <span class="hljs-title">getOutputStream</span>()</span>;<br></code></pre></td></tr></table></figure><p>介绍完这些方法后，后面我们会通过案例把这些方法都用一用，首先先来完成下重定向的功能开发。</p><h3 id="3-2-Respones请求重定向"><a href="#3-2-Respones请求重定向" class="headerlink" title="3.2 Respones请求重定向"></a>3.2 Respones请求重定向</h3><ol><li><p>&#x3D;&#x3D;Response重定向(redirect):一种资源跳转方式。&#x3D;&#x3D;</p><p><img src="/images/1628859860279.png"></p></li></ol><p>(1)浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p><p>(2)资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径</p><p>(3)浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B</p><p>(4)资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫&#x3D;&#x3D;重定向&#x3D;&#x3D;</p><ol start="2"><li>重定向的实现方式:</li></ol><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">resp.<span class="hljs-built_in">set</span>Status(<span class="hljs-number">302</span>);<br>resp.<span class="hljs-built_in">set</span>Header(<span class="hljs-string">&quot;location&quot;</span>,<span class="hljs-string">&quot;资源B的访问路径&quot;</span>);<br></code></pre></td></tr></table></figure><p>具体如何来使用，我们先来看下需求:</p><p><img src="/images/1628861030429.png"> </p><p>针对上述需求，具体的实现步骤为:</p><blockquote><p>1.创建一个ResponseDemo1类，接收&#x2F;resp1的请求，在doGet方法中打印<code>resp1....</code></p><p>2.创建一个ResponseDemo2类，接收&#x2F;resp2的请求，在doGet方法中打印<code>resp2....</code></p><p>3.在ResponseDemo1的方法中使用</p><p>​response.setStatus(302);</p><p>​response.setHeader(“Location”,”&#x2F;request-demo&#x2F;resp2”) 来给前端响应结果数据</p><p>4.启动测试</p></blockquote><p>(1)创建ResponseDemo1类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;resp1....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)创建ResponseDemo2类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;resp2....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(3)在ResponseDemo1的doGet方法中给前端响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;resp1....&quot;</span>);<br>        <span class="hljs-comment">//重定向</span><br>        <span class="hljs-comment">//1.设置响应状态码 302</span><br>        response.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//2. 设置响应头 Location</span><br>        response.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/request-demo/resp2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4)启动测试</p><p>访问<code>http://localhost:8080/request-demo/resp1</code>,就可以在控制台看到如下内容:</p><p><img src="/images/1628861404699.png"> </p><p>说明<code>/resp1</code>和<code>/resp2</code>都被访问到了。到这重定向就已经完成了。</p><p>虽然功能已经实现，但是从设置重定向的两行代码来看，会发现除了重定向的地址不一样，其他的内容都是一模一样，所以request对象给我们提供了简化的编写方式为:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">resposne.send<span class="hljs-constructor">Redirect(<span class="hljs-string">&quot;/request-demo/resp2&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>所以第3步中的代码就可以简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;resp1....&quot;</span>);<br>        <span class="hljs-comment">//重定向</span><br>        resposne.sendRedirect(<span class="hljs-string">&quot;/request-demo/resp2&quot;</span>)；<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>重定向的特点</li></ol><ul><li><p>浏览器地址栏路径发送变化</p><p>当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化</p><p><img src="/images/1628861893130.png"> </p></li><li><p>可以重定向到任何位置的资源(服务内容、外部均可)</p><p>因为第一次响应结果中包含了浏览器下次要跳转的路径，所以这个路径是可以任意位置资源。</p></li><li><p>两次请求，不能在多个资源使用request共享数据</p><p>因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据</p></li></ul><p>介绍完&#x3D;&#x3D;请求重定向&#x3D;&#x3D;和&#x3D;&#x3D;请求转发&#x3D;&#x3D;以后，接下来需要把这两个放在一块对比下:</p><p><img src="/images/1628862170296.png"> </p><p>以后到底用哪个，还是需要根据具体的业务来决定。</p><h3 id="3-3-路径问题"><a href="#3-3-路径问题" class="headerlink" title="3.3 路径问题"></a>3.3 路径问题</h3><ol><li><p>问题1：转发的时候路径上没有加<code>/request-demo</code>而重定向加了，那么到底什么时候需要加，什么时候不需要加呢?</p><p><img src="/images/1628862652700.png"></p></li></ol><p>其实判断的依据很简单，只需要记住下面的规则即可:</p><ul><li>浏览器使用:需要加虚拟目录(项目访问路径)</li><li>服务端使用:不需要加虚拟目录</li></ul><p>对于转发来说，因为是在服务端进行的，所以不需要加虚拟目录</p><p>对于重定向来说，路径最终是由浏览器来发送请求，就需要添加虚拟目录。</p><p>掌握了这个规则，接下来就通过一些练习来强化下知识的学习:</p><ul><li><code>&lt;a href=&#39;路劲&#39;&gt;</code></li><li><code>&lt;form action=&#39;路径&#39;&gt;</code></li><li>req.getRequestDispatcher(“路径”)</li><li>resp.sendRedirect(“路径”)</li></ul><p>答案:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.超链接，从浏览器发送，需要加<br>2.表单，从浏览器发送，需要加<br>3.转发，是从服务器内部跳转，不需要加<br>4.重定向，是由浏览器进行跳转，需要加。<br></code></pre></td></tr></table></figure><ol start="2"><li><p>问题2：在重定向的代码中，<code>/request-demo</code>是固定编码的，如果后期通过Tomcat插件配置了项目的访问路径，那么所有需要重定向的地方都需要重新修改，该如何优化?</p><p><img src="/images/1628863270545.png"></p></li></ol><p>答案也比较简单，我们可以在代码中动态去获取项目访问的虚拟目录，具体如何获取，我们可以借助前面咱们所学习的request对象中的getContextPath()方法，修改后的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;resp1....&quot;</span>);<br><br>        <span class="hljs-comment">//简化方式完成重定向</span><br>        <span class="hljs-comment">//动态获取虚拟目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> request.getContextPath();<br>        response.sendRedirect(contextPath+<span class="hljs-string">&quot;/resp2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动访问测试，功能依然能够实现，此时就可以动态获取项目访问的虚拟路径，从而降低代码的耦合度。</p><h3 id="3-4-Response响应字符数据"><a href="#3-4-Response响应字符数据" class="headerlink" title="3.4 Response响应字符数据"></a>3.4 Response响应字符数据</h3><p>要想将字符数据写回到浏览器，我们需要两个步骤:</p><ul><li><p>通过Response对象获取字符输出流： PrintWriter writer &#x3D; resp.getWriter();</p></li><li><p>通过字符输出流写数据: writer.write(“aaa”);</p></li></ul><p>接下来，我们实现通过些案例把响应字符数据给实际应用下:</p><ol><li>返回一个简单的字符串<code>aaa</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应字符数据：设置字符数据的响应体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/resp3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//1. 获取字符输出流</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br> writer.write(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/1628863905362.png"> </p><ol start="2"><li>返回一串html字符串，并且能被浏览器解析</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">PrintWriter writer = response.get<span class="hljs-constructor">Writer()</span>;<br><span class="hljs-comment">//content-type，告诉浏览器返回的数据类型是HTML类型数据，这样浏览器才会解析HTML标签</span><br>response.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html&quot;</span>)</span>;<br>writer.write(<span class="hljs-string">&quot;&lt;h1&gt;aaa&lt;/h1&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/images/1628864140820.png"> </p><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。</p><ol start="3"><li>返回一个中文的字符串<code>你好</code>，需要注意设置响应数据的编码为<code>utf-8</code></li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//设置响应的数据格式及数据的编码<br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>)<span class="hljs-comment">;</span><br>writer.write(<span class="hljs-string">&quot;你好&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/images/1628864390263.png"> </p><h3 id="3-3-Response响应字节数据"><a href="#3-3-Response响应字节数据" class="headerlink" title="3.3 Response响应字节数据"></a>3.3 Response响应字节数据</h3><p>要想将字节数据写回到浏览器，我们需要两个步骤:</p><ul><li><p>通过Response对象获取字节输出流：ServletOutputStream outputStream &#x3D; resp.getOutputStream();</p></li><li><p>通过字节输出流写数据: outputStream.write(字节数据);</p></li></ul><p>接下来，我们实现通过些案例把响应字符数据给实际应用下:</p><ol><li>返回一个图片文件到浏览器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应字节数据：设置字节数据的响应体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/resp4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 读取文件</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://a.jpg&quot;</span>);<br>        <span class="hljs-comment">//2. 获取response字节输出流</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-comment">//3. 完成流的copy</span><br>        <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = fis.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>            os.write(buff,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        fis.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/1628864883564.png"> </p><p>上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发，具体的步骤是:</p><p>(1)pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2)调用工具类方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>fis:输入流<br><span class="hljs-regexp">//</span>os:输出流<br>IOUtils.copy(fis,os);<br></code></pre></td></tr></table></figure><p>优化后的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应字节数据：设置字节数据的响应体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/resp4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 读取文件</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://a.jpg&quot;</span>);<br>        <span class="hljs-comment">//2. 获取response字节输出流</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-comment">//3. 完成流的copy</span><br>      IOUtils.copy(fis,os);<br>        fis.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4，用户注册登录案例"><a href="#4，用户注册登录案例" class="headerlink" title="4，用户注册登录案例"></a>4，用户注册登录案例</h2><p>接下来我们通过两个比较常见的案例，一个是&#x3D;&#x3D;注册&#x3D;&#x3D;，一个是&#x3D;&#x3D;登录&#x3D;&#x3D;来对今天学习的内容进行一个实战演练，首先来实现用户登录。</p><h3 id="4-1-用户登录"><a href="#4-1-用户登录" class="headerlink" title="4.1 用户登录"></a>4.1 用户登录</h3><h4 id="4-1-1-需求分析"><a href="#4-1-1-需求分析" class="headerlink" title="4.1.1 需求分析"></a>4.1.1 需求分析</h4><p><img src="/images/1628865728305.png"> </p><ol><li>用户在登录页面输入用户名和密码，提交请求给LoginServlet</li><li>在LoginServlet中接收请求和数据[用户名和密码]</li><li>在LoginServlt中通过Mybatis实现调用UserMapper来根据用户名和密码查询数据库表</li><li>将查询的结果封装到User对象中进行返回</li><li>在LoginServlet中判断返回的User对象是否为null</li><li>如果为nul，说明根据用户名和密码没有查询到用户，则登录失败，返回”登录失败”数据给前端</li><li>如果不为null,则说明用户存在并且密码正确，则登录成功，返回”登录成功”数据给前端</li></ol><h4 id="4-1-2-环境准备"><a href="#4-1-2-环境准备" class="headerlink" title="4.1.2 环境准备"></a>4.1.2 环境准备</h4><ol><li>复制资料中的静态页面到项目的webapp目录下</li></ol><p>参考<code>资料\1. 登陆注册案例\1. 静态页面</code>,拷贝完效果如下:</p><p><img src="/images/1628866248169.png"> </p><ol start="2"><li>创建db1数据库，创建tb_user表，创建User实体类</li></ol><p>2.1 将<code>资料\1. 登陆注册案例\2. MyBatis环境\tb_user.sql</code>中的sql语句执行下:</p><p><img src="/images/1628866403891.png"> </p><p> 2.2 将<code>资料\1. 登陆注册案例\2. MyBatis环境\User.java</code>拷贝到com.itheima.pojo</p><p><img src="/images/1628866560738.png"> </p><ol start="3"><li>在项目的pom.xml导入Mybatis和Mysql驱动坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建mybatis-config.xml核心配置文件，UserMapper.xml映射文件,UserMapper接口</li></ol><p>4.1  将<code>资料\1. 登陆注册案例\2. MyBatis环境\mybatis-config.xml</code>拷贝到resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--起别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                    useSSL:关闭SSL安全连接 性能更高</span><br><span class="hljs-comment">                    useServerPrepStmts:开启预编译功能</span><br><span class="hljs-comment">                    &amp;amp; 等同于 &amp; ,xml配置文件中不能直接写 &amp;符号</span><br><span class="hljs-comment">                --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--扫描mapper--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.2 在com.itheima.mapper包下创建UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.3 将<code>资料\1. 登陆注册案例\2. MyBatis环境\UserMapper.xml</code>拷贝到resources目录下</p><p>&#x3D;&#x3D;注意：在resources下创建UserMapper.xml的目录时，要使用&#x2F;分割&#x3D;&#x3D;</p><p><img src="/images/1628867237329.png"> </p><p>至此我们所需要的环境就都已经准备好了，具体该如何实现?</p><h4 id="4-1-3-代码实现"><a href="#4-1-3-代码实现" class="headerlink" title="4.1.3 代码实现"></a>4.1.3 代码实现</h4><ol><li>在UserMapper接口中提供一个根据用户名和密码查询用户对象的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名和密码查询用户对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span><br>    User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;password&quot;)</span>  String password)</span>;<br></code></pre></td></tr></table></figure><p><strong>说明</strong></p><p>@Param注解的作用:用于传递参数,是方法的参数可以与SQL中的字段名相对应。</p><ol start="2"><li>修改loign.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/login.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginDiv&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/request-demo/loginServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginMsg&quot;</span>&gt;</span>LOGIN IN<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;subDiv&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login up&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;register.html&quot;</span>&gt;</span>没有账号？点击注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>编写LoginServlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/loginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 接收用户名和密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-comment">//2. 调用MyBatis完成查询</span><br>        <span class="hljs-comment">//2.1 获取SqlSessionFactory对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-comment">//2.2 获取SqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//2.3 获取Mapper</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//2.4 调用方法</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.select(username, password);<br>        <span class="hljs-comment">//2.5 释放资源</span><br>        sqlSession.close();<br><br><br>        <span class="hljs-comment">//获取字符输出流，并设置content type</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-comment">//3. 判断user释放为null</span><br>        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 登陆成功</span><br>            writer.write(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 登陆失败</span><br>            writer.write(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>启动服务器测试</li></ol><p>4.1 如果用户名和密码输入错误，则</p><p><img src="/images/1628867761245.png"> </p><p>4.2 如果用户名和密码输入正确，则</p><p><img src="/images/1628867801708.png"> </p><p>至此用户的登录功能就已经完成了~</p><h3 id="4-2-用户注册"><a href="#4-2-用户注册" class="headerlink" title="4.2 用户注册"></a>4.2 用户注册</h3><h4 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1 需求分析"></a>4.2.1 需求分析</h4><p><img src="/images/1628867904783.png"> </p><ol><li>用户在注册页面输入用户名和密码，提交请求给RegisterServlet</li><li>在RegisterServlet中接收请求和数据[用户名和密码]</li><li>在RegisterServlet中通过Mybatis实现调用UserMapper来根据用户名查询数据库表</li><li>将查询的结果封装到User对象中进行返回</li><li>在RegisterServlet中判断返回的User对象是否为null</li><li>如果为nul，说明根据用户名可用，则调用UserMapper来实现添加用户</li><li>如果不为null,则说明用户不可以，返回”用户名已存在”数据给前端</li></ol><h4 id="4-2-2-代码编写"><a href="#4-2-2-代码编写" class="headerlink" title="4.2.2 代码编写"></a>4.2.2 代码编写</h4><ol><li>编写UserMapper提供根据用户名查询用户数据方法和添加用户方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据用户名查询用户对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125;&quot;)</span><br>User <span class="hljs-title function_">selectByUsername</span><span class="hljs-params">(String username)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 添加用户</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Insert(&quot;insert into tb_user values(null,#&#123;username&#125;,#&#123;password&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改register.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/register.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;login.html&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/request-demo/registerServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建RegisterServlet类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/registerServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1. 接收用户数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-comment">//封装用户对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(username);<br>        user.setPassword(password);<br><br>        <span class="hljs-comment">//2. 调用mapper 根据用户名查询用户对象</span><br>        <span class="hljs-comment">//2.1 获取SqlSessionFactory对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-comment">//2.2 获取SqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//2.3 获取Mapper</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-comment">//2.4 调用方法</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(username);<br><br>        <span class="hljs-comment">//3. 判断用户对象释放为null</span><br>        <span class="hljs-keyword">if</span>( u == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 用户名不存在，添加用户</span><br>            userMapper.add(user);<br><br>            <span class="hljs-comment">// 提交事务</span><br>            sqlSession.commit();<br>            <span class="hljs-comment">// 释放资源</span><br>            sqlSession.close();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 用户名存在，给出提示信息</span><br>            response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>            response.getWriter().write(<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>启动服务器进行测试</li></ol><p>4.1 如果测试成功，则在数据库中就能查看到新注册的数据</p><p>4.2 如果用户已经存在，则在页面上展示 <code>用户名已存在</code> 的提示信息</p><h3 id="4-3-SqlSessionFactory工具类抽取"><a href="#4-3-SqlSessionFactory工具类抽取" class="headerlink" title="4.3 SqlSessionFactory工具类抽取"></a>4.3 SqlSessionFactory工具类抽取</h3><p>上面两个功能已经实现，但是在写Servlet的时候，因为需要使用Mybatis来完成数据库的操作，所以对于Mybatis的基础操作就出现了些重复代码，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <br><span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br></code></pre></td></tr></table></figure><p>有了这些重复代码就会造成一些问题:</p><ul><li>重复代码不利于后期的维护</li><li>SqlSessionFactory工厂类进行重复创建<ul><li>就相当于每次买手机都需要重新创建一个手机生产工厂来给你制造一个手机一样，资源消耗非常大但性能却非常低。所以这么做是不允许的。</li></ul></li></ul><p>那如何来优化呢？</p><ul><li>代码重复可以抽取工具类</li><li>对指定代码只需要执行一次可以使用静态代码块</li></ul><p>有了这两个方向后，代码具体该如何编写?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionFactoryUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//静态代码块会随着类的加载而自动执行，且只执行一次</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getSqlSessionFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具类抽取以后，以后在对Mybatis的SqlSession进行操作的时候，就可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span>SqlSessionFactoryUtils.getSqlSessionFactory();<br></code></pre></td></tr></table></figure><p>这样就可以很好的解决上面所说的代码重复和重复创建工厂导致性能低的问题了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>maven</title>
    <link href="/2022/07/15/Maven/"/>
    <url>/2022/07/15/Maven/</url>
    
    <content type="html"><![CDATA[<h2 id="1，Maven"><a href="#1，Maven" class="headerlink" title="1，Maven"></a>1，Maven</h2><p>Maven是专门用于管理和构建Java项目的工具，它的主要功能有：</p><ul><li><p>提供了一套标准化的项目结构</p></li><li><p>提供了一套标准化的构建流程（编译，测试，打包，发布……）</p></li><li><p>提供了一套依赖管理机制</p></li></ul><p><strong>标准化的项目结构：</strong></p><p>项目结构我们都知道，每一个开发工具（IDE）都有自己不同的项目结构，它们互相之间不通用。我再eclipse中创建的目录，无法在idea中进行使用，这就造成了很大的不方便，如下图:前两个是以后开发经常使用的开发工具</p><p><img src="/images/image-20210726153521381.png"></p><p>而Maven提供了一套标准化的项目结构，所有的IDE使用Maven构建的项目完全一样，所以IDE创建的Maven项目可以通用。如下图右边就是Maven构建的项目结构。</p><p><img src="/images/image-20210726153815028.png"></p><p><strong>标准化的构建流程：</strong></p><p><img src="/images/image-20210726154144488.png"></p><p>如上图所示我们开发了一套系统，代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p><p><strong>依赖管理：</strong></p><p>依赖管理其实就是管理你项目所依赖的第三方资源（jar包、插件）。如之前我们项目中需要使用JDBC和Druid的话，就需要去网上下载对应的依赖包（当前之前是老师已经下载好提供给大家了），复制到项目中，还要将jar包加入工作环境这一系列的操作。如下图所示</p><p><img src="/images/image-20210726154753631.png"></p><p>而Maven使用标准的 &#x3D;&#x3D;坐标&#x3D;&#x3D; 配置来管理各种依赖，只需要简单的配置就可以完成依赖管理。</p><p><img src="/images/image-20210726154922337.png"></p><p>如上图右边所示就是mysql驱动包的坐标，在项目中只需要写这段配置，其他都不需要我们担心，Maven都帮我们进行操作了。</p><p>市面上有很多构建工具，而Maven依旧还是主流构建工具，如下图是常用构建工具的使用占比</p><p><img src="/images/image-20210726155212733.png"></p><h3 id="1-1-Maven简介"><a href="#1-1-Maven简介" class="headerlink" title="1.1  Maven简介"></a>1.1  Maven简介</h3><blockquote><p>&#x3D;&#x3D;Apache Maven&#x3D;&#x3D; 是一个项目管理和构建&#x3D;&#x3D;工具&#x3D;&#x3D;，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p><p>官网 ：<a href="http://maven.apache.org/">http://maven.apache.org/</a> </p></blockquote><p>通过上面的描述大家只需要知道Maven是一个工具即可。Apache 是一个开源组织，将来我们会学习很多Apache提供的项目。</p><h4 id="1-1-1-Maven模型"><a href="#1-1-1-Maven模型" class="headerlink" title="1.1.1  Maven模型"></a>1.1.1  Maven模型</h4><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>插件(Plugin)</li></ul><p><img src="/images/image-20210726155759621.png"></p><p>如上图所示就是Maven的模型，而我们先看紫色框框起来的部分，他就是用来完成 <code>标准化构建流程</code> 。如我们需要编译，Maven提供了一个编译插件供我们使用，我们需要打包，Maven就提供了一个打包插件提供我们使用等。</p><p><img src="/images/image-20210726160928515.png"></p><p>上图中紫色框起来的部分，项目对象模型就是将我们自己抽象成一个对象模型，有自己专属的坐标，如下图所示是一个Maven项目：</p><p><img src="/images/image-20210726161340796.png"></p><p>依赖管理模型则是使用坐标来描述当前项目依赖哪儿些第三方jar包，如下图所示</p><p><img src="/images/image-20210726161616034.png"></p><p>上述Maven模型图中还有一部分是仓库。如何理解仓库呢？</p><h4 id="1-1-2-仓库"><a href="#1-1-2-仓库" class="headerlink" title="1.1.2  仓库"></a>1.1.2  仓库</h4><p>大家想想这样的场景，我们创建Maven项目，在项目中使用坐标来指定项目的依赖，那么依赖的jar包到底存储在什么地方呢？其实依赖jar包是存储在我们的本地仓库中。而项目运行时从本地仓库中拿需要的依赖jar包。</p><p><strong>仓库分类：</strong></p><ul><li><p>本地仓库：自己计算机上的一个目录</p></li><li><p>中央仓库：由Maven团队维护的全球唯一的仓库</p><ul><li>地址： <a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li></ul></li><li><p>远程仓库(私服)：一般由公司团队搭建的私有仓库</p><p>今天我们只学习远程仓库的使用，并不会搭建。</p></li></ul><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包：</p><ul><li><p>如果有，则在项目直接引用;</p></li><li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库。</p><p><img src="/images/image-20210726162605394.png"></p></li></ul><p>如果还可以搭建远程仓库，将来jar包的查找顺序则变为：</p><blockquote><p>本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p></blockquote><p><img src="/images/image-20210726162815045.png"></p><h3 id="1-2-Maven安装配置"><a href="#1-2-Maven安装配置" class="headerlink" title="1.2  Maven安装配置"></a>1.2  Maven安装配置</h3><ul><li><p>解压 apache-maven-3.6.1.rar 既安装完成</p><p><img src="/images/image-20210726163219682.png"></p><blockquote><p>建议解压缩到没有中文、特殊字符的路径下。如课程中解压缩到 <code>D:\software</code> 下。</p></blockquote><p>解压缩后的目录结构如下：</p><p><img src="/images/image-20210726163518885.png"></p><ul><li>bin目录 ： 存放的是可执行命令。mvn 命令重点关注。</li><li>conf目录 ：存放Maven的配置文件。<code>settings.xml</code> 配置文件后期需要修改。</li><li>lib目录 ：存放Maven依赖的jar包。Maven也是使用java开发的，所以它也依赖其他的jar包。</li></ul></li><li><p>配置环境变量 MAVEN_HOME 为安装路径的bin目录</p><p><code>此电脑</code> 右键  –&gt;  <code>高级系统设置</code>  –&gt;  <code>高级</code>  –&gt;  <code>环境变量</code></p><p>在系统变量处新建一个变量 <code>MAVEN_HOME</code></p><p><img src="/images/image-20210726164058589.png"></p><p>在 <code>Path</code> 中进行配置</p><p><img src="/images/image-20210726164146832.png"></p><p>打开命令提示符进行验证，出现如图所示表示安装成功</p><p><img src="/images/image-20210726164306480.png"></p></li><li><p>配置本地仓库</p><p>修改 conf&#x2F;settings.xml 中的 <localRepository> 为一个指定目录作为本地仓库，用来存储jar包。</p><p><img src="/images/image-20210726164348048.png"></p></li><li><p>配置阿里云私服</p><p>中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p><p>修改 conf&#x2F;settings.xml 中的 <mirrors>标签，为其添加如下子标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>          <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-Maven基本使用"><a href="#1-3-Maven基本使用" class="headerlink" title="1.3  Maven基本使用"></a>1.3  Maven基本使用</h3><h4 id="1-3-1-Maven-常用命令"><a href="#1-3-1-Maven-常用命令" class="headerlink" title="1.3.1  Maven 常用命令"></a>1.3.1  Maven 常用命令</h4><blockquote><ul><li><p>compile ：编译</p></li><li><p>clean：清理</p></li><li><p>test：测试</p></li><li><p>package：打包</p></li><li><p>install：安装</p></li></ul></blockquote><p><strong>命令演示：</strong></p><p>在 <code>资料\代码\maven-project</code> 提供了一个使用Maven构建的项目，项目结构如下：</p><p><img src="/images/image-20210726170404545.png"></p><p>而我们使用上面命令需要在磁盘上进入到项目的 <code>pom.xml</code> 目录下，打开命令提示符</p><p><img src="/images/image-20210726170549907.png"></p><p><strong>编译命令演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">compile ：编译<br></code></pre></td></tr></table></figure><p>执行上述命令可以看到：</p><ul><li><p>从阿里云下载编译需要的插件的jar包，在本地仓库也能看到下载好的插件</p></li><li><p>在项目下会生成一个 <code>target</code> 目录</p><p><img src="/images/image-20210726171047324.png"></p></li></ul><p>同时在项目下会出现一个 <code>target</code> 目录，编译后的字节码文件就放在该目录下</p><p><img src="/images/image-20210726171346824.png"></p><p><strong>清理命令演示：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> clean<br></code></pre></td></tr></table></figure><p>执行上述命令可以看到</p><ul><li><p>从阿里云下载清理需要的插件jar包</p></li><li><p>删除项目下的 <code>target</code> 目录</p><p><img src="/images/image-20210726171558786.png"></p></li></ul><p><strong>打包命令演示：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p>执行上述命令可以看到：</p><ul><li><p>从阿里云下载打包需要的插件jar包</p></li><li><p>在项目的 <code>terget</code> 目录下有一个jar包（将当前项目打成的jar包）</p><p><img src="/images/image-20210726171747125.png"></p></li></ul><p><strong>测试命令演示：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> test  <br></code></pre></td></tr></table></figure><p>该命令会执行所有的测试代码。执行上述命令效果如下</p><p><img src="/images/image-20210726172343933.png"></p><p><strong>安装命令演示：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> install<br></code></pre></td></tr></table></figure><p>该命令会将当前项目打成jar包，并安装到本地仓库。执行完上述命令后到本地仓库查看结果如下：</p><p><img src="/images/image-20210726172709112.png"></p><h4 id="1-3-2-Maven-生命周期"><a href="#1-3-2-Maven-生命周期" class="headerlink" title="1.3.2  Maven 生命周期"></a>1.3.2  Maven 生命周期</h4><p>Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件</p><p>Maven 对项目构建的生命周期划分为3套：</p><ul><li>clean ：清理工作。</li><li>default ：核心工作，例如编译，测试，打包，安装等。</li><li>site ： 产生报告，发布站点等。这套声明周期一般不会使用。</li></ul><p>同一套生命周期内，执行后边的命令，前面的所有命令会自动执行。例如默认（default）生命周期如下：</p><p><img src="/images/image-20210726173153576.png"></p><p>当我们执行 <code>install</code>（安装）命令时，它会先执行 <code>compile</code>命令，再执行 <code>test </code> 命令，再执行 <code>package</code> 命令，最后执行 <code>install</code> 命令。</p><p>当我们执行 <code>package</code> （打包）命令时，它会先执行 <code>compile</code> 命令，再执行 <code>test</code> 命令，最后执行 <code>package</code> 命令。</p><p>默认的生命周期也有对应的很多命令，其他的一般都不会使用，我们只关注常用的：</p><p><img src="/images/image-20210726173619353.png"></p><h3 id="1-4-IDEA使用Maven"><a href="#1-4-IDEA使用Maven" class="headerlink" title="1.4  IDEA使用Maven"></a>1.4  IDEA使用Maven</h3><p>以后开发中我们肯定会在高级开发工具中使用Maven管理项目，而我们常用的高级开发工具是IDEA，所以接下来我们会讲解Maven在IDEA中的使用。</p><h4 id="1-4-1-IDEA配置Maven环境"><a href="#1-4-1-IDEA配置Maven环境" class="headerlink" title="1.4.1  IDEA配置Maven环境"></a>1.4.1  IDEA配置Maven环境</h4><p>我们需要先在IDEA中配置Maven环境：</p><ul><li><p>选择 IDEA中 File –&gt; Settings</p><p><img src="/images/image-20210726174202898.png"></p></li><li><p>搜索 maven </p><p><img src="/images/image-20210726174229396.png"></p></li><li><p>设置 IDEA 使用本地安装的 Maven，并修改配置文件路径</p><p><img src="/images/image-20210726174248050.png"></p></li></ul><h4 id="1-4-2-Maven-坐标详解"><a href="#1-4-2-Maven-坐标详解" class="headerlink" title="1.4.2  Maven 坐标详解"></a>1.4.2  Maven 坐标详解</h4><p><strong>什么是坐标？</strong></p><ul><li>Maven 中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D;</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p><strong>Maven 坐标主要组成</strong></p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><p>如下图就是使用坐标表示一个项目：</p><p><img src="/images/image-20210726174718176.png"></p><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul></blockquote><h4 id="1-4-3-IDEA-创建-Maven项目"><a href="#1-4-3-IDEA-创建-Maven项目" class="headerlink" title="1.4.3  IDEA 创建 Maven项目"></a>1.4.3  IDEA 创建 Maven项目</h4><ul><li><p>创建模块，选择Maven，点击Next</p><p><img src="/images/image-20210726175049876.png"></p></li><li><p>填写模块名称，坐标信息，点击finish，创建完成</p><p><img src="/images/image-20210726175109822.png"></p><p>创建好的项目目录结构如下：</p><p><img src="/images/image-20210726175244826.png"></p></li><li><p>编写 HelloWorld，并运行</p></li></ul><h4 id="1-4-4-IDEA-导入-Maven项目"><a href="#1-4-4-IDEA-导入-Maven项目" class="headerlink" title="1.4.4  IDEA 导入 Maven项目"></a>1.4.4  IDEA 导入 Maven项目</h4><p>大家在学习时可能需要看老师的代码，当然也就需要将老师的代码导入到自己的IDEA中。我们可以通过以下步骤进行项目的导入：</p><ul><li><p>选择右侧Maven面板，点击 + 号</p><p><img src="/images/image-20210726182702336.png"></p></li><li><p>选中对应项目的pom.xml文件，双击即可</p><p><img src="/images/image-20210726182648891.png"></p></li><li><p>如果没有Maven面板，选择</p><p>View –&gt; Appearance –&gt; Tool Window Bars</p><p><img src="/images/image-20210726182634466.png"></p></li></ul><p>可以通过下图所示进行命令的操作：</p><p><img src="/images/image-20210726182902961.png"></p><p><strong>配置 Maven-Helper 插件</strong> </p><ul><li><p>选择 IDEA中 File –&gt; Settings</p><p><img src="/images/image-20210726192212026.png"></p></li><li><p>选择 Plugins</p><p><img src="/images/image-20210726192224914.png"></p></li><li><p>搜索 Maven，选择第一个 Maven Helper，点击Install安装，弹出面板中点击Accept</p><p><img src="/images/image-20210726192244567.png"></p></li><li><p>重启 IDEA</p></li></ul><p>安装完该插件后可以通过 选中项目右键进行相关命令操作，如下图所示：</p><p><img src="/images/image-20210726192430371.png"></p><h3 id="1-5-依赖管理"><a href="#1-5-依赖管理" class="headerlink" title="1.5  依赖管理"></a>1.5  依赖管理</h3><h4 id="1-5-1-使用坐标引入jar包"><a href="#1-5-1-使用坐标引入jar包" class="headerlink" title="1.5.1  使用坐标引入jar包"></a>1.5.1  使用坐标引入jar包</h4><p><strong>使用坐标引入jar包的步骤：</strong></p><ul><li><p>在项目的 pom.xml 中编写 <dependencies> 标签</p></li><li><p>在 <dependencies> 标签中 使用 <dependency> 引入坐标</p></li><li><p>定义坐标的 groupId，artifactId，version</p><p><img src="/images/image-20210726193105765.png"></p></li><li><p>点击刷新按钮，使坐标生效</p><p><img src="/images/image-20210726193121384.png"></p></li></ul><blockquote><p> 注意：</p><ul><li>具体的坐标我们可以到如下网站进行搜索</li><li><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li></ul></blockquote><p><strong>快捷方式导入jar包的坐标：</strong></p><p>每次需要引入jar包，都去对应的网站进行搜索是比较麻烦的，接下来给大家介绍一种快捷引入坐标的方式</p><ul><li><p>在 pom.xml 中 按 alt + insert，选择 Dependency</p><p><img src="/images/image-20210726193603724.png"></p></li><li><p>在弹出的面板中搜索对应坐标，然后双击选中对应坐标</p><p><img src="/images/image-20210726193625229.png"></p></li><li><p>点击刷新按钮，使坐标生效</p><p><img src="/images/image-20210726193121384.png"></p></li></ul><p><strong>自动导入设置：</strong></p><p>上面每次操作都需要点击刷新按钮，让引入的坐标生效。当然我们也可以通过设置让其自动完成</p><ul><li><p>选择 IDEA中 File –&gt; Settings</p><p><img src="/images/image-20210726193854438.png"></p></li><li><p>在弹出的面板中找到 Build Tools</p><p><img src="/images/image-20210726193909276.png"></p></li><li><p>选择 Any changes，点击 ok 即可生效</p></li></ul><h4 id="1-5-2-依赖范围"><a href="#1-5-2-依赖范围" class="headerlink" title="1.5.2  依赖范围"></a>1.5.2  依赖范围</h4><p>通过设置坐标的依赖范围(scope)，可以设置 对应jar包的作用范围：编译环境、测试环境、运行环境。</p><p>如下图所示给 <code>junit</code> 依赖通过 <code>scope</code> 标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><p><img src="/images/image-20210726194703845.png"></p><p>那么 <code>scope</code> 都可以有哪些取值呢？</p><table><thead><tr><th><strong>依赖范围</strong></th><th>编译classpath</th><th>测试classpath</th><th>运行classpath</th><th>例子</th></tr></thead><tbody><tr><td><strong>compile</strong></td><td>Y</td><td>Y</td><td>Y</td><td>logback</td></tr><tr><td><strong>test</strong></td><td>-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td><strong>provided</strong></td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td><strong>runtime</strong></td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr><tr><td><strong>system</strong></td><td>Y</td><td>Y</td><td>-</td><td>存储在本地的jar包</td></tr></tbody></table><ul><li>compile ：作用于编译环境、测试环境、运行环境。</li><li>test ： 作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值</li><li>provided ：作用于编译环境、测试环境。我们后面会学习 <code>servlet-api</code> ，在使用它时，必须将 <code>scope</code> 设置为该值，不然运行时就会报错</li><li>runtime  ： 作用于测试环境、运行环境。jdbc驱动一般将 <code>scope</code> 设置为该值，当然不设置也没有任何问题</li></ul><blockquote><p>注意：</p><ul><li>如果引入坐标不指定 <code>scope</code> 标签时，默认就是 compile  值。以后大部分jar包都是使用默认值。</li></ul></blockquote><h2 id="2，Mybatis"><a href="#2，Mybatis" class="headerlink" title="2，Mybatis"></a>2，Mybatis</h2><h3 id="2-1-Mybatis概述"><a href="#2-1-Mybatis概述" class="headerlink" title="2.1  Mybatis概述"></a>2.1  Mybatis概述</h3><h4 id="2-1-1-Mybatis概念"><a href="#2-1-1-Mybatis概念" class="headerlink" title="2.1.1  Mybatis概念"></a>2.1.1  Mybatis概念</h4><blockquote><ul><li><p>MyBatis 是一款优秀的&#x3D;&#x3D;持久层框架&#x3D;&#x3D;，用于简化 JDBC 开发</p></li><li><p>MyBatis 本是 Apache 的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul></blockquote><p><strong>持久层：</strong></p><ul><li><p>负责将数据到保存到数据库的那一层代码。</p><p>以后开发我们会将操作数据库的Java代码作为持久层。而Mybatis就是对jdbc代码进行了封装。</p></li><li><p>JavaEE三层架构：表现层、业务层、持久层</p><p>三层架构在后期会给大家进行讲解，今天先简单的了解下即可。</p></li></ul><p><strong>框架：</strong></p><ul><li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li></ul><p>举例给大家简单的解释一下什么是半成品软件。大家小时候应该在公园见过给石膏娃娃涂鸦</p><p><img src="/images/image-20210726202410311.png"></p><p>如下图所示有一个石膏娃娃，这个就是一个半成品。你可以在这个半成品的基础上进行不同颜色的涂鸦</p><p><img src="/images/image-20210726202858441.png"></p><p>了解了什么是Mybatis后，接下来说说以前 <code>JDBC代码</code> 的缺点以及Mybatis又是如何解决的。</p><h4 id="2-1-2-JDBC-缺点"><a href="#2-1-2-JDBC-缺点" class="headerlink" title="2.1.2  JDBC 缺点"></a>2.1.2  JDBC 缺点</h4><p>下面是 JDBC 代码，我们通过该代码分析都存在什么缺点：</p><p><img src="/images/image-20210726203656847.png"></p><ul><li><p>硬编码</p><ul><li><p>注册驱动、获取连接</p><p>上图标1的代码有很多字符串，而这些是连接数据库的四个基本信息，以后如果要将Mysql数据库换成其他的关系型数据库的话，这四个地方都需要修改，如果放在此处就意味着要修改我们的源代码。</p></li><li><p>SQL语句</p><p>上图标2的代码。如果表结构发生变化，SQL语句就要进行更改。这也不方便后期的维护。</p></li></ul></li><li><p>操作繁琐</p><ul><li><p>手动设置参数</p></li><li><p>手动封装结果集</p><p>上图标4的代码是对查询到的数据进行封装，而这部分代码是没有什么技术含量，而且特别耗费时间的。</p></li></ul></li></ul><h4 id="2-1-3-Mybatis-优化"><a href="#2-1-3-Mybatis-优化" class="headerlink" title="2.1.3  Mybatis 优化"></a>2.1.3  Mybatis 优化</h4><ul><li>硬编码可以配置到&#x3D;&#x3D;配置文件&#x3D;&#x3D;</li><li>操作繁琐的地方mybatis都&#x3D;&#x3D;自动完成&#x3D;&#x3D;</li></ul><p>如图所示</p><p><img src="/images/image-20210726204849309.png"></p><p>下图是持久层框架的使用占比。</p><p><img src="/images/image-20210726205328999.png"></p><h3 id="2-2-Mybatis快速入门"><a href="#2-2-Mybatis快速入门" class="headerlink" title="2.2  Mybatis快速入门"></a>2.2  Mybatis快速入门</h3><p><strong>需求：查询user表中所有的数据</strong></p><ul><li><p>创建user表，添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database mybatis;<br>use mybatis;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_user;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>password <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>addr <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tb_user <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tb_user <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-string">&#x27;天津&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tb_user <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建模块，导入坐标</p><p>在创建好的模块中的 pom.xml 配置文件中添加依赖的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis 依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--mysql 驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit 单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加slf4j日志api --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加logback-classic依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加logback-core依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：需要在项目的 resources 目录下创建logback的配置文件</p></li><li><p>编写 MyBatis 核心配置文件 – &gt; 替换连接信息 解决硬编码问题</p><p>在模块下的 resources 目录下创建mybatis的配置文件 <code>mybatis-config.xml</code>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写 SQL 映射文件 –&gt; 统一管理sql语句，解决硬编码问题</p><p>在模块的 <code>resources</code> 目录下创建映射配置文件 <code>UserMapper.xml</code>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编码</p><ul><li><p>在 <code>com.itheima.pojo</code> 包下创建 User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String addr;<br>    <br>    <span class="hljs-comment">//省略了 setter 和 getter</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>com.itheima</code> 包下编写 MybatisDemo 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//2. 获取SqlSession对象，用它来执行sql</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//3. 执行sql</span><br>        List&lt;User&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>); <span class="hljs-comment">//参数是一个字符串，该字符串必须是映射配置文件的namespace.id</span><br>        System.out.println(users);<br>        <span class="hljs-comment">//4. 释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>解决SQL映射文件的警告提示：</strong></p><p>在入门案例映射配置文件中存在报红的情况。问题如下：</p><p><img src="/images/image-20210726212621722.png"></p><ul><li>产生的原因：Idea和数据库没有建立连接，不识别表信息。但是大家一定要记住，它并不影响程序的执行。</li><li>解决方式：在Idea中配置MySQL数据库连接。</li></ul><p>IDEA中配置MySQL数据库连接</p><ul><li><p>点击IDEA右边框的 <code>Database</code> ，在展开的界面点击 <code>+</code> 选择 <code>Data Source</code> ，再选择 <code>MySQL</code></p><p><img src="/images/image-20210726213046072.png"></p></li><li><p>在弹出的界面进行基本信息的填写</p><p><img src="/images/image-20210726213305893.png"></p></li><li><p>点击完成后就能看到如下界面</p><p><img src="/images/image-20210726213541418.png"></p><p>而此界面就和 <code>navicat</code> 工具一样可以进行数据库的操作。也可以编写SQL语句</p><p><img src="/images/image-20210726213857620.png"></p></li></ul><h3 id="2-3-Mapper代理开发"><a href="#2-3-Mapper代理开发" class="headerlink" title="2.3  Mapper代理开发"></a>2.3  Mapper代理开发</h3><h4 id="2-3-1-Mapper代理开发概述"><a href="#2-3-1-Mapper代理开发概述" class="headerlink" title="2.3.1  Mapper代理开发概述"></a>2.3.1  Mapper代理开发概述</h4><p>之前我们写的代码是基本使用方式，它也存在硬编码的问题，如下：</p><p><img src="/images/image-20210726214648112.png"></p><p>这里调用 <code>selectList()</code> 方法传递的参数是映射配置文件中的 namespace.id值。这样写也不便于后期的维护。如果使用 Mapper 代理方式（如下图）则不存在硬编码问题。</p><p><img src="/images/image-20210726214636108.png"></p><p>通过上面的描述可以看出 Mapper 代理方式的目的：</p><ul><li>解决原生方式中的硬编码</li><li>简化后期执行SQL</li></ul><p>Mybatis 官网也是推荐使用 Mapper 代理的方式。下图是截止官网的图片</p><p><img src="/images/image-20210726215339568.png"></p><h4 id="2-3-2-使用Mapper代理要求"><a href="#2-3-2-使用Mapper代理要求" class="headerlink" title="2.3.2  使用Mapper代理要求"></a>2.3.2  使用Mapper代理要求</h4><p>使用Mapper代理方式，必须满足以下要求：</p><ul><li><p>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下。如下图：</p><p><img src="/images/image-20210726215946951.png"></p></li><li><p>设置SQL映射文件的namespace属性为Mapper接口全限定名</p><p><img src="/images/image-20210726220053883.png"></p></li><li><p>在 Mapper 接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</p><p><img src="/images/image-20210726223216517.png"></p></li></ul><h4 id="2-3-3-案例代码实现"><a href="#2-3-3-案例代码实现" class="headerlink" title="2.3.3  案例代码实现"></a>2.3.3  案例代码实现</h4><ul><li><p>在 <code>com.itheima.mapper</code> 包下创建 UserMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>    User <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>resources</code> 下创建 <code>com/itheima/mapper</code> 目录，并在该目录下创建 UserMapper.xml 映射配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    namespace:名称空间。必须是对应接口的全限定名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.User&quot;</span>&gt;</span><br>        select *<br>        from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>com.itheima</code> 包下创建 MybatisDemo2 测试类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Mybatis 代理开发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisDemo2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//2. 获取SqlSession对象，用它来执行sql</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//3. 执行sql</span><br>        <span class="hljs-comment">//3.1 获取UserMapper接口的代理对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; users = userMapper.selectAll();<br><br>        System.out.println(users);<br>        <span class="hljs-comment">//4. 释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><p>如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载。也就是将核心配置文件的加载映射配置文件的配置修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;com/itheima/mapper/UserMapper.xml&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--Mapper代理方式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-核心配置文件"><a href="#2-4-核心配置文件" class="headerlink" title="2.4  核心配置文件"></a>2.4  核心配置文件</h3><p>核心配置文件中现有的配置之前已经给大家进行了解释，而核心配置文件中还可以配置很多内容。我们可以通过查询官网看可以配置的内容</p><p><img src="/images/image-20210726221454927.png"></p><p>接下来我们先对里面的一些配置进行讲解。</p><h4 id="2-4-1-多环境配置"><a href="#2-4-1-多环境配置" class="headerlink" title="2.4.1  多环境配置"></a>2.4.1  多环境配置</h4><p>在核心配置文件的 <code>environments</code> 标签中其实是可以配置多个 <code>environment</code> ，使用 <code>id</code> 给每段环境起名，在 <code>environments</code> 中使用 <code>default=&#39;环境id&#39;</code> 来指定使用哪儿段配置。我们一般就配置一个 <code>environment</code> 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>=<br></code></pre></td></tr></table></figure><h4 id="2-4-2-类型别名"><a href="#2-4-2-类型别名" class="headerlink" title="2.4.2  类型别名"></a>2.4.2  类型别名</h4><p>在映射配置文件中的 <code>resultType</code> 属性需要配置数据封装的类型（类的全限定名）。而每次这样写是特别麻烦的，Mybatis 提供了 <code>类型别名</code>(typeAliases) 可以简化这部分的书写。</p><p>首先需要现在核心配置文件中配置类型别名，也就意味着给pojo包下所有的类起了别名（别名就是类名），不区分大小写。内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--name属性的值是实体类所在包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过上述的配置，我们就可以简化映射配置文件中 <code>resultType</code> 属性值的编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2022/07/15/JDBC/"/>
    <url>/2022/07/15/JDBC/</url>
    
    <content type="html"><![CDATA[<h2 id="1，JDBC概述"><a href="#1，JDBC概述" class="headerlink" title="1，JDBC概述"></a>1，JDBC概述</h2><p>在开发中我们使用的是java语言，那么势必要通过java语言操作数据库中的数据。这就是接下来要学习的JDBC。</p><h3 id="1-1-JDBC概念"><a href="#1-1-JDBC概念" class="headerlink" title="1.1  JDBC概念"></a>1.1  JDBC概念</h3><blockquote><p>JDBC   就是使用Java语言操作关系型数据库的一套API</p><p>全称：( Java DataBase Connectivity ) Java 数据库连接</p></blockquote><p><img src="/images/image-20210725130537815.png"></p><p>我们开发的同一套Java代码是无法操作不同的关系型数据库，因为每一个关系型数据库的底层实现细节都不一样。如果这样，问题就很大了，在公司中可以在开发阶段使用的是MySQL数据库，而上线时公司最终选用oracle数据库，我们就需要对代码进行大批量修改，这显然并不是我们想看到的。我们要做到的是同一套Java代码操作不同的关系型数据库，而此时sun公司就指定了一套标准接口（JDBC），JDBC中定义了所有操作关系型数据库的规则。众所周知接口是无法直接使用的，我们需要使用接口的实现类，而这套实现类（称之为：驱动）就由各自的数据库厂商给出。</p><h3 id="1-2-JDBC本质"><a href="#1-2-JDBC本质" class="headerlink" title="1.2  JDBC本质"></a>1.2  JDBC本质</h3><ul><li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li></ul><h3 id="1-3-JDBC好处"><a href="#1-3-JDBC好处" class="headerlink" title="1.3  JDBC好处"></a>1.3  JDBC好处</h3><ul><li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li><li>可随时替换底层数据库，访问数据库的Java代码基本不变</li></ul><p>以后编写操作数据库的代码只需要面向JDBC（接口），操作哪儿个关系型数据库就需要导入该数据库的驱动包，如需要操作MySQL数据库，就需要再项目中导入MySQL数据库的驱动包。如下图就是MySQL驱动包</p><p><img src="/images/image-20210725133015535.png"></p><h2 id="2，JDBC快速入门"><a href="#2，JDBC快速入门" class="headerlink" title="2，JDBC快速入门"></a>2，JDBC快速入门</h2><p>先来看看通过Java操作数据库的流程</p><p><img src="/images/image-20210725163745153.png"></p><p>第一步：编写Java代码</p><p>第二步：Java代码将SQL发送到MySQL服务端</p><p>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</p><p>第四步：将SQL语句执行的结果返回给Java代码</p><h3 id="2-1-编写代码步骤"><a href="#2-1-编写代码步骤" class="headerlink" title="2.1  编写代码步骤"></a>2.1  编写代码步骤</h3><ul><li><p>创建工程，导入驱动jar包</p><p><img src="/images/image-20210725133015535.png"></p></li><li><p>注册驱动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<br></code></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Connection conn <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br></code></pre></td></tr></table></figure><p>Java代码需要发送SQL给MySQL服务端，就需要先建立连接</p></li><li><p>定义SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span>  “<span class="hljs-keyword">update</span>…” ;<br></code></pre></td></tr></table></figure></li><li><p>获取执行SQL对象</p><p>执行SQL语句需要SQL执行对象，而这个执行对象就是Statement对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Statement stmt <span class="hljs-operator">=</span> conn.createStatement();<br></code></pre></td></tr></table></figure></li><li><p>执行SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">stmt.executeUpdate(<span class="hljs-keyword">sql</span>);  <br></code></pre></td></tr></table></figure></li><li><p>处理返回结果</p></li><li><p>释放资源</p></li></ul><h3 id="2-2-具体操作"><a href="#2-2-具体操作" class="headerlink" title="2.2  具体操作"></a>2.2  具体操作</h3><ul><li>创建新的空的项目</li></ul><p><img src="/images/image-20210725165156501.png"></p><ul><li>定义项目的名称，并指定位置</li></ul><p><img src="/images/image-20210725165220829.png"></p><ul><li>对项目进行设置，JDK版本、编译版本</li></ul><p><img src="/images/image-20210725165349564.png"></p><ul><li>创建模块，指定模块的名称及位置</li></ul><p><img src="/images/image-20210725165536898.png"></p><ul><li><p>导入驱动包</p><p>将mysql的驱动包放在模块下的lib目录（随意命名）下，并将该jar包添加为库文件</p></li></ul><p><img src="/images/image-20210725165657556.png"></p><ul><li>在添加为库文件的时候，有如下三个选项<ul><li>Global Library  ： 全局有效</li><li>Project Library :   项目有效</li><li>Module Library ： 模块有效</li></ul></li></ul><p><img src="/images/image-20210725165751273.png"></p><ul><li>在src下创建类</li></ul><p><img src="/images/image-20210725170004319.png"></p><ul><li>编写代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDBC快速入门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1. 注册驱动</span><br>        <span class="hljs-comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>        <span class="hljs-comment">//2. 获取连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">//3. 定义sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = 2000 where id = 1&quot;</span>;<br>        <span class="hljs-comment">//4. 获取执行sql的对象 Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>        <span class="hljs-comment">//5. 执行sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<span class="hljs-comment">//受影响的行数</span><br>        <span class="hljs-comment">//6. 处理结果</span><br>        System.out.println(count);<br>        <span class="hljs-comment">//7. 释放资源</span><br>        stmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3，JDBC-API详解"><a href="#3，JDBC-API详解" class="headerlink" title="3，JDBC API详解"></a>3，JDBC API详解</h2><h3 id="3-1-DriverManager"><a href="#3-1-DriverManager" class="headerlink" title="3.1  DriverManager"></a>3.1  DriverManager</h3><p>DriverManager（驱动管理类）作用：</p><ul><li><p>注册驱动</p><p><img src="/images/image-20210725171339346.png"></p><p>registerDriver方法是用于注册驱动的，但是我们之前做的入门案例并不是这样写的。而是如下实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<br></code></pre></td></tr></table></figure><p>我们查询MySQL提供的Driver类，看它是如何实现的，源码如下：</p><p><img src="/images/image-20210725171635432.png"></p><p>在该类中的静态代码块中已经执行了 <code>DriverManager</code> 对象的 <code>registerDriver()</code> 方法进行驱动的注册了，那么我们只需要加载 <code>Driver</code> 类，该静态代码块就会执行。而 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> 就可以加载 <code>Driver</code> 类。</p><blockquote><p>&#x3D;&#x3D;提示：&#x3D;&#x3D;</p><ul><li>MySQL 5之后的驱动包，可以省略注册驱动的步骤</li><li>自动加载jar包中META-INF&#x2F;services&#x2F;java.sql.Driver文件中的驱动类</li></ul></blockquote></li><li><p>获取数据库连接</p><p><img src="/images/image-20210725171355278.png"></p><p>参数说明：</p><ul><li><p>url ： 连接路径</p><blockquote><p>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称?参数键值对1&amp;参数键值对2…</p><p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p><p>&#x3D;&#x3D;细节：&#x3D;&#x3D;</p><ul><li><p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称?参数键值对</p></li><li><p>配置 useSSL&#x3D;false 参数，禁用安全连接方式，解决警告提示</p></li></ul></blockquote></li><li><p>user ：用户名</p></li><li><p>poassword ：密码</p></li></ul></li></ul><h3 id="3-2-Connection"><a href="#3-2-Connection" class="headerlink" title="3.2  Connection"></a>3.2  Connection</h3><p>Connection（数据库连接对象）作用：</p><ul><li>获取执行 SQL 的对象</li><li>管理事务</li></ul><h4 id="3-2-1-获取执行对象"><a href="#3-2-1-获取执行对象" class="headerlink" title="3.2.1  获取执行对象"></a>3.2.1  获取执行对象</h4><ul><li><p>普通执行SQL对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Statement createStatement()<br></code></pre></td></tr></table></figure><p>入门案例中就是通过该方法获取的执行对象。</p></li><li><p>预编译SQL的执行SQL对象：防止SQL注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">PreparedStatement  prepareStatement(<span class="hljs-keyword">sql</span>)<br></code></pre></td></tr></table></figure><p>通过这种方式获取的 <code>PreparedStatement</code> SQL语句执行对象是我们一会重点要进行讲解的，它可以防止SQL注入。</p></li><li><p>执行存储过程的对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">CallableStatement prepareCall(<span class="hljs-keyword">sql</span>)<br></code></pre></td></tr></table></figure><p>通过这种方式获取的 <code>CallableStatement</code> 执行对象是用来执行存储过程的，而存储过程在MySQL中不常用，所以这个我们将不进行讲解。</p></li></ul><h4 id="3-2-2-事务管理"><a href="#3-2-2-事务管理" class="headerlink" title="3.2.2  事务管理"></a>3.2.2  事务管理</h4><p>先回顾一下MySQL事务管理的操作：</p><ul><li>开启事务 ： BEGIN; 或者 START TRANSACTION;</li><li>提交事务 ： COMMIT;</li><li>回滚事务 ： ROLLBACK;</li></ul><blockquote><p>MySQL默认是自动提交事务</p></blockquote><p>接下来学习JDBC事务管理的方法。</p><p>Connection几口中定义了3个对应的方法：</p><ul><li><p>开启事务</p><p><img src="/images/image-20210725173444628.png"></p><p>参与autoCommit 表示是否自动提交事务，true表示自动提交事务，false表示手动提交事务。而开启事务需要将该参数设为为false。</p></li><li><p>提交事务</p><p><img src="/images/image-20210725173618636.png"></p></li><li><p>回滚事务</p><p><img src="/images/image-20210725173648674.png"></p></li></ul><p>具体代码实现如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDBC API 详解：Connection</span><br><span class="hljs-comment"> */</span><br>public class JDBCDemo3_Connection &#123;<br><br>    public <span class="hljs-keyword">static</span> void main(String[] args) throws Exception &#123;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span> 注册驱动<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span> 获取连接：如果连接的是本机mysql并且端口是默认的 <span class="hljs-number">3306</span> 可以简化书写<br>        String url <span class="hljs-operator">=</span> &quot;jdbc:mysql:///db1?useSSL=false&quot;;<br>        String username <span class="hljs-operator">=</span> &quot;root&quot;;<br>        String password <span class="hljs-operator">=</span> &quot;1234&quot;;<br>        Connection conn <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span> 定义<span class="hljs-keyword">sql</span><br>        String sql1 <span class="hljs-operator">=</span> &quot;update account set money = 3000 where id = 1&quot;;<br>        String sql2 <span class="hljs-operator">=</span> &quot;update account set money = 3000 where id = 2&quot;;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">4.</span> 获取执行<span class="hljs-keyword">sql</span>的对象 Statement<br>        Statement stmt <span class="hljs-operator">=</span> conn.createStatement();<br><br>        try &#123;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>开启事务<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">5.</span> 执行<span class="hljs-keyword">sql</span><br>            <span class="hljs-type">int</span> count1 <span class="hljs-operator">=</span> stmt.executeUpdate(sql1);<span class="hljs-operator">/</span><span class="hljs-operator">/</span>受影响的行数<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">6.</span> 处理结果<br>            System.out.println(count1);<br>            <span class="hljs-type">int</span> i <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">0</span>;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">5.</span> 执行<span class="hljs-keyword">sql</span><br>            <span class="hljs-type">int</span> count2 <span class="hljs-operator">=</span> stmt.executeUpdate(sql2);<span class="hljs-operator">/</span><span class="hljs-operator">/</span>受影响的行数<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">6.</span> 处理结果<br>            System.out.println(count2);<br><br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>提交事务<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>程序运行到此处，说明没有出现任何问题，则需求提交事务<br>            conn.commit();<br>        &#125; catch (Exception e) &#123;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>回滚事务<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>程序在出现异常时会执行到这个地方，此时就需要回滚事务<br>            conn.rollback();<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">7.</span> 释放资源<br>        stmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Statement"><a href="#3-3-Statement" class="headerlink" title="3.3  Statement"></a>3.3  Statement</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1  概述"></a>3.3.1  概述</h4><p>Statement对象的作用就是用来执行SQL语句。而针对不同类型的SQL语句使用的方法也不一样。</p><ul><li><p>执行DDL、DML语句</p><p><img src="/images/image-20210725175151272.png"></p></li><li><p>执行DQL语句</p><p><img src="/images/image-20210725175131533.png"></p><p>该方法涉及到了 <code>ResultSet</code> 对象，而这个对象我们还没有学习，一会再重点讲解。</p></li></ul><h4 id="3-3-2-代码实现"><a href="#3-3-2-代码实现" class="headerlink" title="3.3.2  代码实现"></a>3.3.2  代码实现</h4><ul><li><p>执行DML语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 执行DML语句</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>    <span class="hljs-comment">//1. 注册驱动</span><br>    <span class="hljs-comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//3. 定义sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = 3000 where id = 1&quot;</span>;<br>    <span class="hljs-comment">//4. 获取执行sql的对象 Statement</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">//5. 执行sql</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<span class="hljs-comment">//执行完DML语句，受影响的行数</span><br>    <span class="hljs-comment">//6. 处理结果</span><br>    <span class="hljs-comment">//System.out.println(count);</span><br>    <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改成功~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改失败~&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//7. 释放资源</span><br>    stmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行DDL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 执行DDL语句</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDDL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>    <span class="hljs-comment">//1. 注册驱动</span><br>    <span class="hljs-comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//3. 定义sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;drop database db2&quot;</span>;<br>    <span class="hljs-comment">//4. 获取执行sql的对象 Statement</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">//5. 执行sql</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<span class="hljs-comment">//执行完DDL语句，可能是0</span><br>    <span class="hljs-comment">//6. 处理结果</span><br>    System.out.println(count);<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    stmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>以后开发很少使用java代码操作DDL语句</li></ul></blockquote></li></ul><h3 id="3-4-ResultSet"><a href="#3-4-ResultSet" class="headerlink" title="3.4  ResultSet"></a>3.4  ResultSet</h3><h4 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3.4.1  概述"></a>3.4.1  概述</h4><p>ResultSet（结果集对象）作用：</p><ul><li>&#x3D;&#x3D;封装了SQL查询语句的结果。&#x3D;&#x3D;</li></ul><p>而执行了DQL语句后就会返回该对象，对应执行DQL语句的方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ResultSet  executeQuery(<span class="hljs-keyword">sql</span>)：执行DQL 语句，返回 ResultSet 对象<br></code></pre></td></tr></table></figure><p>那么我们就需要从 <code>ResultSet</code> 对象中获取我们想要的数据。<code>ResultSet</code> 对象提供了操作查询结果数据的方法，如下：</p><blockquote><p>boolean  next()</p><ul><li>将光标从当前位置向前移动一行 </li><li>判断当前行是否为有效行</li></ul><p>方法返回值说明：</p><ul><li>true  ： 有效航，当前行有数据</li><li>false ： 无效行，当前行没有数据</li></ul></blockquote><blockquote><p>xxx  getXxx(参数)：获取数据</p><ul><li>xxx : 数据类型；如： int getInt(参数) ；String getString(参数)</li><li>参数<ul><li>int类型的参数：列的编号，从1开始</li><li>String类型的参数： 列的名称</li></ul></li></ul></blockquote><p>如下图为执行SQL语句后的结果</p><p><img src="/images/image-20210725181320813.png"></p><p>一开始光标指定于第一行前，如图所示红色箭头指向于表头行。当我们调用了 <code>next()</code> 方法后，光标就下移到第一行数据，并且方法返回true，此时就可以通过 <code>getInt(&quot;id&quot;)</code> 获取当前行id字段的值，也可以通过 <code>getString(&quot;name&quot;)</code> 获取当前行name字段的值。如果想获取下一行的数据，继续调用 <code>next()</code>  方法，以此类推。</p><h4 id="3-4-2-代码实现"><a href="#3-4-2-代码实现" class="headerlink" title="3.4.2  代码实现"></a>3.4.2  代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 执行DQL</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testResultSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>    <span class="hljs-comment">//1. 注册驱动</span><br>    <span class="hljs-comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>    <span class="hljs-comment">//3. 定义sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from account&quot;</span>;<br>    <span class="hljs-comment">//4. 获取statement对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">//5. 执行sql</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>    <span class="hljs-comment">//6. 处理结果， 遍历rs中的所有数据</span><br>    <span class="hljs-comment">/* // 6.1 光标向下移动一行，并且判断当前行是否有数据</span><br><span class="hljs-comment">        while (rs.next())&#123;</span><br><span class="hljs-comment">            //6.2 获取数据  getXxx()</span><br><span class="hljs-comment">            int id = rs.getInt(1);</span><br><span class="hljs-comment">            String name = rs.getString(2);</span><br><span class="hljs-comment">            double money = rs.getDouble(3);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            System.out.println(id);</span><br><span class="hljs-comment">            System.out.println(name);</span><br><span class="hljs-comment">            System.out.println(money);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            System.out.println(&quot;--------------&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;*/</span><br>    <span class="hljs-comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span><br>    <span class="hljs-keyword">while</span> (rs.next())&#123;<br>        <span class="hljs-comment">//6.2 获取数据  getXxx()</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> rs.getDouble(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        System.out.println(id);<br>        System.out.println(name);<br>        System.out.println(money);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    rs.close();<br>    stmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-案例"><a href="#3-5-案例" class="headerlink" title="3.5  案例"></a>3.5  案例</h3><ul><li><p>需求：查询account账户表数据，封装为Account对象中，并且存储到ArrayList集合中</p><p><img src="/images/image-20210725182352433.png"></p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询account账户表数据，封装为Account对象中，并且存储到ArrayList集合中</span><br><span class="hljs-comment">  * 1. 定义实体类Account</span><br><span class="hljs-comment">  * 2. 查询数据，封装到Account对象中</span><br><span class="hljs-comment">  * 3. 将Account对象存入ArrayList集合中</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testResultSet2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>    <span class="hljs-comment">//1. 注册驱动</span><br>    <span class="hljs-comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>    <span class="hljs-comment">//3. 定义sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from account&quot;</span>;<br><br>    <span class="hljs-comment">//4. 获取statement对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><br>    <span class="hljs-comment">//5. 执行sql</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br><br>    <span class="hljs-comment">// 创建集合</span><br>    List&lt;Account&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   <br>    <span class="hljs-comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span><br>    <span class="hljs-keyword">while</span> (rs.next())&#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br><br>        <span class="hljs-comment">//6.2 获取数据  getXxx()</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> rs.getDouble(<span class="hljs-string">&quot;money&quot;</span>);<br><br>        <span class="hljs-comment">//赋值</span><br>        account.setId(id);<br>        account.setName(name);<br>        account.setMoney(money);<br><br>        <span class="hljs-comment">// 存入集合</span><br>        list.add(account);<br>    &#125;<br><br>    System.out.println(list);<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    rs.close();<br>    stmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-6-PreparedStatement"><a href="#3-6-PreparedStatement" class="headerlink" title="3.6  PreparedStatement"></a>3.6  PreparedStatement</h3><blockquote><p>PreparedStatement作用：</p><ul><li>预编译SQL语句并执行：预防SQL注入问题</li></ul></blockquote><p>对上面的作用中SQL注入问题大家肯定不理解。那我们先对SQL注入进行说明.</p><h4 id="3-6-1-SQL注入"><a href="#3-6-1-SQL注入" class="headerlink" title="3.6.1  SQL注入"></a>3.6.1  SQL注入</h4><blockquote><p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。</p></blockquote><p>在今天资料下的 <code>day03-JDBC\资料\2. sql注入演示</code> 中修改 <code>application.properties</code> 文件中的用户名和密码，文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><p>在MySQL中创建名为 <code>test</code> 的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database test;<br></code></pre></td></tr></table></figure><p>在命令提示符中运行今天资料下的 <code>day03-JDBC\资料\2. sql注入演示\sql.jar</code> 这个jar包。</p><p><img src="/images/image-20210725184701026.png"> </p><p>此时我们就能在数据库中看到user表</p><p><img src="/images/image-20210725184817731.png"> </p><p>接下来在浏览器的地址栏输入 <code>localhost:8080/login.html</code> 就能看到如下页面</p><p><img src="/images/image-20210725185024731.png"> </p><p>我们就可以在如上图中输入用户名和密码进行登陆。用户名和密码输入正确就登陆成功，跳转到首页。用户名和密码输入错误则给出错误提示，如下图</p><p><img src="/images/image-20210725185320875.png"> </p><p>但是我可以通过输入一些特殊的字符登陆到首页。</p><p>用户名随意写，密码写成 <code>&#39; or &#39;1&#39; =&#39;1</code></p><p><img src="/images/image-20210725185603112.png"> </p><p>这就是SQL注入漏洞，也是很危险的。当然现在市面上的系统都不会存在这种问题了，所以大家也不要尝试用这种方式去试其他的系统。</p><p>那么该如何解决呢？这里就可以将SQL执行对象 <code>Statement</code> 换成 <code>PreparedStatement</code> 对象。</p><h4 id="3-6-2-代码模拟SQL注入问题"><a href="#3-6-2-代码模拟SQL注入问题" class="headerlink" title="3.6.2  代码模拟SQL注入问题"></a>3.6.2  代码模拟SQL注入问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>    <span class="hljs-comment">// 接收用户输入 用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sjdljfld&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = &#x27;&quot;</span>+name+<span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-comment">// 获取stmt对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">// 执行sql</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>    <span class="hljs-comment">// 判断登录是否成功</span><br>    <span class="hljs-keyword">if</span>(rs.next())&#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    rs.close();<br>    stmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码是将用户名和密码拼接到sql语句中，拼接后的sql语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;sjdljfld&#x27;</span> <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>从上面语句可以看出条件 <code>username = &#39;sjdljfld&#39; and password = &#39;&#39;</code> 不管是否满足，而 <code>or</code> 后面的 <code>&#39;1&#39; = &#39;1&#39;</code> 是始终满足的，最终条件是成立的，就可以正常的进行登陆了。</p><p>接下来我们来学习PreparedStatement对象.</p><h4 id="3-6-3-PreparedStatement概述"><a href="#3-6-3-PreparedStatement概述" class="headerlink" title="3.6.3  PreparedStatement概述"></a>3.6.3  PreparedStatement概述</h4><blockquote><p>PreparedStatement作用：</p><ul><li>预编译SQL语句并执行：预防SQL注入问题</li></ul></blockquote><ul><li><p>获取 PreparedStatement 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SQL语句中的参数值，使用？占位符替代</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user where username = ? and password = ?&quot;</span>;<br><span class="hljs-comment">// 通过Connection对象获取，并传入对应的sql语句</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br></code></pre></td></tr></table></figure></li><li><p>设置参数值</p><p>上面的sql语句中参数使用 ? 进行占位，在之前之前肯定要设置这些 ?  的值。</p><blockquote><p>PreparedStatement对象：setXxx(参数1，参数2)：给 ? 赋值</p><ul><li><p>Xxx：数据类型 ； 如 setInt (参数1，参数2)</p></li><li><p>参数：</p><ul><li><p>参数1： ？的位置编号，从1 开始</p></li><li><p>参数2： ？的值</p></li></ul></li></ul></blockquote></li><li><p>执行SQL语句</p><blockquote><p>executeUpdate();  执行DDL语句和DML语句</p><p>executeQuery();  执行DQL语句</p><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><ul><li>调用这两个方法时不需要传递SQL语句，因为获取SQL语句执行对象时已经对SQL语句进行预编译了。</li></ul></blockquote></li></ul><h4 id="3-6-4-使用PreparedStatement改进"><a href="#3-6-4-使用PreparedStatement改进" class="headerlink" title="3.6.4  使用PreparedStatement改进"></a>3.6.4  使用PreparedStatement改进</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPreparedStatement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>    <span class="hljs-comment">// 接收用户输入 用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;<br><br>    <span class="hljs-comment">// 定义sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;<br>    <span class="hljs-comment">// 获取pstmt对象</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-comment">// 设置？的值</span><br>    pstmt.setString(<span class="hljs-number">1</span>,name);<br>    pstmt.setString(<span class="hljs-number">2</span>,pwd);<br>    <span class="hljs-comment">// 执行sql</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br>    <span class="hljs-comment">// 判断登录是否成功</span><br>    <span class="hljs-keyword">if</span>(rs.next())&#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//7. 释放资源</span><br>    rs.close();<br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面语句就可以发现不会出现SQL注入漏洞问题了。那么PreparedStatement又是如何解决的呢？它是将特殊字符进行了转义，转义的SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;sjdljfld&#x27;</span> <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-keyword">or</span> \<span class="hljs-string">&#x27;1\&#x27;</span> <span class="hljs-operator">=</span> \<span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-6-5-PreparedStatement原理"><a href="#3-6-5-PreparedStatement原理" class="headerlink" title="3.6.5  PreparedStatement原理"></a>3.6.5  PreparedStatement原理</h4><blockquote><p>PreparedStatement 好处：</p><ul><li>预编译SQL，性能更高</li><li>防止SQL注入：&#x3D;&#x3D;将敏感字符进行转义&#x3D;&#x3D;</li></ul></blockquote><p><img src="/images/image-20210725195756848.png"> </p><p>Java代码操作数据库流程如图所示：</p><ul><li><p>将sql语句发送到MySQL服务器端</p></li><li><p>MySQL服务端会对sql语句进行如下操作</p><ul><li><p>检查SQL语句</p><p>检查SQL语句的语法是否正确。</p></li><li><p>编译SQL语句。将SQL语句编译成可执行的函数。</p><p>检查SQL和编译SQL花费的时间比执行SQL的时间还要长。如果我们只是重新设置参数，那么检查SQL语句和编译SQL语句将不需要重复执行。这样就提高了性能。</p></li><li><p>执行SQL语句</p></li></ul></li></ul><p>接下来我们通过查询日志来看一下原理。</p><ul><li><p>开启预编译功能</p><p>在代码中编写url时需要加上以下参数。而我们之前根本就没有开启预编译功能，只是解决了SQL注入漏洞。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">useServerPrepStmts<span class="hljs-operator">=</span><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>配置MySQL执行日志（重启mysql服务后生效）</p><p>在mysql配置文件（my.ini）中添加如下配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log-output</span>=FILE<br><span class="hljs-attr">general-log</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">general_log_file</span>=<span class="hljs-string">&quot;D:\mysql.log&quot;</span><br><span class="hljs-attr">slow-query-log</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">slow_query_log_file</span>=<span class="hljs-string">&quot;D:\mysql_slow.log&quot;</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>java测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * PreparedStatement原理</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPreparedStatement2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception &#123;<br><br>    <span class="hljs-comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span><br>    <span class="hljs-comment">// useServerPrepStmts=true 参数开启预编译功能</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>    <span class="hljs-comment">// 接收用户输入 用户名和密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;<br><br>    <span class="hljs-comment">// 定义sql</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;<br><br>    <span class="hljs-comment">// 获取pstmt对象</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br>    Thread.sleep(<span class="hljs-number">10000</span>);<br>    <span class="hljs-comment">// 设置？的值</span><br>    pstmt.setString(<span class="hljs-number">1</span>,name);<br>    pstmt.setString(<span class="hljs-number">2</span>,pwd);<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 执行sql</span><br>    rs = pstmt.executeQuery();<br><br>    <span class="hljs-comment">// 设置？的值</span><br>    pstmt.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>    pstmt.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;bbb&quot;</span>);<br>    <span class="hljs-comment">// 执行sql</span><br>    rs = pstmt.executeQuery();<br><br>    <span class="hljs-comment">// 判断登录是否成功</span><br>    <span class="hljs-keyword">if</span>(rs.next())&#123;<br>        System.out.println(<span class="hljs-string">&quot;登录成功~&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    rs.close();<br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行SQL语句，查看 <code>D:\mysql.log</code> 日志如下:</p></li></ul><p><img src="/images/image-20210725202829738.png"> </p><p>  上图中第三行中的 <code>Prepare</code> 是对SQL语句进行预编译。第四行和第五行是执行了两次SQL语句，而第二次执行前并没有对SQL进行预编译。</p><blockquote><p>&#x3D;&#x3D;小结：&#x3D;&#x3D;</p><ul><li>在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译（这些步骤很耗时）</li><li>执行时就不用再进行这些步骤了，速度更快</li><li>如果sql模板一样，则只需要进行一次检查、编译</li></ul></blockquote><h2 id="4，数据库连接池"><a href="#4，数据库连接池" class="headerlink" title="4，数据库连接池"></a>4，数据库连接池</h2><h3 id="4-1-数据库连接池简介"><a href="#4-1-数据库连接池简介" class="headerlink" title="4.1  数据库连接池简介"></a>4.1  数据库连接池简介</h3><blockquote><ul><li><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p></li><li><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</p></li><li><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</p></li><li><p>好处</p><ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li></ul></blockquote><p>之前我们代码中使用连接是没有使用都创建一个Connection对象，使用完毕就会将其销毁。这样重复创建销毁的过程是特别耗费计算机的性能的及消耗时间的。</p><p>而数据库使用了数据库连接池后，就能达到Connection对象的复用，如下图</p><p><img src="/images/image-20210725210432985.png"> </p><p>连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。</p><h3 id="4-2-数据库连接池实现"><a href="#4-2-数据库连接池实现" class="headerlink" title="4.2  数据库连接池实现"></a>4.2  数据库连接池实现</h3><ul><li><p>标准接口：&#x3D;&#x3D;DataSource&#x3D;&#x3D;</p><p>官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。该接口提供了获取连接的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>那么以后就不需要通过 <code>DriverManager</code> 对象获取 <code>Connection</code> 对象，而是通过连接池（DataSource）获取 <code>Connection</code> 对象。</p></li><li><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul><p>我们现在使用更多的是Druid，它的性能比其他两个会好一些。</p></li><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><h3 id="4-3-Driud使用"><a href="#4-3-Driud使用" class="headerlink" title="4.3  Driud使用"></a>4.3  Driud使用</h3><blockquote><ul><li>导入jar包 druid-1.1.12.jar</li><li>定义配置文件</li><li>加载配置文件</li><li>获取数据库连接池对象</li><li>获取连接</li></ul></blockquote><p>现在通过代码实现，首先需要先将druid的jar包放到项目下的lib下并添加为库文件</p><p><img src="/images/image-20210725212911980.png"> </p><p>项目结构如下：</p><p><img src="/images/image-20210725213210091.png"> </p><p>编写配置文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">1234</span><br><span class="hljs-comment"># 初始化连接数量</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"># 最大等待时间</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">3000</span><br></code></pre></td></tr></table></figure><p>使用druid的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Druid数据库连接池演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.导入jar包</span><br>        <span class="hljs-comment">//2.定义配置文件</span><br>        <span class="hljs-comment">//3. 加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<br>        <span class="hljs-comment">//4. 获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><br>        <span class="hljs-comment">//5. 获取数据库连接 Connection</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection); <span class="hljs-comment">//获取到了连接后就可以继续做其他操作了</span><br><br>        <span class="hljs-comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5，JDBC练习"><a href="#5，JDBC练习" class="headerlink" title="5，JDBC练习"></a>5，JDBC练习</h2><h3 id="5-1-需求"><a href="#5-1-需求" class="headerlink" title="5.1  需求"></a>5.1  需求</h3><p>完成商品品牌数据的增删改查操作</p><ul><li>查询：查询所有数据</li><li>添加：添加品牌</li><li>修改：根据id修改</li><li>删除：根据id删除</li></ul><h3 id="5-2-案例实现"><a href="#5-2-案例实现" class="headerlink" title="5.2  案例实现"></a>5.2  案例实现</h3><h4 id="5-2-1-环境准备"><a href="#5-2-1-环境准备" class="headerlink" title="5.2.1  环境准备"></a>5.2.1  环境准备</h4><ul><li><p>数据库表 <code>tb_brand</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除tb_brand表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_brand;<br><span class="hljs-comment">-- 创建tb_brand表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_brand (<br>    <span class="hljs-comment">-- id 主键</span><br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    <span class="hljs-comment">-- 品牌名称</span><br>    brand_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-comment">-- 企业名称</span><br>    company_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-comment">-- 排序字段</span><br>    ordered <span class="hljs-type">int</span>,<br>    <span class="hljs-comment">-- 描述信息</span><br>    description <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>    <span class="hljs-comment">-- 状态：0：禁用  1：启用</span><br>    status <span class="hljs-type">int</span><br>);<br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),<br>       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>在pojo包下实体类 Brand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 品牌</span><br><span class="hljs-comment"> * alt + 鼠标左键：整列编辑</span><br><span class="hljs-comment"> * 在实体类中，基本数据类型建议使用其对应的包装类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Brand</span> &#123;<br>    <span class="hljs-comment">// id 主键</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">// 品牌名称</span><br>    <span class="hljs-keyword">private</span> String brandName;<br>    <span class="hljs-comment">// 企业名称</span><br>    <span class="hljs-keyword">private</span> String companyName;<br>    <span class="hljs-comment">// 排序字段</span><br>    <span class="hljs-keyword">private</span> Integer ordered;<br>    <span class="hljs-comment">// 描述信息</span><br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-comment">// 状态：0：禁用  1：启用</span><br>    <span class="hljs-keyword">private</span> Integer status;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBrandName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> brandName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBrandName</span><span class="hljs-params">(String brandName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.brandName = brandName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCompanyName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> companyName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCompanyName</span><span class="hljs-params">(String companyName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.companyName = companyName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getOrdered</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ordered;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrdered</span><span class="hljs-params">(Integer ordered)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ordered = ordered;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(Integer status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Brand&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, brandName=&#x27;&quot;</span> + brandName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, companyName=&#x27;&quot;</span> + companyName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, ordered=&quot;</span> + ordered +<br>                <span class="hljs-string">&quot;, description=&#x27;&quot;</span> + description + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, status=&quot;</span> + status +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-2-2-查询所有"><a href="#5-2-2-查询所有" class="headerlink" title="5.2.2  查询所有"></a>5.2.2  查询所有</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询所有</span><br><span class="hljs-comment">   * 1. SQL：select * from tb_brand;</span><br><span class="hljs-comment">   * 2. 参数：不需要</span><br><span class="hljs-comment">   * 3. 结果：List&lt;Brand&gt;</span><br><span class="hljs-comment">   */</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 获取Connection</span><br>    <span class="hljs-comment">//3. 加载配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<br>    <span class="hljs-comment">//4. 获取连接池对象</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><br>    <span class="hljs-comment">//5. 获取数据库连接 Connection</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    <span class="hljs-comment">//2. 定义SQL</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_brand;&quot;</span>;<br>    <span class="hljs-comment">//3. 获取pstmt对象</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-comment">//4. 设置参数</span><br>    <span class="hljs-comment">//5. 执行SQL</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br>    <span class="hljs-comment">//6. 处理结果 List&lt;Brand&gt; 封装Brand对象，装载List集合</span><br>    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    List&lt;Brand&gt; brands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (rs.next())&#123;<br>        <span class="hljs-comment">//获取数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;brand_name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;company_name&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;ordered&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;description&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;status&quot;</span>);<br>        <span class="hljs-comment">//封装Brand对象</span><br>        brand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>        brand.setId(id);<br>        brand.setBrandName(brandName);<br>        brand.setCompanyName(companyName);<br>        brand.setOrdered(ordered);<br>        brand.setDescription(description);<br>        brand.setStatus(status);<br><br>        <span class="hljs-comment">//装载集合</span><br>        brands.add(brand);<br>    &#125;<br>    System.out.println(brands);<br>    <span class="hljs-comment">//7. 释放资源</span><br>    rs.close();<br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-添加数据"><a href="#5-2-3-添加数据" class="headerlink" title="5.2.3  添加数据"></a>5.2.3  添加数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 添加</span><br><span class="hljs-comment">  * 1. SQL：insert into tb_brand(brand_name, company_name, ordered, description, status) values(?,?,?,?,?);</span><br><span class="hljs-comment">  * 2. 参数：需要，除了id之外的所有参数信息</span><br><span class="hljs-comment">  * 3. 结果：boolean</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 接收页面提交的参数</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;绕地球一圈&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//1. 获取Connection</span><br>    <span class="hljs-comment">//3. 加载配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<br>    <span class="hljs-comment">//4. 获取连接池对象</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>    <span class="hljs-comment">//5. 获取数据库连接 Connection</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    <span class="hljs-comment">//2. 定义SQL</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into tb_brand(brand_name, company_name, ordered, description, status) values(?,?,?,?,?);&quot;</span>;<br>    <span class="hljs-comment">//3. 获取pstmt对象</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-comment">//4. 设置参数</span><br>    pstmt.setString(<span class="hljs-number">1</span>,brandName);<br>    pstmt.setString(<span class="hljs-number">2</span>,companyName);<br>    pstmt.setInt(<span class="hljs-number">3</span>,ordered);<br>    pstmt.setString(<span class="hljs-number">4</span>,description);<br>    pstmt.setInt(<span class="hljs-number">5</span>,status);<br><br>    <span class="hljs-comment">//5. 执行SQL</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> pstmt.executeUpdate(); <span class="hljs-comment">// 影响的行数</span><br>    <span class="hljs-comment">//6. 处理结果</span><br>    System.out.println(count &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-修改数据"><a href="#5-2-4-修改数据" class="headerlink" title="5.2.4  修改数据"></a>5.2.4  修改数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 修改</span><br><span class="hljs-comment">  * 1. SQL：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     update tb_brand</span><br><span class="hljs-comment">         set brand_name  = ?,</span><br><span class="hljs-comment">         company_name= ?,</span><br><span class="hljs-comment">         ordered     = ?,</span><br><span class="hljs-comment">         description = ?,</span><br><span class="hljs-comment">         status      = ?</span><br><span class="hljs-comment">     where id = ?</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * 2. 参数：需要，所有数据</span><br><span class="hljs-comment">   * 3. 结果：boolean</span><br><span class="hljs-comment">   */</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 接收页面提交的参数</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;香飘飘&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;绕地球三圈&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">//1. 获取Connection</span><br>    <span class="hljs-comment">//3. 加载配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<br>    <span class="hljs-comment">//4. 获取连接池对象</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>    <span class="hljs-comment">//5. 获取数据库连接 Connection</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    <span class="hljs-comment">//2. 定义SQL</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; update tb_brand\n&quot;</span> +<br>        <span class="hljs-string">&quot;         set brand_name  = ?,\n&quot;</span> +<br>        <span class="hljs-string">&quot;         company_name= ?,\n&quot;</span> +<br>        <span class="hljs-string">&quot;         ordered     = ?,\n&quot;</span> +<br>        <span class="hljs-string">&quot;         description = ?,\n&quot;</span> +<br>        <span class="hljs-string">&quot;         status      = ?\n&quot;</span> +<br>        <span class="hljs-string">&quot;     where id = ?&quot;</span>;<br><br>    <span class="hljs-comment">//3. 获取pstmt对象</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br>    <span class="hljs-comment">//4. 设置参数</span><br>    pstmt.setString(<span class="hljs-number">1</span>,brandName);<br>    pstmt.setString(<span class="hljs-number">2</span>,companyName);<br>    pstmt.setInt(<span class="hljs-number">3</span>,ordered);<br>    pstmt.setString(<span class="hljs-number">4</span>,description);<br>    pstmt.setInt(<span class="hljs-number">5</span>,status);<br>    pstmt.setInt(<span class="hljs-number">6</span>,id);<br><br>    <span class="hljs-comment">//5. 执行SQL</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> pstmt.executeUpdate(); <span class="hljs-comment">// 影响的行数</span><br>    <span class="hljs-comment">//6. 处理结果</span><br>    System.out.println(count &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-5-删除数据"><a href="#5-2-5-删除数据" class="headerlink" title="5.2.5  删除数据"></a>5.2.5  删除数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除</span><br><span class="hljs-comment">  * 1. SQL：</span><br><span class="hljs-comment">            delete from tb_brand where id = ?</span><br><span class="hljs-comment">  * 2. 参数：需要，id</span><br><span class="hljs-comment">  * 3. 结果：boolean</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 接收页面提交的参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//1. 获取Connection</span><br>    <span class="hljs-comment">//3. 加载配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<br>    <span class="hljs-comment">//4. 获取连接池对象</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br>    <span class="hljs-comment">//5. 获取数据库连接 Connection</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    <span class="hljs-comment">//2. 定义SQL</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; delete from tb_brand where id = ?&quot;</span>;<br>    <span class="hljs-comment">//3. 获取pstmt对象</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>    <span class="hljs-comment">//4. 设置参数</span><br>    pstmt.setInt(<span class="hljs-number">1</span>,id);<br>    <span class="hljs-comment">//5. 执行SQL</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> pstmt.executeUpdate(); <span class="hljs-comment">// 影响的行数</span><br>    <span class="hljs-comment">//6. 处理结果</span><br>    System.out.println(count &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//7. 释放资源</span><br>    pstmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2022/07/15/Mybatis/"/>
    <url>/2022/07/15/Mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1，配置文件实现CRUD"><a href="#1，配置文件实现CRUD" class="headerlink" title="1，配置文件实现CRUD"></a>1，配置文件实现CRUD</h2><p><img src="/images/image-20210729111159534.png"></p><p>如上图所示产品原型，里面包含了品牌数据的 <code>查询</code> 、<code>按条件查询</code>、<code>添加</code>、<code>删除</code>、<code>批量删除</code>、<code>修改</code> 等功能，而这些功能其实就是对数据库表中的数据进行CRUD操作。接下来我们就使用Mybatis完成品牌数据的增删改查操作。以下是我们要完成功能列表：</p><blockquote><ul><li>查询<ul><li>查询所有数据</li><li>查询详情</li><li>条件查询</li></ul></li><li>添加</li><li>修改<ul><li>修改全部字段</li><li>修改动态字段</li></ul></li><li>删除<ul><li>删除一个</li><li>批量删除</li></ul></li></ul></blockquote><p>我们先将必要的环境准备一下。</p><h3 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1  环境准备"></a>1.1  环境准备</h3><ul><li><p>数据库表（tb_brand）及数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除tb_brand表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_brand;<br><span class="hljs-comment">-- 创建tb_brand表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_brand<br>(<br>    <span class="hljs-comment">-- id 主键</span><br>    id           <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    <span class="hljs-comment">-- 品牌名称</span><br>    brand_name   <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-comment">-- 企业名称</span><br>    company_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-comment">-- 排序字段</span><br>    ordered      <span class="hljs-type">int</span>,<br>    <span class="hljs-comment">-- 描述信息</span><br>    description  <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>    <span class="hljs-comment">-- 状态：0：禁用  1：启用</span><br>    status       <span class="hljs-type">int</span><br>);<br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),<br>       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>实体类 Brand</p><p>在 <code>com.itheima.pojo</code> 包下创建 Brand 实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Brand</span> &#123;<br>    <span class="hljs-comment">// id 主键</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">// 品牌名称</span><br>    <span class="hljs-keyword">private</span> String brandName;<br>    <span class="hljs-comment">// 企业名称</span><br>    <span class="hljs-keyword">private</span> String companyName;<br>    <span class="hljs-comment">// 排序字段</span><br>    <span class="hljs-keyword">private</span> Integer ordered;<br>    <span class="hljs-comment">// 描述信息</span><br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-comment">// 状态：0：禁用  1：启用</span><br>    <span class="hljs-keyword">private</span> Integer status;<br>    <br>    <span class="hljs-comment">//省略 setter and getter。自己写时要补全这部分代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写测试用例</p><p>测试代码需要在 <code>test/java</code> 目录下创建包及测试用例。项目结构如下：</p><p><img src="/images/image-20210729112907106.png"></p></li><li><p>安装 MyBatisX 插件</p><ul><li><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</p></li><li><p>主要功能</p><ul><li>XML映射配置文件 和 接口方法 间相互跳转</li><li>根据接口方法生成 statement</li></ul></li><li><p>安装方式</p><p>点击 <code>file</code> ，选择 <code>settings</code> ，就能看到如下图所示界面</p><p><img src="/images/image-20210729113304743.png"></p><blockquote><p>注意：安装完毕后需要重启IDEA</p></blockquote></li><li><p>插件效果</p><p><img src="/images/image-20210729164450524.png"></p><p>红色头绳的表示映射配置文件，蓝色头绳的表示mapper接口。在mapper接口点击红色头绳的小鸟图标会自动跳转到对应的映射配置文件，在映射配置文件中点击蓝色头绳的小鸟图标会自动跳转到对应的mapper接口。也可以在mapper接口中定义方法，自动生成映射配置文件中的 <code>statement</code> ，如图所示</p><p><img src="/images/image-20210729165337223.png"></p></li></ul></li></ul><h3 id="1-2-查询所有数据"><a href="#1-2-查询所有数据" class="headerlink" title="1.2  查询所有数据"></a>1.2  查询所有数据</h3><p><img src="/images/image-20210729165724838.png"></p><p>如上图所示就页面上展示的数据，而这些数据需要从数据库进行查询。接下来我们就来讲查询所有数据功能，而实现该功能我们分以下步骤进行实现：</p><ul><li><p>编写接口方法：Mapper接口</p><ul><li><p>参数：无</p><p>查询所有数据功能是不需要根据任何条件进行查询的，所以此方法不需要参数。</p><p><img src="/images/image-20210729171208737.png"></p></li><li><p>结果：List<Brand></p><p>我们会将查询出来的每一条数据封装成一个 <code>Brand</code> 对象，而多条数据封装多个 <code>Brand</code> 对象，需要将这些对象封装到List集合中返回。</p><p><img src="/images/image-20210729171146911.png"></p></li><li><p>执行方法、测试</p></li></ul></li></ul><h4 id="1-2-1-编写接口方法"><a href="#1-2-1-编写接口方法" class="headerlink" title="1.2.1  编写接口方法"></a>1.2.1  编写接口方法</h4><p>在 <code>com.itheima.mapper</code> 包写创建名为 <code>BrandMapper</code> 的接口。并在该接口中定义 <code>List&lt;Brand&gt; selectAll()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BrandMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     */</span><br>    List&lt;Brand&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-编写SQL语句"><a href="#1-2-2-编写SQL语句" class="headerlink" title="1.2.2  编写SQL语句"></a>1.2.2  编写SQL语句</h4><p>在 <code>reources</code> 下创建 <code>com/itheima/mapper</code> 目录结构，并在该目录下创建名为 <code>BrandMapper.xml</code> 的映射配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.BrandMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>        select *<br>        from tb_brand;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-3-编写测试方法"><a href="#1-2-3-编写测试方法" class="headerlink" title="1.2.3  编写测试方法"></a>1.2.3  编写测试方法</h4><p>在 <code>MybatisTest</code> 类中编写测试查询所有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br><br>    <span class="hljs-comment">//4. 执行方法</span><br>    List&lt;Brand&gt; brands = brandMapper.selectAll();<br>    System.out.println(brands);<br><br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：现在我们感觉测试这部分代码写起来特别麻烦，我们可以先忍忍。以后我们只会写上面的第3步的代码，其他的都不需要我们来完成。</p></blockquote><p>执行测试方法结果如下：</p><p><img src="/images/image-20210729172544230.png"></p><p>从上面结果我们看到了问题，有些数据封装成功了，而有些数据并没有封装成功。为什么这样呢？</p><p>这个问题可以通过两种方式进行解决：</p><ul><li>给字段起别名</li><li>使用resultMap定义字段和属性的映射关系</li></ul><h4 id="1-2-4-起别名解决上述问题"><a href="#1-2-4-起别名解决上述问题" class="headerlink" title="1.2.4  起别名解决上述问题"></a>1.2.4  起别名解决上述问题</h4><p>从上面结果可以看到 <code>brandName</code> 和 <code>companyName</code> 这两个属性的数据没有封装成功，查询 实体类 和 表中的字段 发现，在实体类中属性名是 <code>brandName</code> 和 <code>companyName</code> ，而表中的字段名为 <code>brand_name</code> 和 <code>company_name</code>，如下图所示 。那么我们只需要保持这两部分的名称一致这个问题就迎刃而解。</p><p><img src="/images/image-20210729173210433.png"></p><p>我们可以在写sql语句时给这两个字段起别名，将别名定义成和属性名一致即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>    select<br>    id, brand_name as brandName, company_name as companyName, ordered, description, status<br>    from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而上面的SQL语句中的字段列表书写麻烦，如果表中还有更多的字段，同时其他的功能也需要查询这些字段时就显得我们的代码不够精炼。Mybatis提供了<code>sql</code> 片段可以提高sql的复用性。</p><p><strong>SQL片段：</strong></p><ul><li><p>将需要复用的SQL片段抽取到 <code>sql</code> 标签中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brand_column&quot;</span>&gt;</span><br>id, brand_name as brandName, company_name as companyName, ordered, description, status<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p>id属性值是唯一标识，引用时也是通过该值进行引用。</p></li><li><p>在原sql语句中进行引用</p><p>使用 <code>include</code> 标签引用上述的 SQL 片段，而 <code>refid</code> 指定上述 SQL 片段的id值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>    select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;brand_column&quot;</span> /&gt;</span><br>    from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="1-2-5-使用resultMap解决上述问题"><a href="#1-2-5-使用resultMap解决上述问题" class="headerlink" title="1.2.5  使用resultMap解决上述问题"></a>1.2.5  使用resultMap解决上述问题</h4><p>起别名 + sql片段的方式可以解决上述问题，但是它也存在问题。如果还有功能只需要查询部分字段，而不是查询所有字段，那么我们就需要再定义一个 SQL 片段，这就显得不是那么灵活。</p><p>那么我们也可以使用resultMap来定义字段和属性的映射关系的方式解决上述问题。</p><ul><li><p>在映射配置文件中使用resultMap定义 字段 和 属性 的映射关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            id：完成主键字段的映射</span><br><span class="hljs-comment">                column：表的列名</span><br><span class="hljs-comment">                property：实体类的属性名</span><br><span class="hljs-comment">            result：完成一般字段的映射</span><br><span class="hljs-comment">                column：表的列名</span><br><span class="hljs-comment">                property：实体类的属性名</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：在上面只需要定义 字段名 和 属性名 不一样的映射，而一样的则不需要专门定义出来。</p></blockquote></li><li><p>SQL语句正常编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="1-2-6-小结"><a href="#1-2-6-小结" class="headerlink" title="1.2.6  小结"></a>1.2.6  小结</h4><p>实体类属性名 和 数据库表列名 不一致，不能自动封装数据</p><ul><li>&#x3D;&#x3D;起别名：&#x3D;&#x3D;在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样<ul><li>可以定义 <sql>片段，提升复用性</li></ul></li><li>&#x3D;&#x3D;resultMap：&#x3D;&#x3D;定义<resultMap> 完成不一致的属性名和列名的映射</li></ul><p>而我们最终选择使用 resultMap的方式。查询映射配置文件中查询所有的 statement 书写如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            id：完成主键字段的映射</span><br><span class="hljs-comment">                column：表的列名</span><br><span class="hljs-comment">                property：实体类的属性名</span><br><span class="hljs-comment">            result：完成一般字段的映射</span><br><span class="hljs-comment">                column：表的列名</span><br><span class="hljs-comment">                property：实体类的属性名</span><br><span class="hljs-comment">        --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-查询详情"><a href="#1-3-查询详情" class="headerlink" title="1.3  查询详情"></a>1.3  查询详情</h3><p><img src="/images/image-20210729180118287.png"></p><p>有些数据的属性比较多，在页面表格中无法全部实现，而只会显示部分，而其他属性数据的查询可以通过 <code>查看详情</code> 来进行查询，如上图所示。</p><p>查看详情功能实现步骤：</p><ul><li><p>编写接口方法：Mapper接口</p><p><img src="/images/image-20210729180604529.png"></p><ul><li><p>参数：id</p><p>查看详情就是查询某一行数据，所以需要根据id进行查询。而id以后是由页面传递过来。</p></li><li><p>结果：Brand</p><p>根据id查询出来的数据只要一条，而将一条数据封装成一个Brand对象即可</p></li></ul></li><li><p>编写SQL语句：SQL映射文件</p><p><img src="/images/image-20210729180709318.png"></p></li><li><p>执行方法、进行测试</p></li></ul><h4 id="1-3-1-编写接口方法"><a href="#1-3-1-编写接口方法" class="headerlink" title="1.3.1  编写接口方法"></a>1.3.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义根据id查询数据的方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查看详情：根据Id查询</span><br><span class="hljs-comment">  */</span><br>Brand <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-编写SQL语句"><a href="#1-3-2-编写SQL语句" class="headerlink" title="1.3.2  编写SQL语句"></a>1.3.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span>  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：上述SQL中的 #{id}先这样写，一会我们再详细讲解</p></blockquote><h4 id="1-3-3-编写测试方法"><a href="#1-3-3-编写测试方法" class="headerlink" title="1.3.3  编写测试方法"></a>1.3.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数，该id以后需要传递过来</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br><br>    <span class="hljs-comment">//4. 执行方法</span><br>    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> brandMapper.selectById(id);<br>    System.out.println(brand);<br><br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行测试方法结果如下：</p><p><img src="/images/image-20210729182223137.png"></p><h4 id="1-3-4-参数占位符"><a href="#1-3-4-参数占位符" class="headerlink" title="1.3.4  参数占位符"></a>1.3.4  参数占位符</h4><p>查询到的结果很好理解就是id为1的这行数据。而这里我们需要看控制台显示的SQL语句，能看到使用？进行占位。说明我们在映射配置文件中的写的 <code>#&#123;id&#125;</code> 最终会被？进行占位。接下来我们就聊聊映射配置文件中的参数占位符。</p><p>mybatis提供了两种参数占位符：</p><ul><li><p>#{} ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。从上述例子可以看出使用#{} 底层使用的是 <code>PreparedStatement</code></p></li><li><p>${} ：拼接SQL。底层使用的是 <code>Statement</code>，会存在SQL注入问题。如下图将 映射配置文件中的 #{} 替换成 ${} 来看效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span>  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand where id = $&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重新运行查看结果如下：</p><p><img src="/images/image-20210729184156019.png"></p></li></ul><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;从上面两个例子可以看出，以后开发我们使用 #{} 参数占位符。</p></blockquote><h4 id="1-3-5-parameterType使用"><a href="#1-3-5-parameterType使用" class="headerlink" title="1.3.5  parameterType使用"></a>1.3.5  parameterType使用</h4><p>对于有参数的mapper接口方法，我们在映射配置文件中应该配置 <code>ParameterType</code> 来指定参数类型。只不过该属性都可以省略。如下图：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand where id = $&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-3-6-SQL语句中特殊字段处理"><a href="#1-3-6-SQL语句中特殊字段处理" class="headerlink" title="1.3.6  SQL语句中特殊字段处理"></a>1.3.6  SQL语句中特殊字段处理</h4><p>以后肯定会在SQL语句中写一下特殊字符，比如某一个字段大于某个值，如下图</p><p><img src="/images/image-20210729184756094.png"></p><p>可以看出报错了，因为映射配置文件是xml类型的问题，而 &gt; &lt; 等这些字符在xml中有特殊含义，所以此时我们需要将这些符号进行转义，可以使用以下两种方式进行转义</p><ul><li><p>转义字符</p><p>下图的 <code>&amp;lt;</code> 就是 <code>&lt;</code> 的转义字符。</p><p><img src="/images/image-20210729185128686.png"></p></li><li><![CDATA[内容]]><p><img src="/images/image-20210729185030318.png"></p></li></ul><h3 id="1-4-多条件查询"><a href="#1-4-多条件查询" class="headerlink" title="1.4  多条件查询"></a>1.4  多条件查询</h3><p><img src="/images/image-20210729203804276.png"></p><p>我们经常会遇到如上图所示的多条件查询，将多条件查询的结果展示在下方的数据列表中。而我们做这个功能需要分析最终的SQL语句应该是什么样，思考两个问题</p><ul><li>条件表达式</li><li>如何连接</li></ul><p>条件字段 <code>企业名称</code>  和 <code>品牌名称</code> 需要进行模糊查询，所以条件应该是：</p><p><img src="/images/image-20210729204458815.png"></p><p>简单的分析后，我们来看功能实现的步骤：</p><ul><li><p>编写接口方法</p><ul><li>参数：所有查询条件</li><li>结果：List<Brand></li></ul></li><li><p>在映射配置文件中编写SQL语句</p></li><li><p>编写测试方法并执行</p></li></ul><h4 id="1-4-1-编写接口方法"><a href="#1-4-1-编写接口方法" class="headerlink" title="1.4.1  编写接口方法"></a>1.4.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义多条件查询的方法。</p><p>而该功能有三个参数，我们就需要考虑定义接口时，参数应该如何定义。Mybatis针对多参数有多种实现</p><ul><li><p>使用 <code>@Param(&quot;参数名称&quot;)</code> 标记每一个参数，在映射配置文件中就需要使用 <code>#&#123;参数名称&#125;</code> 进行占位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Brand&gt; <span class="hljs-title function_">selectByCondition</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;status&quot;)</span> <span class="hljs-type">int</span> status, <span class="hljs-meta">@Param(&quot;companyName&quot;)</span> String companyName,<span class="hljs-meta">@Param(&quot;brandName&quot;)</span> String brandName)</span>;<br></code></pre></td></tr></table></figure></li><li><p>将多个参数封装成一个 实体对象 ，将该实体对象作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#&#123;内容&#125;</code> 时，里面的内容必须和实体类属性名保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Brand&gt; <span class="hljs-title function_">selectByCondition</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure></li><li><p>将多个参数封装到map集合中，将map集合作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#&#123;内容&#125;</code> 时，里面的内容必须和map集合中键的名称一致。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">List&lt;Brand&gt; selectByCondition(<span class="hljs-built_in">Map</span> <span class="hljs-built_in">map</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-编写SQL语句"><a href="#1-4-2-编写SQL语句" class="headerlink" title="1.4.2  编写SQL语句"></a>1.4.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand<br>    where status = #&#123;status&#125;<br>    and company_name like #&#123;companyName&#125;<br>    and brand_name like #&#123;brandName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4-3-编写测试方法"><a href="#1-4-3-编写测试方法" class="headerlink" title="1.4.3  编写测试方法"></a>1.4.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByCondition</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;华为&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;华为&quot;</span>;<br><br>    <span class="hljs-comment">// 处理参数</span><br>    companyName = <span class="hljs-string">&quot;%&quot;</span> + companyName + <span class="hljs-string">&quot;%&quot;</span>;<br>    brandName = <span class="hljs-string">&quot;%&quot;</span> + brandName + <span class="hljs-string">&quot;%&quot;</span>;<br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br><br>    <span class="hljs-comment">//4. 执行方法</span><br><span class="hljs-comment">//方式一 ：接口方法参数使用 @Param 方式调用的方法</span><br>    <span class="hljs-comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(status, companyName, brandName);</span><br>    <span class="hljs-comment">//方式二 ：接口方法参数是 实体类对象 方式调用的方法</span><br>     <span class="hljs-comment">//封装对象</span><br>    <span class="hljs-comment">/* Brand brand = new Brand();</span><br><span class="hljs-comment">        brand.setStatus(status);</span><br><span class="hljs-comment">        brand.setCompanyName(companyName);</span><br><span class="hljs-comment">        brand.setBrandName(brandName);*/</span><br>    <br>    <span class="hljs-comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);</span><br>    <br>    <span class="hljs-comment">//方式三 ：接口方法参数是 map集合对象 方式调用的方法</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;status&quot;</span> , status);<br>    map.put(<span class="hljs-string">&quot;companyName&quot;</span>, companyName);<br>    map.put(<span class="hljs-string">&quot;brandName&quot;</span> , brandName);<br>    List&lt;Brand&gt; brands = brandMapper.selectByCondition(map);<br>    System.out.println(brands);<br><br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-4-动态SQL"><a href="#1-4-4-动态SQL" class="headerlink" title="1.4.4  动态SQL"></a>1.4.4  动态SQL</h4><p>上述功能实现存在很大的问题。用户在输入条件时，肯定不会所有的条件都填写，这个时候我们的SQL语句就不能那样写的</p><p>例如用户只输入 当前状态 时，SQL语句就是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_brand <span class="hljs-keyword">where</span> status <span class="hljs-operator">=</span> #&#123;status&#125;<br></code></pre></td></tr></table></figure><p>而用户如果只输入企业名称时，SQL语句就是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_brand <span class="hljs-keyword">where</span> company_name <span class="hljs-keyword">like</span> #&#123;companName&#125;<br></code></pre></td></tr></table></figure><p>而用户如果输入了 <code>当前状态</code> 和 <code>企业名称 </code> 时，SQL语句又不一样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_brand <span class="hljs-keyword">where</span> status <span class="hljs-operator">=</span> #&#123;status&#125; <span class="hljs-keyword">and</span> company_name <span class="hljs-keyword">like</span> #&#123;companName&#125;<br></code></pre></td></tr></table></figure><p>针对上述的需要，Mybatis对动态SQL有很强大的支撑：</p><blockquote><ul><li><p>if</p></li><li><p>choose (when, otherwise)</p></li><li><p>trim (where, set)</p></li><li><p>foreach</p></li></ul></blockquote><p>我们先学习 if 标签和 where 标签：</p><ul><li><p>if 标签：条件判断</p><ul><li>test 属性：逻辑表达式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand<br>    where<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>            and company_name like #&#123;companyName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span><br>            and brand_name like #&#123;brandName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上的这种SQL语句就会根据传递的参数值进行动态的拼接。如果此时status和companyName有值那么就会值拼接这两个条件。</p><p>执行结果如下：</p><p><img src="/images/image-20210729212510291.png"></p><p>但是它也存在问题，如果此时给的参数值是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">// map.put(&quot;status&quot; , status);</span><br>map.put(<span class="hljs-string">&quot;companyName&quot;</span>, companyName);<br>map.put(<span class="hljs-string">&quot;brandName&quot;</span> , brandName);<br></code></pre></td></tr></table></figure><p>拼接的SQL语句就变成了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_brand <span class="hljs-keyword">where</span> <span class="hljs-keyword">and</span> company_name <span class="hljs-keyword">like</span> ? <span class="hljs-keyword">and</span> brand_name <span class="hljs-keyword">like</span> ?<br></code></pre></td></tr></table></figure><p>而上面的语句中 where 关键后直接跟 and 关键字，这就是一条错误的SQL语句。这个就可以使用 where 标签解决</p></li><li><p>where 标签</p><ul><li>作用：<ul><li>替换where关键字</li><li>会动态的去掉第一个条件前的 and </li><li>如果所有的参数没有值则不加where关键字</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>            and company_name like #&#123;companyName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span><br>            and brand_name like #&#123;brandName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：需要给每个条件前都加上 and 关键字。</p></blockquote></li></ul><h3 id="1-5-单个条件（动态SQL）"><a href="#1-5-单个条件（动态SQL）" class="headerlink" title="1.5 单个条件（动态SQL）"></a>1.5 单个条件（动态SQL）</h3><p><img src="/images/image-20210729213613029.png"></p><p>如上图所示，在查询时只能选择 <code>品牌名称</code>、<code>当前状态</code>、<code>企业名称</code> 这三个条件中的一个，但是用户到底选择哪儿一个，我们并不能确定。这种就属于单个条件的动态SQL语句。 </p><p>这种需求需要使用到  <code>choose（when，otherwise）标签</code>  实现，  而 <code>choose</code> 标签类似于Java 中的switch语句。</p><p>通过一个案例来使用这些标签</p><h4 id="1-5-1-编写接口方法"><a href="#1-5-1-编写接口方法" class="headerlink" title="1.5.1  编写接口方法"></a>1.5.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义单条件查询的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 单条件动态查询</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> brand</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br>List&lt;Brand&gt; <span class="hljs-title function_">selectByConditionSingle</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-5-2-编写SQL语句"><a href="#1-5-2-编写SQL语句" class="headerlink" title="1.5.2  编写SQL语句"></a>1.5.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionSingle&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select *<br>    from tb_brand<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><span class="hljs-comment">&lt;!--相当于switch--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于case--&gt;</span><br>                status = #&#123;status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于case--&gt;</span><br>                company_name like #&#123;companyName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于case--&gt;</span><br>                brand_name like #&#123;brandName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-5-3-编写测试方法"><a href="#1-5-3-编写测试方法" class="headerlink" title="1.5.3  编写测试方法"></a>1.5.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByConditionSingle</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;华为&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;华为&quot;</span>;<br><br>    <span class="hljs-comment">// 处理参数</span><br>    companyName = <span class="hljs-string">&quot;%&quot;</span> + companyName + <span class="hljs-string">&quot;%&quot;</span>;<br>    brandName = <span class="hljs-string">&quot;%&quot;</span> + brandName + <span class="hljs-string">&quot;%&quot;</span>;<br><br>    <span class="hljs-comment">//封装对象</span><br>    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>    <span class="hljs-comment">//brand.setStatus(status);</span><br>    brand.setCompanyName(companyName);<br>    <span class="hljs-comment">//brand.setBrandName(brandName);</span><br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>    <span class="hljs-comment">//4. 执行方法</span><br>    List&lt;Brand&gt; brands = brandMapper.selectByConditionSingle(brand);<br>    System.out.println(brands);<br><br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行测试方法结果如下：</p><p><img src="/images/image-20210729214548756.png"></p><h3 id="1-6-添加数据"><a href="#1-6-添加数据" class="headerlink" title="1.6  添加数据"></a>1.6  添加数据</h3><p><img src="/images/image-20210729214917317.png"></p><p>如上图是我们平时在添加数据时展示的页面，而我们在该页面输入想要的数据后添加 <code>提交</code> 按钮，就会将这些数据添加到数据库中。接下来我们就来实现添加数据的操作。</p><ul><li><p>编写接口方法</p><p><img src="/images/image-20210729215351651.png"></p><p>参数：除了id之外的所有的数据。id对应的是表中主键值，而主键我们是 &#x3D;&#x3D;自动增长&#x3D;&#x3D; 生成的。</p></li><li><p>编写SQL语句</p><p><img src="/images/image-20210729215537167.png"></p></li><li><p>编写测试方法并执行</p></li></ul><p>明确了该功能实现的步骤后，接下来我们进行具体的操作。</p><h4 id="1-6-1-编写接口方法"><a href="#1-6-1-编写接口方法" class="headerlink" title="1.6.1  编写接口方法"></a>1.6.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义添加方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加</span><br><span class="hljs-comment">   */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-6-2-编写SQL语句"><a href="#1-6-2-编写SQL语句" class="headerlink" title="1.6.2  编写SQL语句"></a>1.6.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写添加数据的 <code>statement</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>    insert into tb_brand (brand_name, company_name, ordered, description, status)<br>    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-6-3-编写测试方法"><a href="#1-6-3-编写测试方法" class="headerlink" title="1.6.3  编写测试方法"></a>1.6.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;波导手机&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;波导&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;手机中的战斗机&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-comment">//封装对象</span><br>    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>    brand.setStatus(status);<br>    brand.setCompanyName(companyName);<br>    brand.setBrandName(brandName);<br>    brand.setDescription(description);<br>    brand.setOrdered(ordered);<br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true); //设置自动提交事务，这种情况不需要手动提交事务了</span><br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>    <span class="hljs-comment">//4. 执行方法</span><br>    brandMapper.add(brand);<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210729220348255.png"></p><h4 id="1-6-4-添加-主键返回"><a href="#1-6-4-添加-主键返回" class="headerlink" title="1.6.4  添加-主键返回"></a>1.6.4  添加-主键返回</h4><p>在数据添加成功后，有时候需要获取插入数据库数据的主键（主键是自增长）。</p><p>比如：添加订单和订单项，如下图就是京东上的订单</p><p><img src="/images/image-20210729221207962.png"></p><p>订单数据存储在订单表中，订单项存储在订单项表中。</p><ul><li><p>添加订单数据</p><p><img src="/images/image-20210729221049462.png"></p></li><li><p>添加订单项数据，订单项中需要设置所属订单的id</p><p><img src="/images/image-20210729221058898.png"></p></li></ul><p>明白了什么时候 <code>主键返回</code> 。接下来我们简单模拟一下，在添加完数据后打印id属性值，能打印出来说明已经获取到了。</p><p>我们将上面添加品牌数据的案例中映射配置文件里 <code>statement</code> 进行修改，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into tb_brand (brand_name, company_name, ordered, description, status)<br>    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在 insert 标签上添加如下属性：</p><ul><li>useGeneratedKeys：是够获取自动增长的主键值。true表示获取</li><li>keyProperty  ：指定将获取到的主键值封装到哪儿个属性里</li></ul></blockquote><h3 id="1-7-修改"><a href="#1-7-修改" class="headerlink" title="1.7  修改"></a>1.7  修改</h3><p><img src="/images/image-20210729222642700.png"></p><p>如图所示是修改页面，用户在该页面书写需要修改的数据，点击 <code>提交</code> 按钮，就会将数据库中对应的数据进行修改。注意一点，如果哪儿个输入框没有输入内容，我们是将表中数据对应字段值替换为空白还是保留字段之前的值？答案肯定是保留之前的数据。</p><p>接下来我们就具体来实现</p><h4 id="1-7-1-编写接口方法"><a href="#1-7-1-编写接口方法" class="headerlink" title="1.7.1  编写接口方法"></a>1.7.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义修改方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 修改</span><br><span class="hljs-comment">   */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>上述方法参数 Brand 就是封装了需要修改的数据，而id肯定是有数据的，这也是和添加方法的区别。</p></blockquote><h4 id="1-7-2-编写SQL语句"><a href="#1-7-2-编写SQL语句" class="headerlink" title="1.7.2  编写SQL语句"></a>1.7.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写修改数据的 <code>statement</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>    update tb_brand<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br>            brand_name = #&#123;brandName&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span><br>            company_name = #&#123;companyName&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ordered != null&quot;</span>&gt;</span><br>            ordered = #&#123;ordered&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span><br>            description = #&#123;description&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><em>set</em> 标签可以用于动态包含需要更新的列，忽略其它不更新的列。</p></blockquote><h4 id="1-7-3-编写测试方法"><a href="#1-7-3-编写测试方法" class="headerlink" title="1.7.3  编写测试方法"></a>1.7.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">companyName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;波导手机&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;波导&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;波导手机,手机中的战斗机&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ordered</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-comment">//封装对象</span><br>    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Brand</span>();<br>    brand.setStatus(status);<br>    <span class="hljs-comment">//        brand.setCompanyName(companyName);</span><br>    <span class="hljs-comment">//        brand.setBrandName(brandName);</span><br>    <span class="hljs-comment">//        brand.setDescription(description);</span><br>    <span class="hljs-comment">//        brand.setOrdered(ordered);</span><br>    brand.setId(id);<br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>    <span class="hljs-comment">//4. 执行方法</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> brandMapper.update(brand);<br>    System.out.println(count);<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行测试方法结果如下：</p><p><img src="/images/image-20210729224205522.png"></p><p>从结果中SQL语句可以看出，只修改了 <code>status</code>  字段值，因为我们给的数据中只给Brand实体对象的 <code>status</code> 属性设置值了。这就是 <code>set</code> 标签的作用。</p><h3 id="1-8-删除一行数据"><a href="#1-8-删除一行数据" class="headerlink" title="1.8  删除一行数据"></a>1.8  删除一行数据</h3><p><img src="/images/image-20210729224549305.png"></p><p>如上图所示，每行数据后面都有一个 <code>删除</code> 按钮，当用户点击了该按钮，就会将改行数据删除掉。那我们就需要思考，这种删除是根据什么进行删除呢？是通过主键id删除，因为id是表中数据的唯一标识。</p><p>接下来就来实现该功能。</p><h4 id="1-8-1-编写接口方法"><a href="#1-8-1-编写接口方法" class="headerlink" title="1.8.1  编写接口方法"></a>1.8.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义根据id删除方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 根据id删除</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-8-2-编写SQL语句"><a href="#1-8-2-编写SQL语句" class="headerlink" title="1.8.2  编写SQL语句"></a>1.8.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写删除一行数据的 <code>statement</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span>&gt;</span><br>    delete from tb_brand where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-8-3-编写测试方法"><a href="#1-8-3-编写测试方法" class="headerlink" title="1.8.3  编写测试方法"></a>1.8.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>    <span class="hljs-comment">//4. 执行方法</span><br>    brandMapper.deleteById(id);<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>运行过程只要没报错，直接到数据库查询数据是否还存在。</p><h3 id="1-9-批量删除"><a href="#1-9-批量删除" class="headerlink" title="1.9  批量删除"></a>1.9  批量删除</h3><p><img src="/images/image-20210729225713894.png"></p><p>如上图所示，用户可以选择多条数据，然后点击上面的 <code>删除</code> 按钮，就会删除数据库中对应的多行数据。</p><h4 id="1-9-1-编写接口方法"><a href="#1-9-1-编写接口方法" class="headerlink" title="1.9.1  编写接口方法"></a>1.9.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义删除多行数据的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 批量删除</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(<span class="hljs-type">int</span>[] ids)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>参数是一个数组，数组中存储的是多条数据的id</p></blockquote><h4 id="1-9-2-编写SQL语句"><a href="#1-9-2-编写SQL语句" class="headerlink" title="1.9.2  编写SQL语句"></a>1.9.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写删除多条数据的 <code>statement</code>。</p><p>编写SQL时需要遍历数组来拼接SQL语句。Mybatis 提供了 <code>foreach</code> 标签供我们使用</p><p><strong>foreach 标签</strong></p><p>用来迭代任何可迭代的对象（如数组，集合）。</p><ul><li>collection 属性：<ul><li>mybatis会将数组参数，封装为一个Map集合。<ul><li>默认：array &#x3D; 数组</li><li>使用@Param注解改变map集合的默认key的名称</li></ul></li></ul></li><li>item 属性：本次迭代获取到的元素。</li><li>separator 属性：集合项迭代之间的分隔符。<code>foreach</code> 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。</li><li>open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次</li><li>close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>    delete from tb_brand where id<br>    in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    ;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>假如数组中的id数据是{1,2,3}，那么拼接后的sql语句就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_brand <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></blockquote><h4 id="1-9-3-编写测试方法"><a href="#1-9-3-编写测试方法" class="headerlink" title="1.9.3  编写测试方法"></a>1.9.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteByIds</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//接收参数</span><br>    <span class="hljs-type">int</span>[] ids = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><br>    <span class="hljs-comment">//1. 获取SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    <span class="hljs-comment">//2. 获取SqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br>    <span class="hljs-comment">//3. 获取Mapper接口的代理对象</span><br>    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">brandMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>    <span class="hljs-comment">//4. 执行方法</span><br>    brandMapper.deleteByIds(ids);<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//5. 释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-Mybatis参数传递"><a href="#1-10-Mybatis参数传递" class="headerlink" title="1.10  Mybatis参数传递"></a>1.10  Mybatis参数传递</h3><p>Mybatis 接口方法中可以接收各种各样的参数，如下：</p><ul><li>多个参数</li><li>单个参数：单个参数又可以是如下类型<ul><li>POJO 类型</li><li>Map 集合类型</li><li>Collection 集合类型</li><li>List 集合类型</li><li>Array 类型</li><li>其他类型</li></ul></li></ul><h4 id="1-10-1-多个参数"><a href="#1-10-1-多个参数" class="headerlink" title="1.10.1  多个参数"></a>1.10.1  多个参数</h4><p>如下面的代码，就是接收两个参数，而接收多个参数需要使用 <code>@Param</code> 注解，那么为什么要加该注解呢？这个问题要弄明白就必须来研究Mybatis 底层对于这些参数是如何处理的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select *<br>    from tb_user<br>    where <br>    username=#&#123;username&#125;<br>    and password=#&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们在接口方法中定义多个参数，Mybatis 会将这些参数封装成 Map 集合对象，值就是参数值，而键在没有使用 <code>@Param</code> 注解时有以下命名规则：</p><ul><li><p>以 arg 开头  ：第一个参数就叫 arg0，第二个参数就叫 arg1，以此类推。如：</p><blockquote><p>map.put(“arg0”，参数值1);</p><p>map.put(“arg1”，参数值2);</p></blockquote></li><li><p>以 param 开头 ： 第一个参数就叫 param1，第二个参数就叫 param2，依次类推。如：</p><blockquote><p>map.put(“param1”，参数值1);</p><p>map.put(“param2”，参数值2);</p></blockquote></li></ul><p><strong>代码验证：</strong></p><ul><li><p>在 <code>UserMapper</code> 接口中定义如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">select</span><span class="hljs-params">(String username,String password)</span>;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select *<br>    from tb_user<br>    where <br>    username=#&#123;arg0&#125;<br>    and password=#&#123;arg1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select *<br>    from tb_user<br>    where <br>    username=#&#123;param1&#125;<br>    and password=#&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>运行代码结果如下</p><p><img src="/images/image-20210805230303461.png"></p><p>在映射配合文件的SQL语句中使用用 <code>arg</code> 开头的和 <code>param</code> 书写，代码的可读性会变的特别差，此时可以使用 <code>@Param</code> 注解。</p></li></ul><p>在接口方法参数上使用 <code>@Param</code> 注解，Mybatis 会将 <code>arg</code> 开头的键名替换为对应注解的属性值。</p><p><strong>代码验证：</strong></p><ul><li><p>在 <code>UserMapper</code> 接口中定义如下方法，在 <code>username</code> 参数前加上 <code>@Param</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, String password)</span>;<br></code></pre></td></tr></table></figure><p>Mybatis 在封装 Map 集合时，键名就会变成如下：</p><blockquote><p>map.put(“username”，参数值1);</p><p>map.put(“arg1”，参数值2);</p><p>map.put(“param1”，参数值1);</p><p>map.put(“param2”，参数值2);</p></blockquote></li><li><p>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select *<br>    from tb_user<br>    where <br>    username=#&#123;username&#125;<br>    and password=#&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>运行程序结果没有报错。而如果将 <code>#&#123;&#125;</code> 中的 <code>username</code> 还是写成  <code>arg0</code> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select *<br>    from tb_user<br>    where <br>    username=#&#123;arg0&#125;<br>    and password=#&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>运行程序则可以看到错误</p><p><img src="/images/image-20210805231727206.png"></p></li></ul><p>&#x3D;&#x3D;结论：以后接口参数是多个时，在每个参数上都使用 <code>@Param</code> 注解。这样代码的可读性更高。&#x3D;&#x3D;</p><h4 id="1-10-2-单个参数"><a href="#1-10-2-单个参数" class="headerlink" title="1.10.2  单个参数"></a>1.10.2  单个参数</h4><ul><li><p>POJO 类型</p><p>直接使用。要求 <code>属性名</code> 和 <code>参数占位符名称</code> 一致</p></li><li><p>Map 集合类型</p><p>直接使用。要求 <code>map集合的键名</code> 和 <code>参数占位符名称</code> 一致</p></li><li><p>Collection 集合类型</p><p>Mybatis 会将集合封装到 map 集合中，如下：</p><blockquote><p>map.put(“arg0”，collection集合);</p><p>map.put(“collection”，collection集合;</p></blockquote><p>&#x3D;&#x3D;可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。&#x3D;&#x3D;</p></li><li><p>List 集合类型</p><p>Mybatis 会将集合封装到 map 集合中，如下：</p><blockquote><p>map.put(“arg0”，list集合);</p><p>map.put(“collection”，list集合);</p><p>map.put(“list”，list集合);</p></blockquote><p>&#x3D;&#x3D;可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。&#x3D;&#x3D;</p></li><li><p>Array 类型</p><p>Mybatis 会将集合封装到 map 集合中，如下：</p><blockquote><p>map.put(“arg0”，数组);</p><p>map.put(“array”，数组);</p></blockquote><p>&#x3D;&#x3D;可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。&#x3D;&#x3D;</p></li><li><p>其他类型</p><p>比如int类型，<code>参数占位符名称</code> 叫什么都可以。尽量做到见名知意</p></li></ul><h2 id="2，注解实现CRUD"><a href="#2，注解实现CRUD" class="headerlink" title="2，注解实现CRUD"></a>2，注解实现CRUD</h2><p>使用注解开发会比配置文件开发更加方便。如下就是使用注解进行开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(value = &quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p><ul><li>注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code></li></ul></blockquote><p>Mybatis 针对 CURD 操作都提供了对应的注解，已经做到见名知意。如下：</p><ul><li>查询 ：@Select</li><li>添加 ：@Insert</li><li>修改 ：@Update</li><li>删除 ：@Delete</li></ul><p>接下来我们做一个案例来使用 Mybatis 的注解开发</p><p><strong>代码实现：</strong></p><ul><li><p>将之前案例中 <code>UserMapper.xml</code> 中的 根据id查询数据 的 <code>statement</code> 注释掉</p><p><img src="/images/image-20210805235229938.png"></p></li><li><p>在 <code>UserMapper</code> 接口的 <code>selectById</code> 方法上添加注解</p><p><img src="/images/image-20210805235405070.png"></p></li><li><p>运行测试程序也能正常查询到数据</p></li></ul><p>我们课程上只演示这一个查询的注解开发，其他的同学们下来可以自己实现，都是比较简单。</p><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;在官方文档中 <code>入门</code> 中有这样的一段话：</p><p><img src="/images/image-20210805234302849.png"></p><p>所以，&#x3D;&#x3D;注解完成简单功能，配置文件完成复杂功能。&#x3D;&#x3D;</p><p>而我们之前写的动态 SQL 就是复杂的功能，如果用注解使用的话，就需要使用到 Mybatis 提供的SQL构建器来完成，而对应的代码如下：</p><p><img src="/images/image-20210805234842497.png"></p><p>上述代码将java代码和SQL语句融到了一块，使得代码的可读性大幅度降低。</p>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL SQL基础</title>
    <link href="/2022/06/21/MySql%20sql%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/06/21/MySql%20sql%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h2><p>了解了数据模型后，接下来我们就学习SQL语句，通过SQL语句对数据库、表、数据进行增删改查操作。 </p><h3 id="3-1-SQL简介"><a href="#3-1-SQL简介" class="headerlink" title="3.1  SQL简介"></a>3.1  SQL简介</h3><ul><li>英文：Structured Query Language，简称 SQL</li><li>结构化查询语言，一门操作关系型数据库的编程语言</li><li>定义操作所有关系型数据库的统一标准</li><li>对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方，我们称为“方言”</li></ul><h3 id="3-2-通用语法"><a href="#3-2-通用语法" class="headerlink" title="3.2  通用语法"></a>3.2  通用语法</h3><ul><li><p>SQL 语句可以单行或多行书写，以分号结尾。</p><p><img src="/images/image-20210721215223872.png"> </p><p>如上，以分号结尾才是一个完整的sql语句。</p></li><li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p><p>同样的一条sql语句写成下图的样子，一样可以运行处结果。</p><p><img src="/images/image-20210721215328410.png"> </p></li><li><p>注释</p><ul><li><p>单行注释: – 注释内容 或 #注释内容(MySQL 特有) </p><p><img src="/images/image-20210721215517293.png"> </p><p> <img src="/images/image-20210721215556885.png">  </p><blockquote><p>注意：使用– 添加单行注释时，–后面一定要加空格，而#没有要求。</p></blockquote></li><li><p>多行注释: &#x2F;* 注释 *&#x2F;</p></li></ul></li></ul><h3 id="3-3-SQL分类"><a href="#3-3-SQL分类" class="headerlink" title="3.3  SQL分类"></a>3.3  SQL分类</h3><ul><li><p>DDL(Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等</p><p>DDL简单理解就是用来操作数据库，表等</p><p><img src="/images/image-20210721220032047.png"></p></li><li><p>DML(Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改</p><p>DML简单理解就对表中数据进行增删改</p><p><img src="/images/image-20210721220132919.png"> </p></li><li><p>DQL(Data Query Language) 数据查询语言，用来查询数据库中表的记录(数据)</p><p>DQL简单理解就是对数据进行查询操作。从数据库表中查询到我们想要的数据。</p></li><li><p>DCL(Data Control Language) 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</p><p>DML简单理解就是对数据库进行权限控制。比如我让某一个数据库表只能让某一个用户进行操作等。</p></li></ul><blockquote><p>注意： 以后我们最常操作的是 <code>DML</code> 和 <code>DQL</code>  ，因为我们开发中最常操作的就是数据。</p></blockquote><h2 id="4，DDL-操作数据库"><a href="#4，DDL-操作数据库" class="headerlink" title="4，DDL:操作数据库"></a>4，DDL:操作数据库</h2><p>我们先来学习DDL来操作数据库。而操作数据库主要就是对数据库的增删查操作。</p><h3 id="4-1-查询"><a href="#4-1-查询" class="headerlink" title="4.1  查询"></a>4.1  查询</h3><p>查询所有的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>运行上面语句效果如下：</p><p><img src="/images/image-20210721221107014.png"> </p><p>上述查询到的是的这些数据库是mysql安装好自带的数据库，我们以后不要操作这些数据库。</p><h3 id="4-2-创建数据库"><a href="#4-2-创建数据库" class="headerlink" title="4.2  创建数据库"></a>4.2  创建数据库</h3><ul><li><strong>创建数据库</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE 数据库名称;<br></code></pre></td></tr></table></figure><p>运行语句效果如下：</p><p><img src="/images/image-20210721223450755.png"> </p><p>而在创建数据库的时候，我并不知道db1数据库有没有创建，直接再次创建名为db1的数据库就会出现错误。</p><p><img src="/images/image-20210721223745490.png"> </p><p>为了避免上面的错误，在创建数据库的时候先做判断，如果不存在再创建。</p><ul><li><strong>创建数据库(判断，如果不存在则创建)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> 数据库名称;<br></code></pre></td></tr></table></figure><p>从上面的效果可以看到虽然db1数据库已经存在，再创建db1也没有报错，而创建db2数据库则创建成功。</p><h3 id="4-3-删除数据库"><a href="#4-3-删除数据库" class="headerlink" title="4.3  删除数据库"></a>4.3  删除数据库</h3><ul><li><strong>删除数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE 数据库名称;<br></code></pre></td></tr></table></figure><ul><li><strong>删除数据库(判断，如果存在则删除)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> 数据库名称;<br></code></pre></td></tr></table></figure><p>运行语句效果如下：</p><p><img src="/images/image-20210721224435251.png"> </p><h3 id="4-4-使用数据库"><a href="#4-4-使用数据库" class="headerlink" title="4.4  使用数据库"></a>4.4  使用数据库</h3><p>数据库创建好了，要在数据库中创建表，得先明确在哪儿个数据库中操作，此时就需要使用数据库。</p><ul><li><strong>使用数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE 数据库名称;<br></code></pre></td></tr></table></figure><ul><li><strong>查看当前使用的数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure><p>运行语句效果如下：</p><p><img src="/images/image-20210721224720841.png"> </p><h2 id="5，DDL-操作表"><a href="#5，DDL-操作表" class="headerlink" title="5，DDL:操作表"></a>5，DDL:操作表</h2><p>操作表也就是对表进行增（Create）删（Retrieve）改（Update）查（Delete）。</p><h3 id="5-1-查询表"><a href="#5-1-查询表" class="headerlink" title="5.1  查询表"></a>5.1  查询表</h3><ul><li><strong>查询当前数据库下所有表名称</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><p>我们创建的数据库中没有任何表，因此我们进入mysql自带的mysql数据库，执行上述语句查看</p><p><img src="/images/image-20210721230202814.png"> </p><ul><li><strong>查询表结构</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名称;<br></code></pre></td></tr></table></figure><p>查看mysql数据库中func表的结构，运行语句如下：</p><p><img src="/images/image-20210721230332428.png"> </p><h3 id="5-2-创建表"><a href="#5-2-创建表" class="headerlink" title="5.2  创建表"></a>5.2  创建表</h3><ul><li><strong>创建表</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名 (<br>字段名<span class="hljs-number">1</span>  数据类型<span class="hljs-number">1</span>,<br>字段名<span class="hljs-number">2</span>  数据类型<span class="hljs-number">2</span>,<br>…<br>字段名n  数据类型n<br>);<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：最后一行末尾，不能加逗号</p></blockquote><p>知道了创建表的语句，那么我们创建创建如下结构的表</p><img src="E:/java后端/day01-MySQL基础/ppt/assets/image-20210721230824097.png" alt="image-20210721230824097" style="zoom:80%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user (<br>id <span class="hljs-type">int</span>,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>)<br>);<br></code></pre></td></tr></table></figure><p>运行语句如下：</p><p><img src="/images/image-20210721231142326.png"> </p><h3 id="5-3-数据类型"><a href="#5-3-数据类型" class="headerlink" title="5.3  数据类型"></a>5.3  数据类型</h3><p>MySQL 支持多种类型，可以分为三类：</p><ul><li><p>数值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">tinyint : 小整数型，占一个字节<br><span class="hljs-type">int</span>： 大整数类型，占四个字节<br>eg ： age <span class="hljs-type">int</span><br><span class="hljs-keyword">double</span> ： 浮点类型<br>使用格式： 字段名 <span class="hljs-keyword">double</span>(总长度,小数点后保留的位数)<br>eg ： score <span class="hljs-keyword">double</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)   <br></code></pre></td></tr></table></figure></li><li><p>日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">date</span> ： 日期值。只包含年月日<br>eg ：birthday <span class="hljs-type">date</span> ： <br>datetime ： 混合日期和时间值。包含年月日时分秒<br></code></pre></td></tr></table></figure></li><li><p>字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">char</span> ： 定长字符串。<br>优点：存储性能高<br>缺点：浪费空间<br>eg ： name <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)  如果存储的数据字符个数不足<span class="hljs-number">10</span>个，也会占<span class="hljs-number">10</span>个的空间<br><span class="hljs-type">varchar</span> ： 变长字符串。<br>优点：节约空间<br>缺点：存储性能底<br>eg ： name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) 如果存储的数据字符个数不足<span class="hljs-number">10</span>个，那就数据字符个数是几就占几个的空间<br></code></pre></td></tr></table></figure></li></ul><p><img src="/images/1655780748123.jpg"> </p><p><strong>案例：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">需求：设计一张学生表，请注重数据类型、长度的合理性<br><span class="hljs-bullet">1.</span> 编号<br><span class="hljs-bullet">2.</span> 姓名，姓名最长不超过10个汉字<br><span class="hljs-bullet">3.</span> 性别，因为取值只有两种可能，因此最多一个汉字<br><span class="hljs-bullet">4.</span> 生日，取值为年月日<br><span class="hljs-bullet">5.</span> 入学成绩，小数点后保留两位<br><span class="hljs-bullet">6.</span> 邮件地址，最大长度不超过 64<br><span class="hljs-bullet">7.</span> 家庭联系电话，不一定是手机号码，可能会出现 - 等字符<br><span class="hljs-bullet">8.</span> 学生状态（用数字表示，正常、休学、毕业...）<br></code></pre></td></tr></table></figure><p>语句设计如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student (<br>id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    birthday <span class="hljs-type">date</span>,<br>    score <span class="hljs-keyword">double</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>    email <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>),<br>    tel <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>),<br>    status tinyint<br>);<br></code></pre></td></tr></table></figure><h3 id="5-4-删除表"><a href="#5-4-删除表" class="headerlink" title="5.4  删除表"></a>5.4  删除表</h3><ul><li><strong>删除表</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><ul><li><strong>删除表时判断表是否存在</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> 表名;<br></code></pre></td></tr></table></figure><p>运行语句效果如下：</p><p><img src="/images/image-20210721235108267.png"> </p><h3 id="5-5-修改表"><a href="#5-5-修改表" class="headerlink" title="5.5  修改表"></a>5.5  修改表</h3><ul><li><strong>修改表名</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新的表名;<br><br><span class="hljs-comment">-- 将表名student修改为stu</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student rename <span class="hljs-keyword">to</span> stu;<br></code></pre></td></tr></table></figure><ul><li><strong>添加一列</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 列名 数据类型;<br><br><span class="hljs-comment">-- 给stu表添加一列address，该字段类型是varchar(50)</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> stu <span class="hljs-keyword">add</span> address <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>修改数据类型</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;<br><br><span class="hljs-comment">-- 将stu表中的address字段的类型改为 char(50)</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> stu modify address <span class="hljs-type">char</span>(<span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>修改列名和数据类型</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;<br><br><span class="hljs-comment">-- 将stu表中的address字段名改为 addr，类型改为varchar(50)</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> stu change address addr <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>删除列</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 列名;<br><br><span class="hljs-comment">-- 将stu表中的addr字段 删除</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> stu <span class="hljs-keyword">drop</span> addr;<br></code></pre></td></tr></table></figure><h2 id="7，DML"><a href="#7，DML" class="headerlink" title="7，DML"></a>7，DML</h2><p>DML主要是对数据进行增（insert）删（delete）改（update）操作。</p><h3 id="7-1-添加数据"><a href="#7-1-添加数据" class="headerlink" title="7.1  添加数据"></a>7.1  添加数据</h3><ul><li><strong>给指定列添加数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,…) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…);<br></code></pre></td></tr></table></figure><ul><li><strong>给全部列添加数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…);<br></code></pre></td></tr></table></figure><ul><li><strong>批量添加数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,…) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…)…;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,…)…;<br></code></pre></td></tr></table></figure><ul><li><strong>练习</strong></li></ul><p>为了演示以下的增删改操作是否操作成功，故先将查询所有数据的语句介绍给大家：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 给指定列添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu (id, NAME) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>);<br><span class="hljs-comment">-- 给所有列添加数据，列名的列表可以省略的</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu (id,NAME,sex,birthday,score,email,tel,STATUS) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">88.88</span>,<span class="hljs-string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="hljs-string">&#x27;13888888888&#x27;</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">88.88</span>,<span class="hljs-string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="hljs-string">&#x27;13888888888&#x27;</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">-- 批量添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">88.88</span>,<span class="hljs-string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="hljs-string">&#x27;13888888888&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">88.88</span>,<span class="hljs-string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="hljs-string">&#x27;13888888888&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">88.88</span>,<span class="hljs-string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="hljs-string">&#x27;13888888888&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="7-2-修改数据"><a href="#7-2-修改数据" class="headerlink" title="7.2  修改数据"></a>7.2  修改数据</h3><ul><li><strong>修改表数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 列名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,… [<span class="hljs-keyword">WHERE</span> 条件] ;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>修改语句中如果不加条件，则将所有数据都修改！</li><li>像上面的语句中的中括号，表示在写sql语句中可以省略这部分</li></ol></blockquote><ul><li><p><strong>练习</strong></p><ul><li><p>将张三的性别改为女</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>将张三的生日改为 1999-12-12 分数改为99.99</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> birthday <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1999-12-12&#x27;</span>, score <span class="hljs-operator">=</span> <span class="hljs-number">99.99</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>注意：如果update语句没有加where条件，则会将表中所有数据全部修改！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> sex <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面语句的执行完后查询到的结果是</p><p><img src="/images/image-20210722204233305.png"></p></li></ul></li></ul><h3 id="7-3-删除数据"><a href="#7-3-删除数据" class="headerlink" title="7.3  删除数据"></a>7.3  删除数据</h3><ul><li><strong>删除数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件] ;<br></code></pre></td></tr></table></figure><ul><li><strong>练习</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除张三记录</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><br><span class="hljs-comment">-- 删除stu表中所有的数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><h2 id="8，DQL"><a href="#8，DQL" class="headerlink" title="8，DQL"></a>8，DQL</h2><p>下面是黑马程序员展示试题库数据的页面</p><p><img src="/images/image-20210722215838144.png"> </p><p>页面上展示的数据肯定是在数据库中的试题库表中进行存储，而我们需要将数据库中的数据查询出来并展示在页面给用户看。上图中的是最基本的查询效果，那么数据库其实是很多的，不可能在将所有的数据在一页进行全部展示，而页面上会有分页展示的效果，如下：</p><p><img src="/images/image-20210722220139174.png"> </p><p>当然上图中的难度字段当我们点击也可以实现排序查询操作。从这个例子我们就可以看出，对于数据库的查询时灵活多变的，需要根据具体的需求来实现，而数据库查询操作也是最重要的操作，所以此部分需要大家重点掌握。</p><p>接下来我们先介绍查询的完整语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    字段列表<br><span class="hljs-keyword">FROM</span> <br>    表名列表 <br><span class="hljs-keyword">WHERE</span> <br>    条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    分组字段<br><span class="hljs-keyword">HAVING</span><br>    分组后条件<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    排序字段<br>LIMIT<br>    分页限定<br></code></pre></td></tr></table></figure><p>为了给大家演示查询的语句，我们需要先准备表及一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除stu表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> stu;<br><br><br><span class="hljs-comment">-- 创建stu表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stu (<br> id <span class="hljs-type">int</span>, <span class="hljs-comment">-- 编号</span><br> name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>), <span class="hljs-comment">-- 姓名</span><br> age <span class="hljs-type">int</span>, <span class="hljs-comment">-- 年龄</span><br> sex <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>), <span class="hljs-comment">-- 性别</span><br> address <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>), <span class="hljs-comment">-- 地址</span><br> math <span class="hljs-keyword">double</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">-- 数学成绩</span><br> english <span class="hljs-keyword">double</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">-- 英语成绩</span><br> hire_date <span class="hljs-type">date</span> <span class="hljs-comment">-- 入学时间</span><br>);<br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu(id,NAME,age,sex,address,math,english,hire_date) <br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;马运&#x27;</span>,<span class="hljs-number">55</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;杭州&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">78</span>,<span class="hljs-string">&#x27;1995-09-01&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;马花疼&#x27;</span>,<span class="hljs-number">45</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>,<span class="hljs-number">98</span>,<span class="hljs-number">87</span>,<span class="hljs-string">&#x27;1998-09-01&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;马斯克&#x27;</span>,<span class="hljs-number">55</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;香港&#x27;</span>,<span class="hljs-number">56</span>,<span class="hljs-number">77</span>,<span class="hljs-string">&#x27;1999-09-02&#x27;</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;柳白&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;湖南&#x27;</span>,<span class="hljs-number">76</span>,<span class="hljs-number">65</span>,<span class="hljs-string">&#x27;1997-09-05&#x27;</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;柳青&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;湖南&#x27;</span>,<span class="hljs-number">86</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;1998-09-01&#x27;</span>),<br>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;刘德花&#x27;</span>,<span class="hljs-number">57</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;香港&#x27;</span>,<span class="hljs-number">99</span>,<span class="hljs-number">99</span>,<span class="hljs-string">&#x27;1998-09-01&#x27;</span>),<br>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;张学右&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;香港&#x27;</span>,<span class="hljs-number">99</span>,<span class="hljs-number">99</span>,<span class="hljs-string">&#x27;1998-09-01&#x27;</span>),<br>(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;德玛西亚&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;南京&#x27;</span>,<span class="hljs-number">56</span>,<span class="hljs-number">65</span>,<span class="hljs-string">&#x27;1994-09-02&#x27;</span>);<br></code></pre></td></tr></table></figure><p>接下来咱们从最基本的查询语句开始学起。</p><h3 id="8-1-基础查询"><a href="#8-1-基础查询" class="headerlink" title="8.1  基础查询"></a>8.1  基础查询</h3><h4 id="8-1-1-语法"><a href="#8-1-1-语法" class="headerlink" title="8.1.1  语法"></a>8.1.1  语法</h4><ul><li><strong>查询多个字段</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名; <span class="hljs-comment">-- 查询所有数据</span><br></code></pre></td></tr></table></figure><ul><li><strong>去除重复记录</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><ul><li><strong>起别名</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">AS</span>: <span class="hljs-keyword">AS</span> 也可以省略<br></code></pre></td></tr></table></figure><h4 id="8-1-2-练习"><a href="#8-1-2-练习" class="headerlink" title="8.1.2  练习"></a>8.1.2  练习</h4><ul><li><p>查询name、age两列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,age <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询所有列的数据，列名的列表可以使用*替代</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><p>上面语句中的*不建议大家使用，因为在这写*不方便我们阅读sql语句。我们写字段列表的话，可以添加注释对每一个字段进行说明</p><p><img src="/images/image-20210722221534870.png"> </p><p>而在上课期间为了简约课程的时间，老师很多地方都会写*。</p></li><li><p>查询地址信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> address <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><p>执行上面语句结果如下：</p><p><img src="/images/image-20210722221756380.png"> </p><p>从上面的结果我们可以看到有重复的数据，我们也可以使用 <code>distinct</code> 关键字去重重复数据。</p></li><li><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> address <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询姓名、数学成绩、英语成绩。并通过as给math和english起别名（as关键字可以省略）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,math <span class="hljs-keyword">as</span> 数学成绩,english <span class="hljs-keyword">as</span> 英文成绩 <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> name,math 数学成绩,english 英文成绩 <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-2-条件查询"><a href="#8-2-条件查询" class="headerlink" title="8.2  条件查询"></a>8.2  条件查询</h3><h4 id="8-2-1-语法"><a href="#8-2-1-语法" class="headerlink" title="8.2.1  语法"></a>8.2.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件列表;<br></code></pre></td></tr></table></figure><ul><li><strong>条件</strong></li></ul><p>条件列表可以使用以下运算符</p><p><img src="/images/image-20210722190508272.png"> </p><h4 id="8-2-2-条件查询练习"><a href="#8-2-2-条件查询练习" class="headerlink" title="8.2.2  条件查询练习"></a>8.2.2  条件查询练习</h4><ul><li><p>查询年龄大于20岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询年龄大于等于20岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20</span> <span class="hljs-operator">&amp;&amp;</span>  age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">30</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span>  age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><blockquote><p>上面语句中 &amp;&amp;  和  and  都表示并且的意思。建议使用 and 。</p><p>也可以使用  between … and 来实现上面需求</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询入学日期在’1998-09-01’ 到 ‘1999-09-01’  之间的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> hire_date <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;1998-09-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1999-09-01&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询年龄等于18岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询年龄不等于18岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">!=</span> <span class="hljs-number">18</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询年龄等于18岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">or</span> age <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">or</span> age <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-keyword">in</span> (<span class="hljs-number">18</span>,<span class="hljs-number">20</span> ,<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure></li><li><p>查询英语成绩为 null的学员信息</p><p>null值的比较不能使用 &#x3D;  或者 !&#x3D; 。需要使用 is  或者 is not</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> english <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">-- 这个语句是不行的</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> english <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> english <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="8-2-3-模糊查询练习"><a href="#8-2-3-模糊查询练习" class="headerlink" title="8.2.3  模糊查询练习"></a>8.2.3  模糊查询练习</h4><blockquote><p>模糊查询使用like关键字，可以使用通配符进行占位:</p><p>（1）_ : 代表单个任意字符</p><p>（2）% : 代表任意个数字符</p></blockquote><ul><li><p>查询姓’马’的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;马%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询第二个字是’花’的学员信息  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_花%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询名字中包含 ‘德’ 的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%德%&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-3-排序查询"><a href="#8-3-排序查询" class="headerlink" title="8.3  排序查询"></a>8.3  排序查询</h3><h4 id="8-3-1-语法"><a href="#8-3-1-语法" class="headerlink" title="8.3.1  语法"></a>8.3.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序字段名<span class="hljs-number">1</span> [排序方式<span class="hljs-number">1</span>],排序字段名<span class="hljs-number">2</span> [排序方式<span class="hljs-number">2</span>] …;<br></code></pre></td></tr></table></figure><p>上述语句中的排序方式有两种，分别是：</p><ul><li>ASC ： 升序排列 <strong>（默认值）</strong></li><li>DESC ： 降序排列</li></ul><blockquote><p>注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</p></blockquote><h4 id="8-3-2-练习"><a href="#8-3-2-练习" class="headerlink" title="8.3.2  练习"></a>8.3.2  练习</h4><ul><li><p>查询学生信息，按照年龄升序排列 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age ;<br></code></pre></td></tr></table></figure></li><li><p>查询学生信息，按照数学成绩降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> math <span class="hljs-keyword">desc</span> ;<br></code></pre></td></tr></table></figure></li><li><p>查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> math <span class="hljs-keyword">desc</span> , english <span class="hljs-keyword">asc</span> ;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-4-聚合函数"><a href="#8-4-聚合函数" class="headerlink" title="8.4  聚合函数"></a>8.4  聚合函数</h3><h4 id="8-4-1-概念"><a href="#8-4-1-概念" class="headerlink" title="8.4.1  概念"></a>8.4.1  概念</h4><p> &#x3D;&#x3D;将一列数据作为一个整体，进行纵向计算。&#x3D;&#x3D;</p><p>如何理解呢？假设有如下表</p><p><img src="/images/image-20210722194410628.png"> </p><p>现有一需求让我们求表中所有数据的数学成绩的总和。这就是对math字段进行纵向求和。</p><h4 id="8-4-2-聚合函数分类"><a href="#8-4-2-聚合函数分类" class="headerlink" title="8.4.2  聚合函数分类"></a>8.4.2  聚合函数分类</h4><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>count(列名)</td><td>统计数量（一般选用不为null的列）</td></tr><tr><td>max(列名)</td><td>最大值</td></tr><tr><td>min(列名)</td><td>最小值</td></tr><tr><td>sum(列名)</td><td>求和</td></tr><tr><td>avg(列名)</td><td>平均值</td></tr></tbody></table><h4 id="8-4-3-聚合函数语法"><a href="#8-4-3-聚合函数语法" class="headerlink" title="8.4.3  聚合函数语法"></a>8.4.3  聚合函数语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 聚合函数名(列名) <span class="hljs-keyword">FROM</span> 表;<br></code></pre></td></tr></table></figure><blockquote><p>注意：null 值不参与所有聚合函数运算</p></blockquote><h4 id="8-4-4-练习"><a href="#8-4-4-练习" class="headerlink" title="8.4.4  练习"></a>8.4.4  练习</h4><ul><li><p>统计班级一共有多少个学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(id) <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(english) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><p>上面语句根据某个字段进行统计，如果该字段某一行的值为null的话，将不会被统计。所以可以在count(*) 来实现。* 表示所有字段数据，一行中也不可能所有的数据都为null，所以建议使用 count(*)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询数学成绩的最高分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(math) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询数学成绩的最低分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(math) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询数学成绩的总分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(math) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询数学成绩的平均分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(math) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li><li><p>查询英语成绩的最低分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(english) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-5-分组查询"><a href="#8-5-分组查询" class="headerlink" title="8.5  分组查询"></a>8.5  分组查询</h3><h4 id="8-5-1-语法"><a href="#8-5-1-语法" class="headerlink" title="8.5.1  语法"></a>8.5.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 分组前条件限定] <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段名 [<span class="hljs-keyword">HAVING</span> 分组后条件过滤];<br></code></pre></td></tr></table></figure><blockquote><p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p></blockquote><h4 id="8-5-2-练习"><a href="#8-5-2-练习" class="headerlink" title="8.5.2  练习"></a>8.5.2  练习</h4><ul><li><p>查询男同学和女同学各自的数学平均分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sex, <span class="hljs-built_in">avg</span>(math) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex;<br></code></pre></td></tr></table></figure><blockquote><p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, sex, <span class="hljs-built_in">avg</span>(math) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex;  <span class="hljs-comment">-- 这里查询name字段就没有任何意义</span><br></code></pre></td></tr></table></figure></li><li><p>查询男同学和女同学各自的数学平均分，以及各自人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sex, <span class="hljs-built_in">avg</span>(math),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex;<br></code></pre></td></tr></table></figure></li><li><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sex, <span class="hljs-built_in">avg</span>(math),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> math <span class="hljs-operator">&gt;</span> <span class="hljs-number">70</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex;<br></code></pre></td></tr></table></figure></li><li><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2个的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sex, <span class="hljs-built_in">avg</span>(math),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> math <span class="hljs-operator">&gt;</span> <span class="hljs-number">70</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)  <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li></ul><p><strong>where 和 having 区别：</strong></p><ul><li><p>执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。</p></li><li><p>可判断的条件不一样：where 不能对聚合函数进行判断，having 可以。</p></li></ul><h3 id="8-6-分页查询"><a href="#8-6-分页查询" class="headerlink" title="8.6  分页查询"></a>8.6  分页查询</h3><p>如下图所示，大家在很多网站都见过类似的效果，如京东、百度、淘宝等。分页查询是将数据一页一页的展示给用户看，用户也可以通过点击查看下一页的数据。</p><p><img src="/images/image-20210722230330366.png"> </p><p>接下来我们先说分页查询的语法。</p><h4 id="8-6-1-语法"><a href="#8-6-1-语法" class="headerlink" title="8.6.1  语法"></a>8.6.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 LIMIT  起始索引 , 查询条目数;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 上述语句中的起始索引是从0开始</p></blockquote><h4 id="8-6-2-练习"><a href="#8-6-2-练习" class="headerlink" title="8.6.2  练习"></a>8.6.2  练习</h4><ul><li><p>从0开始查询，查询3条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu limit <span class="hljs-number">0</span> , <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>每页显示3条数据，查询第1页数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu limit <span class="hljs-number">0</span> , <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>每页显示3条数据，查询第2页数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu limit <span class="hljs-number">3</span> , <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>每页显示3条数据，查询第3页数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu limit <span class="hljs-number">6</span> , <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ul><p>从上面的练习推导出起始索引计算公式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">起始索引 <span class="hljs-operator">=</span> (当前页码 <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-operator">*</span> 每页显示的条数<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql安装</title>
    <link href="/2022/06/21/MySql%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/21/MySql%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="2-1-MySQL安装"><a href="#2-1-MySQL安装" class="headerlink" title="2.1  MySQL安装"></a>2.1  MySQL安装</h3><blockquote><p><strong>安装环境:Win10 64位</strong><br><strong>软件版本:MySQL 5.7.24 解压版</strong></p></blockquote><h4 id="2-1-1-下载"><a href="#2-1-1-下载" class="headerlink" title="2.1.1  下载"></a>2.1.1  下载</h4><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>点开上面的链接就能看到如下界面：</p><p><img src="/images/image-20210404200055449.png"></p><p>选择选择和自己<strong>系统位数</strong>相对应的版本点击右边的<code>Download</code>，此时会进到另一个页面，同样在接近页面底部的地方找到如下图所示的位置：</p><p><img src="/images/1556823-20181220194715840-436169502.png"></p><p>不用理会上面的登录和注册按钮，直接点击 <code>No thanks, just start my download.</code> 就可以下载。</p><p><img src="/images/image-20201109134805641.png"></p><h4 id="2-1-2-安装-解压"><a href="#2-1-2-安装-解压" class="headerlink" title="2.1.2  安装(解压)"></a>2.1.2  安装(解压)</h4><p>下载完成后我们得到的是一个压缩包，将其解压，我们就可以得到MySQL 5.7.24的软件本体了(就是一个文件夹)，我们可以把它放在你想安装的位置。</p><hr><p><img src="/images/image-20201109134948046.png"></p><h3 id="2-2-MySQL卸载"><a href="#2-2-MySQL卸载" class="headerlink" title="2.2  MySQL卸载"></a>2.2  MySQL卸载</h3><p>如果你想卸载MySQL，也很简单。</p><p>右键开始菜单，选择<code>命令提示符(管理员)</code>，打开黑框。</p><ol><li>敲入<code>net stop mysql</code>，回车。</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">net stop mysql<br></code></pre></td></tr></table></figure><p><img src="/images/1556823-20181220222924783-57600848.png"></p><ol start="2"><li>再敲入<code>mysqld -remove mysql</code>，回车。</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysqld -<span class="hljs-built_in">remove</span> mysql<br></code></pre></td></tr></table></figure><p><img src="/images/1556823-20181220223025128-587235464.png"></p><ol start="3"><li>最后删除MySQL目录及相关的环境变量。</li></ol><p><strong>至此，MySQL卸载完成！</strong></p><h3 id="2-3-MySQL配置"><a href="#2-3-MySQL配置" class="headerlink" title="2.3  MySQL配置"></a>2.3  MySQL配置</h3><h4 id="2-3-1-添加环境变量"><a href="#2-3-1-添加环境变量" class="headerlink" title="2.3.1  添加环境变量"></a>2.3.1  添加环境变量</h4><blockquote><p>环境变量里面有很多选项，这里我们只用到<code>Path</code>这个参数。为什么在初始化的开始要添加环境变量呢？<br>在黑框(即CMD)中输入一个可执行程序的名字，Windows会先在环境变量中的<code>Path</code>所指的路径中寻找一遍，如果找到了就直接执行，没找到就在当前工作目录找，如果还没找到，就报错。我们添加环境变量的目的就是能够在任意一个黑框直接调用MySQL中的相关程序而不用总是修改工作目录，大大简化了操作。</p></blockquote><p>右键<code>此电脑</code>→<code>属性</code>，点击<code>高级系统设置</code></p><p><img src="/images/1556823-20181220220242472-524708778.png"></p><p>点击<code>环境变量</code></p><p><img src="/images/1556823-20181220220359609-736422950.png"></p><p>在<code>系统变量</code>中新建MYSQL_HOME</p><p><img src="/images/image-20201109140222488.png"></p><p>在<code>系统变量</code>中找到并<strong>双击</strong><code>Path</code></p><p><img src="/images/1556823-20181220220551145-1198958872.png"></p><p>点击<code>新建</code></p><p><img src="/images/image-20201109135248104.png"></p><p>最后点击确定。</p><p><strong>如何验证是否添加成功？</strong></p><p>右键开始菜单(就是屏幕左下角)，选择<code>命令提示符(管理员)</code>，打开黑框，敲入<code>mysql</code>，回车。<br>如果提示<code>Can&#39;t connect to MySQL server on &#39;localhost&#39;</code>则证明添加成功；<br>如果提示<code>mysql不是内部或外部命令，也不是可运行的程序或批处理文件</code>则表示添加添加失败，请重新检查步骤并重试。</p><h4 id="2-3-2-新建配置文件"><a href="#2-3-2-新建配置文件" class="headerlink" title="2.3.2  新建配置文件"></a>2.3.2  新建配置文件</h4><p>新建一个文本文件，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=<span class="hljs-string">utf8</span><br><br><span class="hljs-attr">[mysqld]</span><br><span class="hljs-attr">character-set-server</span>=<span class="hljs-string">utf8</span><br><span class="hljs-attr">default-storage-engine</span>=<span class="hljs-string">INNODB</span><br><span class="hljs-attr">sql_mode</span>=<span class="hljs-string">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></code></pre></td></tr></table></figure><p>把上面的文本文件另存为，在保存类型里选<code>所有文件 (*.*)</code>，文件名叫<code>my.ini</code>，存放的路径为MySQL的<code>根目录</code>(例如我的是<code>D:\software\mysql-5.7.24-winx64</code>,根据自己的MySQL目录位置修改)。</p><p><img src="/images/image-20201109142704951.png"></p><p><img src="/images/image-20201109142737584.png"></p><p>上面代码意思就是配置数据库的默认编码集为utf-8和默认存储引擎为INNODB。</p><h4 id="2-3-3-初始化MySQL"><a href="#2-3-3-初始化MySQL" class="headerlink" title="2.3.3  初始化MySQL"></a>2.3.3  初始化MySQL</h4><p>在刚才的黑框中敲入<code>mysqld --initialize-insecure</code>，回车，稍微等待一会，如果出现没有出现报错信息(如下图)则证明data目录初始化没有问题，此时再查看MySQL目录下已经有data目录生成。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mysqld <span class="hljs-comment">--initialize-insecure</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20201109140955772.png"></p><p>tips：如果出现如下错误</p><p><img src="/images/image-20201109135848054.png"></p><p>是由于权限不足导致的，去<code>C:\Windows\System32</code> 下以管理员方式运行 cmd.exe</p><p><img src="/images/image-20201109140423691.png"></p><p><img src="/images/image-20201109140001186.png"></p><h4 id="2-3-4-注册MySQL服务"><a href="#2-3-4-注册MySQL服务" class="headerlink" title="2.3.4  注册MySQL服务"></a>2.3.4  注册MySQL服务</h4><p>在黑框里敲入<code>mysqld -install</code>，回车。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mysqld -<span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20201109141325810.png"></p><p>现在你的计算机上已经安装好了MySQL服务了。</p><p>MySQL服务器</p><h4 id="2-3-5-启动MySQL服务"><a href="#2-3-5-启动MySQL服务" class="headerlink" title="2.3.5  启动MySQL服务"></a>2.3.5  启动MySQL服务</h4><p>在黑框里敲入<code>net start mysql</code>，回车。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">net start mysql  <span class="hljs-comment">// 启动mysql服务</span><br>    <br>net stop mysql  <span class="hljs-comment">// 停止mysql服务</span><br></code></pre></td></tr></table></figure><p><img src="/images/1556823-20181221093036851-1317238155.png"></p><h4 id="2-3-6-修改默认账户密码"><a href="#2-3-6-修改默认账户密码" class="headerlink" title="2.3.6  修改默认账户密码"></a>2.3.6  修改默认账户密码</h4><p>在黑框里敲入<code>mysqladmin -u root password 1234</code>，这里的<code>1234</code>就是指默认管理员(即root账户)的密码，可以自行修改成你喜欢的。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysqladmin</span> -u root password <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p><img src="/images/1556823-20181221093251250-819416425.png"></p><p><strong>至此，MySQL 5.7 解压版安装完毕！</strong></p><h3 id="2-4-MySQL登陆和退出"><a href="#2-4-MySQL登陆和退出" class="headerlink" title="2.4  MySQL登陆和退出"></a>2.4  MySQL登陆和退出</h3><h4 id="2-4-1-登陆"><a href="#2-4-1-登陆" class="headerlink" title="2.4.1  登陆"></a>2.4.1  登陆</h4><p>右键开始菜单，选择<code>命令提示符</code>，打开黑框。<br>在黑框中输入，<code>mysql -uroot -p1234</code>，回车，出现下图且左下角为<code>mysql&gt;</code>，则登录成功。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysql</span> -uroot -p1234<br></code></pre></td></tr></table></figure><p><img src="/images/1556823-20181220222422178-61579658.png"></p><p><strong>到这里你就可以开始你的MySQL之旅了！</strong></p><p>登陆参数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认<span class="hljs-number">127.0.0.1</span>) -P端口号(默认<span class="hljs-number">3306</span>)<br></code></pre></td></tr></table></figure><h4 id="2-4-2-退出"><a href="#2-4-2-退出" class="headerlink" title="2.4.2  退出"></a>2.4.2  退出</h4><p>退出mysql：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br>quit<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL SQL高级</title>
    <link href="/2022/06/21/MySql%20sql%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/06/21/MySql%20sql%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql高级"><a href="#mysql高级" class="headerlink" title="mysql高级"></a>mysql高级</h2><p><strong>今日目标</strong></p><blockquote><ul><li><p>掌握约束的使用</p></li><li><p>掌握表关系及建表原则</p></li><li><p>重点掌握多表查询操作</p></li><li><p>掌握事务操作</p></li></ul></blockquote><h2 id="1，约束"><a href="#1，约束" class="headerlink" title="1，约束"></a>1，约束</h2><p><img src="/images/image-20210724104749122.png"> </p><p>上面表中可以看到表中数据存在一些问题：</p><ul><li><p>id 列一般是用标示数据的唯一性的，而上述表中的id为1的有三条数据，并且 <code>马花疼</code> 没有id进行标示</p></li><li><p><code>柳白</code> 这条数据的age列的数据是3000，而人也不可能活到3000岁</p></li><li><p><code>马运</code>  这条数据的math数学成绩是-5，而数学学得再不好也不可能出现负分</p></li><li><p><code>柳青</code> 这条数据的english列（英文成绩）值为null，而成绩即使没考也得是0分</p></li></ul><p>针对上述数据问题，我们就可以从数据库层面在添加数据的时候进行限制，这个就是约束。</p><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1  概念"></a>1.1  概念</h3><ul><li><p>约束是作用于表中列上的规则，用于限制加入表的数据</p><p>例如：我们可以给id列加约束，让其值不能重复，不能为null值。</p></li><li><p>约束的存在保证了数据库中数据的正确性、有效性和完整性</p><p>添加约束可以在添加数据的时候就限制不正确的数据，年龄是3000，数学成绩是-5分这样无效的数据，继而保障数据的完整性。</p></li></ul><h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2  分类"></a>1.2  分类</h3><ul><li><p><strong>非空约束： 关键字是 NOT NULL</strong></p><p>保证列中所有的数据不能有null值。</p><p>例如：id列在添加 <code>马花疼</code> 这条数据时就不能添加成功。</p></li><li><p><strong>唯一约束：关键字是  UNIQUE</strong></p><p>保证列中所有数据各不相同。</p><p>例如：id列中三条数据的值都是1，这样的数据在添加时是绝对不允许的。</p></li><li><p><strong>主键约束： 关键字是  PRIMARY KEY</strong></p><p>主键是一行数据的唯一标识，要求非空且唯一。一般我们都会给没张表添加一个主键列用来唯一标识数据。</p><p>例如：上图表中id就可以作为主键，来标识每条数据。那么这样就要求数据中id的值不能重复，不能为null值。</p></li><li><p><strong>检查约束： 关键字是  CHECK</strong> </p><p>保证列中的值满足某一条件。</p><p>例如：我们可以给age列添加一个范围，最低年龄可以设置为1，最大年龄就可以设置为300，这样的数据才更合理些。</p><blockquote><p>注意：MySQL不支持检查约束。</p><p>这样是不是就没办法保证年龄在指定的范围内了？从数据库层面不能保证，以后可以在java代码中进行限制，一样也可以实现要求。</p></blockquote></li><li><p><strong>默认约束： 关键字是   DEFAULT</strong></p><p>保存数据时，未指定值则采用默认值。</p><p>例如：我们在给english列添加该约束，指定默认值是0，这样在添加数据时没有指定具体值时就会采用默认给定的0。</p></li><li><p><strong>外键约束： 关键字是  FOREIGN KEY</strong></p><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p><p>外键约束现在可能还不太好理解，后面我们会重点进行讲解。</p></li></ul><h3 id="1-3-非空约束"><a href="#1-3-非空约束" class="headerlink" title="1.3  非空约束"></a>1.3  非空约束</h3><ul><li><p>概念</p><p>非空约束用于保证列中所有数据不能有NULL值</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表时添加非空约束</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   …<br>); <br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建完表后添加非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 数据类型;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-4-唯一约束"><a href="#1-4-唯一约束" class="headerlink" title="1.4  唯一约束"></a>1.4  唯一约束</h3><ul><li><p>概念</p><p>唯一约束用于保证列中所有数据各不相同</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表时添加唯一约束</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型 <span class="hljs-keyword">UNIQUE</span> [AUTO_INCREMENT],<br>   <span class="hljs-comment">-- AUTO_INCREMENT: 当不指定值时自动增长</span><br>   …<br>); <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型,<br>   …<br>   [<span class="hljs-keyword">CONSTRAINT</span>] [约束名称] <span class="hljs-keyword">UNIQUE</span>(列名)<br>); <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建完表后添加唯一约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="hljs-keyword">UNIQUE</span>;<br></code></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> INDEX 字段名;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-5-主键约束"><a href="#1-5-主键约束" class="headerlink" title="1.5  主键约束"></a>1.5  主键约束</h3><ul><li><p>概念</p><p>主键是一行数据的唯一标识，要求非空且唯一</p><p>一张表只能有一个主键</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表时添加主键约束</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型 <span class="hljs-keyword">PRIMARY</span> KEY [AUTO_INCREMENT],<br>   …<br>); <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型,<br>   [<span class="hljs-keyword">CONSTRAINT</span>] [约束名称] <span class="hljs-keyword">PRIMARY</span> KEY(列名)<br>); <br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建完表后添加主键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(字段名);<br></code></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-6-默认约束"><a href="#1-6-默认约束" class="headerlink" title="1.6  默认约束"></a>1.6  默认约束</h3><ul><li><p>概念</p><p>保存数据时，未指定值则采用默认值</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表时添加默认约束</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型 <span class="hljs-keyword">DEFAULT</span> 默认值,<br>   …<br>); <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建完表后添加默认约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ALTER</span> 列名 <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> 默认值;<br></code></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ALTER</span> 列名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-7-约束练习"><a href="#1-7-约束练习" class="headerlink" title="1.7  约束练习"></a>1.7  约束练习</h3><p><strong>根据需求，为表添加合适的约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp (<br>id <span class="hljs-type">INT</span>,  <span class="hljs-comment">-- 员工id，主键且自增长</span><br>    ename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>), <span class="hljs-comment">-- 员工姓名，非空且唯一</span><br>    joindate <span class="hljs-type">DATE</span>,  <span class="hljs-comment">-- 入职日期，非空</span><br>    salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),  <span class="hljs-comment">-- 工资，非空</span><br>    bonus <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">-- 奖金，如果没有将近默认为0</span><br>);<br></code></pre></td></tr></table></figure><p>上面一定给出了具体的要求，我们可以根据要求创建这张表，并为每一列添加对应的约束。建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> emp;<br><br><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">-- 员工id，主键且自增长</span><br>  ename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">-- 员工姓名，非空并且唯一</span><br>  joindate <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> , <span class="hljs-comment">-- 入职日期，非空</span><br>  salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> , <span class="hljs-comment">-- 工资，非空</span><br>  bonus <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- 奖金，如果没有奖金默认为0</span><br>);<br></code></pre></td></tr></table></figure><p>通过上面语句可以创建带有约束的 <code>emp</code> 表，约束能不能发挥作用呢。接下来我们一一进行验证，先添加一条没有问题的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>验证主键约束，非空且唯一</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210724114548170.png"> </p><p>从上面的结果可以看到，字段 <code>id</code> 不能为null。那我们重新添加一条数据，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210724114805350.png"> </p><p>从上面结果可以看到，1这个值重复了。所以主键约束是用来限制数据非空且唯一的。那我们再添加一条符合要求的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210724115024106.png"> </p><ul><li><strong>验证非空约束</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210724115149415.png"> </p><p>从上面结果可以看到，<code>ename</code> 字段的非空约束生效了。</p><ul><li><strong>验证唯一约束</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210724115336916.png"> </p><p>从上面结果可以看到，<code>ename</code> 字段的唯一约束生效了。</p><ul><li><strong>验证默认约束</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary) <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>);<br></code></pre></td></tr></table></figure><p>执行完上面语句后查询表中数据，如下图可以看到王五这条数据的bonus列就有了默认值0。</p><p><img src="/images/image-20210724115547951.png"> </p><p>&#x3D;&#x3D;注意：默认约束只有在不给值时才会采用默认值。如果给了null，那值就是null值。&#x3D;&#x3D;</p><p>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>执行完上面语句后查询表中数据，如下图可以看到赵六这条数据的bonus列的值是null。</p><p><img src="/images/image-20210724115826516.png"> </p><ul><li><strong>验证自动增长： auto_increment  当列是数字类型 并且唯一约束</strong></li></ul><p>重新创建 <code>emp</code> 表，并给id列添加自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment, <span class="hljs-comment">-- 员工id，主键且自增长</span><br>  ename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">-- 员工姓名，非空并且唯一</span><br>  joindate <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> , <span class="hljs-comment">-- 入职日期，非空</span><br>  salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> , <span class="hljs-comment">-- 工资，非空</span><br>  bonus <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- 奖金，如果没有奖金默认为0</span><br>);<br></code></pre></td></tr></table></figure><p>接下来给emp添加数据，分别验证不给id列添加值以及给id列添加null值，id列的值会不会自动增长：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;赵六2&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;赵六3&#x27;</span>,<span class="hljs-string">&#x27;1999-11-11&#x27;</span>,<span class="hljs-number">8800</span>,<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><h3 id="1-8-外键约束"><a href="#1-8-外键约束" class="headerlink" title="1.8  外键约束"></a>1.8  外键约束</h3><h4 id="1-8-1-概述"><a href="#1-8-1-概述" class="headerlink" title="1.8.1  概述"></a>1.8.1  概述</h4><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p><p>如何理解上面的概念呢？如下图有两张表，员工表和部门表：</p><p><img src="/images/image-20210724120904180.png"> </p><p>员工表中的dep_id字段是部门表的id字段关联，也就是说1号学生张三属于1号部门研发部的员工。现在我要删除1号部门，就会出现错误的数据（员工表中属于1号部门的数据）。而我们上面说的两张表的关系只是我们认为它们有关系，此时需要通过外键让这两张表产生数据库层面的关系，这样你要删除部门表中的1号部门的数据将无法删除。</p><h4 id="1-8-2-语法"><a href="#1-8-2-语法" class="headerlink" title="1.8.2  语法"></a>1.8.2  语法</h4><ul><li>添加外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表时添加外键约束</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>   列名 数据类型,<br>   …<br>   [<span class="hljs-keyword">CONSTRAINT</span>] [外键名称] <span class="hljs-keyword">FOREIGN</span> KEY(外键列名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名) <br>); <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建完表后添加外键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段名称) <span class="hljs-keyword">REFERENCES</span> 主表名称(主表列名称);<br></code></pre></td></tr></table></figure><ul><li>删除外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY 外键名称;<br></code></pre></td></tr></table></figure><h4 id="1-8-3-练习"><a href="#1-8-3-练习" class="headerlink" title="1.8.3  练习"></a>1.8.3  练习</h4><p>根据上述语法创建员工表和部门表，并添加上外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> emp;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> dept;<br><br><span class="hljs-comment">-- 部门表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dept(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>dep_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>addr <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><span class="hljs-comment">-- 员工表 </span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>,<br>dep_id <span class="hljs-type">int</span>,<br><br><span class="hljs-comment">-- 添加外键 dep_id,关联 dept 表的id主键</span><br><span class="hljs-keyword">CONSTRAINT</span> fk_emp_dept <span class="hljs-keyword">FOREIGN</span> KEY(dep_id) <span class="hljs-keyword">REFERENCES</span> dept(id)<br>);<br></code></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加 2 个部门</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(dep_name,addr) <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;研发部&#x27;</span>,<span class="hljs-string">&#x27;广州&#x27;</span>),(<span class="hljs-string">&#x27;销售部&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>);<br><br><span class="hljs-comment">-- 添加员工,dep_id 表示员工所在的部门</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (NAME, age, dep_id) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">2</span>),<br>(<span class="hljs-string">&#x27;孙七&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">2</span>),<br>(<span class="hljs-string">&#x27;周八&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>此时删除 <code>研发部</code> 这条数据，会发现无法删除。</p><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">drop</span> <span class="hljs-keyword">FOREIGN</span> key fk_emp_dept;<br></code></pre></td></tr></table></figure><p>重新添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">CONSTRAINT</span> fk_emp_dept <span class="hljs-keyword">FOREIGN</span> key(dep_id) <span class="hljs-keyword">REFERENCES</span> dept(id);<br></code></pre></td></tr></table></figure><h2 id="2，数据库设计"><a href="#2，数据库设计" class="headerlink" title="2，数据库设计"></a>2，数据库设计</h2><h3 id="2-1-数据库设计简介"><a href="#2-1-数据库设计简介" class="headerlink" title="2.1  数据库设计简介"></a>2.1  数据库设计简介</h3><ul><li><p>软件的研发步骤</p><p><img src="/images/image-20210724130925801.png"> </p><p>数据库设计概念</p><ul><li>数据库设计就是根据业务系统的具体需求，结合我们所选用的DBMS，为这个业务系统构造出最优的数据存储模型。</li><li>建立数据库中的&#x3D;&#x3D;表结构&#x3D;&#x3D;以及&#x3D;&#x3D;表与表之间的关联关系&#x3D;&#x3D;的过程。</li><li>有哪些表？表里有哪些字段？表和表之间有什么关系？</li></ul></li><li><p>数据库设计的步骤</p><ul><li><p>需求分析（数据是什么? 数据具有哪些属性? 数据与属性的特点是什么）</p></li><li><p>逻辑分析（通过ER图对数据库进行逻辑建模，不需要考虑我们所选用的数据库管理系统）</p><p>如下图就是ER(Entity&#x2F;Relation)图：</p><p><img src="/images/image-20210724131210759.png"> </p><p>物理设计（根据数据库自身的特点把逻辑设计转换为物理设计）</p></li><li><p>维护设计（1.对新的需求进行建表；2.表优化）</p></li></ul></li><li><p>表关系</p><ul><li><p>一对一</p><ul><li><p>如：用户 和 用户详情</p></li><li><p>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</p><p><img src="/images/image-20210724133015129.png"></p></li></ul><p>上图左边是用户的详细信息，而我们真正在展示用户信息时最长用的则是上图右边红框所示，所以我们会将详细信息查分成两周那个表。</p></li><li><p>一对多</p><ul><li><p>如：部门 和 员工</p></li><li><p>一个部门对应多个员工，一个员工对应一个部门。如下图：</p><p><img src="/images/image-20210724133443094.png"> </p><p>多对多</p></li><li><p>如：商品 和 订单</p></li><li><p>一个商品对应多个订单，一个订单包含多个商品。如下图：</p><p><img src="/images/image-20210724133704682.png"></p></li></ul></li></ul></li></ul><h3 id="2-2-表关系-一对多"><a href="#2-2-表关系-一对多" class="headerlink" title="2.2  表关系(一对多)"></a>2.2  表关系(一对多)</h3><ul><li><p>一对多</p><ul><li>如：部门 和 员工</li><li>一个部门对应多个员工，一个员工对应一个部门。</li></ul></li><li><p>实现方式</p><p>&#x3D;&#x3D;在多的一方建立外键，指向一的一方的主键&#x3D;&#x3D;</p></li><li><p>案例</p><p>我们还是以 <code>员工表</code> 和 <code>部门表</code> 举例:</p><p><img src="/images/image-20210724134145803.png"> </p><p>经过分析发现，员工表属于多的一方，而部门表属于一的一方，此时我们会在员工表中添加一列（dep_id），指向于部门表的主键（id）：</p><p><img src="/images/image-20210724134318685.png"> </p><p>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_emp;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_dept;<br><br><span class="hljs-comment">-- 部门表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_dept(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>dep_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>addr <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><span class="hljs-comment">-- 员工表 </span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_emp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-type">int</span>,<br>dep_id <span class="hljs-type">int</span>,<br><br><span class="hljs-comment">-- 添加外键 dep_id,关联 dept 表的id主键</span><br><span class="hljs-keyword">CONSTRAINT</span> fk_emp_dept <span class="hljs-keyword">FOREIGN</span> KEY(dep_id) <span class="hljs-keyword">REFERENCES</span> tb_dept(id)<br>);<br></code></pre></td></tr></table></figure><p>查看表结构模型图：</p><p><img src="/images/image-20210724140456921.png"> </p><h3 id="2-3-表关系-多对多"><a href="#2-3-表关系-多对多" class="headerlink" title="2.3  表关系(多对多)"></a>2.3  表关系(多对多)</h3></li><li><p>多对多</p><ul><li>如：商品 和 订单</li><li>一个商品对应多个订单，一个订单包含多个商品</li></ul></li><li><p>实现方式</p><p>&#x3D;&#x3D;建立第三张中间表，中间表至少包含两个外键，分别关联两方主键&#x3D;&#x3D;</p></li><li><p>案例</p><p>我们以 <code>订单表</code> 和 <code>商品表</code> 举例：</p><p><img src="/images/image-20210724134735939.png"> </p><p>经过分析发现，订单表和商品表都属于多的一方，此时需要创建一个中间表，在中间表中添加订单表的外键和商品表的外键指向两张表的主键：</p><p><img src="/images/image-20210724135054834.png"> </p><p>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_order_goods;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_order;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_goods;<br><br><span class="hljs-comment">-- 订单表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_order(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>payment <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>payment_type TINYINT,<br>status TINYINT<br>);<br><br><span class="hljs-comment">-- 商品表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_goods(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>title <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>price <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-comment">-- 订单商品中间表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_order_goods(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>order_id <span class="hljs-type">int</span>,<br>goods_id <span class="hljs-type">int</span>,<br>count <span class="hljs-type">int</span><br>);<br><br><span class="hljs-comment">-- 建完表后，添加外键</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_order_goods <span class="hljs-keyword">add</span> <span class="hljs-keyword">CONSTRAINT</span> fk_order_id <span class="hljs-keyword">FOREIGN</span> key(order_id) <span class="hljs-keyword">REFERENCES</span> tb_order(id);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_order_goods <span class="hljs-keyword">add</span> <span class="hljs-keyword">CONSTRAINT</span> fk_goods_id <span class="hljs-keyword">FOREIGN</span> key(goods_id) <span class="hljs-keyword">REFERENCES</span> tb_goods(id);<br></code></pre></td></tr></table></figure><p>查看表结构模型图：</p><p><img src="/images/image-20210724140307910.png"></p></li></ul><h3 id="2-4-表关系-一对一"><a href="#2-4-表关系-一对一" class="headerlink" title="2.4  表关系(一对一)"></a>2.4  表关系(一对一)</h3><ul><li><p>一对一</p><ul><li>如：用户 和 用户详情</li><li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li></ul></li><li><p>实现方式</p><p>&#x3D;&#x3D;在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)&#x3D;&#x3D;</p></li><li><p>案例</p><p>我们以 <code>用户表</code> 举例：</p><p><img src="/images/image-20210724135346913.png"> </p><p>而在真正使用过程中发现 id、photo、nickname、age、gender 字段比较常用，此时就可以将这张表查分成两张表。</p><p><img src="/images/image-20210724135649341.png"></p></li></ul><p>​</p><p>​建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user_desc (<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>city <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>edu <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>income <span class="hljs-type">int</span>,<br>status <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>des <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user (<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>photo <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>nickname <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>age <span class="hljs-type">int</span>,<br>gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>desc_id <span class="hljs-type">int</span> <span class="hljs-keyword">unique</span>,<br><span class="hljs-comment">-- 添加外键</span><br><span class="hljs-keyword">CONSTRAINT</span> fk_user_desc <span class="hljs-keyword">FOREIGN</span> KEY(desc_id) <span class="hljs-keyword">REFERENCES</span> tb_user_desc(id)<br>);<br></code></pre></td></tr></table></figure><p>​查看表结构模型图：</p><p><img src="/images/image-20210724141445785.png"> </p><h3 id="2-5-数据库设计案例"><a href="#2-5-数据库设计案例" class="headerlink" title="2.5  数据库设计案例"></a>2.5  数据库设计案例</h3><p>根据下图设计表及表和表之间的关系：</p><p><img src="/images/image-20210724141822204.png"> </p><p>经过分析，我们分为 <code>专辑表</code>  <code>曲目表</code>  <code>短评表</code>  <code>用户表</code>   4张表。</p><p><img src="/images/image-20210724141550446.png"> </p><p>一个专辑可以有多个曲目，一个曲目只能属于某一张专辑，所以专辑表和曲目表的关系是&#x3D;&#x3D;一对多&#x3D;&#x3D;。</p><p>一个专辑可以被多个用户进行评论，一个用户可以对多个专辑进行评论，所以专辑表和用户表的关系是 &#x3D;&#x3D;多对多&#x3D;&#x3D;。</p><p>一个用户可以发多个短评，一个短评只能是某一个人发的，所以用户表和短评表的关系是 &#x3D;&#x3D;一对多&#x3D;&#x3D;。</p><p><img src="/images/image-20210724142550839.png"> </p><h2 id="3，多表查询"><a href="#3，多表查询" class="headerlink" title="3，多表查询"></a>3，多表查询</h2><p>多表查询顾名思义就是从多张表中一次性的查询出我们想要的数据。我们通过具体的sql给他们演示，先准备环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> emp;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> dept;<br><br><br># 创建部门表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dept(<br>        did <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>        dname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>    );<br><br># 创建员工表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp (<br>        id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>        NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>        gender <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>), <span class="hljs-comment">-- 性别</span><br>        salary <span class="hljs-keyword">DOUBLE</span>, <span class="hljs-comment">-- 工资</span><br>        join_date <span class="hljs-type">DATE</span>, <span class="hljs-comment">-- 入职日期</span><br>        dep_id <span class="hljs-type">INT</span>,<br>        <span class="hljs-keyword">FOREIGN</span> KEY (dep_id) <span class="hljs-keyword">REFERENCES</span> dept(did) <span class="hljs-comment">-- 外键，关联部门表(部门表的主键)</span><br>    );<br><span class="hljs-comment">-- 添加部门数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept (dNAME) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;研发部&#x27;</span>),(<span class="hljs-string">&#x27;市场部&#x27;</span>),(<span class="hljs-string">&#x27;财务部&#x27;</span>),(<span class="hljs-string">&#x27;销售部&#x27;</span>);<br><span class="hljs-comment">-- 添加员工数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(NAME,gender,salary,join_date,dep_id) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">7200</span>,<span class="hljs-string">&#x27;2013-02-24&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">3600</span>,<span class="hljs-string">&#x27;2010-12-02&#x27;</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">9000</span>,<span class="hljs-string">&#x27;2008-08-08&#x27;</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-string">&#x27;白骨精&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">5000</span>,<span class="hljs-string">&#x27;2015-10-07&#x27;</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">4500</span>,<span class="hljs-string">&#x27;2011-03-14&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;小白龙&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">2500</span>,<span class="hljs-string">&#x27;2011-02-14&#x27;</span>,<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>执行下面的多表查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp , dept;  <span class="hljs-comment">-- 从emp和dept表中查询所有的字段数据</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/image-20210724173630506.png"> </p><p>从上面的结果我们看到有一些无效的数据，如 <code>孙悟空</code> 这个员工属于1号部门，但也同时关联的2、3、4号部门。所以我们要通过限制员工表中的 <code>dep_id</code> 字段的值和部门表 <code>did</code> 字段的值相等来消除这些无效的数据，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp , dept <span class="hljs-keyword">where</span> emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure><p>执行后结果如下：</p><p><img src="/images/image-20210724174212443.png"> </p><p>上面语句就是连接查询，那么多表查询都有哪些呢？</p><ul><li><p>连接查询</p><p><img src="/images/image-20210724174717647.png"> </p><ul><li>内连接查询 ：相当于查询AB交集数据</li><li>外连接查询<ul><li>左外连接查询 ：相当于查询A表所有数据和交集部门数据</li><li>右外连接查询 ： 相当于查询B表所有数据和交集部分数据</li></ul></li></ul></li><li><p>子查询</p></li></ul><h3 id="3-1-内连接查询"><a href="#3-1-内连接查询" class="headerlink" title="3.1  内连接查询"></a>3.1  内连接查询</h3><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 隐式内连接</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span>,表<span class="hljs-number">2</span>… <span class="hljs-keyword">WHERE</span> 条件;<br><br><span class="hljs-comment">-- 显示内连接</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> [<span class="hljs-keyword">INNER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件;<br></code></pre></td></tr></table></figure><blockquote><p>内连接相当于查询 A B 交集数据</p></blockquote><p><img src="/images/image-20210724174717647.png"> </p><ul><li><p>案例</p><ul><li><p>隐式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>emp,<br>dept<br><span class="hljs-keyword">WHERE</span><br>emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure><p>执行上述语句结果如下：</p><p><img src="/images/image-20210724175344508.png"> </p></li><li><p>查询 emp的 name， gender，dept表的dname</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>emp. NAME,<br>emp.gender,<br>dept.dname<br><span class="hljs-keyword">FROM</span><br>emp,<br>dept<br><span class="hljs-keyword">WHERE</span><br>emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure><p>执行语句结果如下：</p><p><img src="/images/image-20210724175518159.png"> </p><p>上面语句中使用表名指定字段所属有点麻烦，sql也支持给表指别名，上述语句可以改进为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>t1. NAME,<br>t1.gender,<br>t2.dname<br><span class="hljs-keyword">FROM</span><br>emp t1,<br>dept t2<br><span class="hljs-keyword">WHERE</span><br>t1.dep_id <span class="hljs-operator">=</span> t2.did;<br></code></pre></td></tr></table></figure></li><li><p>显式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.did;<br><span class="hljs-comment">-- 上面语句中的inner可以省略，可以书写为如下语句</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/image-20210724180103531.png"></p></li></ul></li></ul><h3 id="3-2-外连接查询"><a href="#3-2-外连接查询" class="headerlink" title="3.2  外连接查询"></a>3.2  外连接查询</h3><ul><li><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 左外连接</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">LEFT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件;<br><br><span class="hljs-comment">-- 右外连接</span><br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件;<br></code></pre></td></tr></table></figure><blockquote><p>左外连接：相当于查询A表所有数据和交集部分数据</p><p>右外连接：相当于查询B表所有数据和交集部分数据</p></blockquote><p><img src="/images/image-20210724174717647.png"> </p></li><li><p>案例</p><ul><li><p>查询emp表所有数据和对应的部门信息（左外连接）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure><p>执行语句结果如下：</p><p><img src="/images/image-20210724180542757.png"> </p><p>结果显示查询到了左表（emp）中所有的数据及两张表能关联的数据。</p></li><li><p>查询dept表所有数据和对应的员工信息（右外连接）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure><p>执行语句结果如下：</p><p><img src="/images/image-20210724180613494.png"> </p><p>结果显示查询到了右表（dept）中所有的数据及两张表能关联的数据。</p><p>要查询出部门表中所有的数据，也可以通过左外连接实现，只需要将两个表的位置进行互换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-3-子查询"><a href="#3-3-子查询" class="headerlink" title="3.3  子查询"></a>3.3  子查询</h3><ul><li><p>概念</p><p>&#x3D;&#x3D;查询中嵌套查询，称嵌套查询为子查询。&#x3D;&#x3D;</p><p>什么是查询中嵌套查询呢？我们通过一个例子来看：</p><p><strong>需求：查询工资高于猪八戒的员工信息。</strong></p><p>来实现这个需求，我们就可以通过二步实现，第一步：先查询出来 猪八戒的工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;猪八戒&#x27;</span><br></code></pre></td></tr></table></figure><p> 第二步：查询工资高于猪八戒的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">3600</span>;<br></code></pre></td></tr></table></figure><p>第二步中的3600可以通过第一步的sql查询出来，所以将3600用第一步的sql语句进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;猪八戒&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这就是查询语句中嵌套查询语句。</p></li><li><p>子查询根据查询结果不同，作用不同</p><ul><li>子查询语句结果是单行单列，子查询语句作为条件值，使用 &#x3D;  !&#x3D;  &gt;  &lt;  等进行条件判断</li><li>子查询语句结果是多行单列，子查询语句作为条件值，使用 in 等关键字进行条件判断</li><li>子查询语句结果是多行多列，子查询语句作为虚拟表</li></ul></li><li><p>案例</p><ul><li><p>查询 ‘财务部’ 和 ‘市场部’ 所有的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 &#x27;财务部&#x27; 或者 &#x27;市场部&#x27; 所有的员工的部门did</span><br><span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span> <span class="hljs-keyword">or</span> dname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;市场部&#x27;</span>;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dep_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span> <span class="hljs-keyword">or</span> dname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;市场部&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>查询入职日期是 ‘2011-11-11’ 之后的员工信息和部门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询入职日期是 &#x27;2011-11-11&#x27; 之后的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> join_date <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2011-11-11&#x27;</span> ;<br><span class="hljs-comment">-- 将上面语句的结果作为虚拟表和dept表进行内连接查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> join_date <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2011-11-11&#x27;</span> ) t1, dept <span class="hljs-keyword">where</span> t1.dep_id <span class="hljs-operator">=</span> dept.did;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-4-案例"><a href="#3-4-案例" class="headerlink" title="3.4  案例"></a>3.4  案例</h3><ul><li>环境准备：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> emp;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> dept;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> job;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> salarygrade;<br><br><span class="hljs-comment">-- 部门表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dept (<br>  did <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">-- 部门id</span><br>  dname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>), <span class="hljs-comment">-- 部门名称</span><br>  loc <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-comment">-- 部门所在地</span><br>);<br><br><span class="hljs-comment">-- 职务表，职务名称，职务描述</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> job (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  jname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  description <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br><br><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">-- 员工id</span><br>  ename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>), <span class="hljs-comment">-- 员工姓名</span><br>  job_id <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 职务id</span><br>  mgr <span class="hljs-type">INT</span> , <span class="hljs-comment">-- 上级领导</span><br>  joindate <span class="hljs-type">DATE</span>, <span class="hljs-comment">-- 入职日期</span><br>  salary <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">-- 工资</span><br>  bonus <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">-- 奖金</span><br>  dept_id <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 所在部门编号</span><br>  <span class="hljs-keyword">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class="hljs-keyword">FOREIGN</span> KEY (job_id) <span class="hljs-keyword">REFERENCES</span> job (id),<br>  <span class="hljs-keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="hljs-keyword">FOREIGN</span> KEY (dept_id) <span class="hljs-keyword">REFERENCES</span> dept (id)<br>);<br><span class="hljs-comment">-- 工资等级表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> salarygrade (<br>  grade <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,   <span class="hljs-comment">-- 级别</span><br>  losalary <span class="hljs-type">INT</span>,  <span class="hljs-comment">-- 最低工资</span><br>  hisalary <span class="hljs-type">INT</span> <span class="hljs-comment">-- 最高工资</span><br>);<br><br><span class="hljs-comment">-- 添加4个部门</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept(did,dname,loc) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;教研部&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>),<br>(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;学工部&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>),<br>(<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;销售部&#x27;</span>,<span class="hljs-string">&#x27;广州&#x27;</span>),<br>(<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;财务部&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>);<br><br><span class="hljs-comment">-- 添加4个职务</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> job (id, jname, description) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;董事长&#x27;</span>, <span class="hljs-string">&#x27;管理整个公司，接单&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;经理&#x27;</span>, <span class="hljs-string">&#x27;管理部门员工&#x27;</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;销售员&#x27;</span>, <span class="hljs-string">&#x27;向客人推销产品&#x27;</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;文员&#x27;</span>, <span class="hljs-string">&#x27;使用办公软件&#x27;</span>);<br><br><br><span class="hljs-comment">-- 添加员工</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2000-12-17&#x27;</span>,<span class="hljs-string">&#x27;8000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;卢俊义&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-02-20&#x27;</span>,<span class="hljs-string">&#x27;16000.00&#x27;</span>,<span class="hljs-string">&#x27;3000.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;林冲&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-02-22&#x27;</span>,<span class="hljs-string">&#x27;12500.00&#x27;</span>,<span class="hljs-string">&#x27;5000.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;2001-04-02&#x27;</span>,<span class="hljs-string">&#x27;29750.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1005</span>,<span class="hljs-string">&#x27;李逵&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-09-28&#x27;</span>,<span class="hljs-string">&#x27;12500.00&#x27;</span>,<span class="hljs-string">&#x27;14000.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;宋江&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;2001-05-01&#x27;</span>,<span class="hljs-string">&#x27;28500.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1007</span>,<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;2001-09-01&#x27;</span>,<span class="hljs-string">&#x27;24500.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>),<br>(<span class="hljs-number">1008</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2007-04-19&#x27;</span>,<span class="hljs-string">&#x27;30000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;罗贯中&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;2001-11-17&#x27;</span>,<span class="hljs-string">&#x27;50000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>),<br>(<span class="hljs-number">1010</span>,<span class="hljs-string">&#x27;吴用&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-09-08&#x27;</span>,<span class="hljs-string">&#x27;15000.00&#x27;</span>,<span class="hljs-string">&#x27;0.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1011</span>,<span class="hljs-string">&#x27;沙僧&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2007-05-23&#x27;</span>,<span class="hljs-string">&#x27;11000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1012</span>,<span class="hljs-string">&#x27;李逵&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-12-03&#x27;</span>,<span class="hljs-string">&#x27;9500.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1013</span>,<span class="hljs-string">&#x27;小白龙&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2001-12-03&#x27;</span>,<span class="hljs-string">&#x27;30000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1014</span>,<span class="hljs-string">&#x27;关羽&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1007</span>,<span class="hljs-string">&#x27;2002-01-23&#x27;</span>,<span class="hljs-string">&#x27;13000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>);<br><br><br><span class="hljs-comment">-- 添加5个工资等级</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> salarygrade(grade,losalary,hisalary) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">1</span>,<span class="hljs-number">7000</span>,<span class="hljs-number">12000</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">12010</span>,<span class="hljs-number">14000</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">14010</span>,<span class="hljs-number">20000</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-number">20010</span>,<span class="hljs-number">30000</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-number">30010</span>,<span class="hljs-number">99990</span>);<br></code></pre></td></tr></table></figure><ul><li><p>需求</p><ol><li><p>查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">1. 员工编号，员工姓名，工资 信息在emp 员工表中</span><br><span class="hljs-comment">2. 职务名称，职务描述 信息在 job 职务表中</span><br><span class="hljs-comment">3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 方式一 ：隐式内连接</span><br><span class="hljs-keyword">SELECT</span><br>emp.id,<br>emp.ename,<br>emp.salary,<br>job.jname,<br>job.description<br><span class="hljs-keyword">FROM</span><br>emp,<br>job<br><span class="hljs-keyword">WHERE</span><br>emp.job_id <span class="hljs-operator">=</span> job.id;<br><br><span class="hljs-comment">-- 方式二 ：显式内连接</span><br><span class="hljs-keyword">SELECT</span><br>emp.id,<br>emp.ename,<br>emp.salary,<br>job.jname,<br>job.description<br><span class="hljs-keyword">FROM</span><br>emp<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job <span class="hljs-keyword">ON</span> emp.job_id <span class="hljs-operator">=</span> job.id;<br></code></pre></td></tr></table></figure></li><li><p>查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">1. 员工编号，员工姓名，工资 信息在emp 员工表中</span><br><span class="hljs-comment">2. 职务名称，职务描述 信息在 job 职务表中</span><br><span class="hljs-comment">3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4. 部门名称，部门位置 来自于 部门表 dept</span><br><span class="hljs-comment">5. dept 和 emp 一对多关系 dept.id = emp.dept_id</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 方式一 ：隐式内连接</span><br><span class="hljs-keyword">SELECT</span><br>emp.id,<br>emp.ename,<br>emp.salary,<br>job.jname,<br>job.description,<br>dept.dname,<br>dept.loc<br><span class="hljs-keyword">FROM</span><br>emp,<br>job,<br>dept<br><span class="hljs-keyword">WHERE</span><br>emp.job_id <span class="hljs-operator">=</span> job.id<br><span class="hljs-keyword">and</span> dept.id <span class="hljs-operator">=</span> emp.dept_id<br>;<br><br><span class="hljs-comment">-- 方式二 ：显式内连接</span><br><span class="hljs-keyword">SELECT</span><br>emp.id,<br>emp.ename,<br>emp.salary,<br>job.jname,<br>job.description,<br>dept.dname,<br>dept.loc<br><span class="hljs-keyword">FROM</span><br>emp<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job <span class="hljs-keyword">ON</span> emp.job_id <span class="hljs-operator">=</span> job.id<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> dept.id <span class="hljs-operator">=</span> emp.dept_id<br></code></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">1. 员工姓名，工资 信息在emp 员工表中</span><br><span class="hljs-comment">2. 工资等级 信息在 salarygrade 工资等级表中</span><br><span class="hljs-comment">3. emp.salary &gt;= salarygrade.losalary  and emp.salary &lt;= salarygrade.hisalary</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span><br>emp.ename,<br>emp.salary,<br>t2.<span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>emp,<br>salarygrade t2<br><span class="hljs-keyword">WHERE</span><br>emp.salary <span class="hljs-operator">&gt;=</span> t2.losalary<br><span class="hljs-keyword">AND</span> emp.salary <span class="hljs-operator">&lt;=</span> t2.hisalary<br></code></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">1. 员工编号，员工姓名，工资 信息在emp 员工表中</span><br><span class="hljs-comment">2. 职务名称，职务描述 信息在 job 职务表中</span><br><span class="hljs-comment">3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4. 部门名称，部门位置 来自于 部门表 dept</span><br><span class="hljs-comment">5. dept 和 emp 一对多关系 dept.id = emp.dept_id</span><br><span class="hljs-comment">6. 工资等级 信息在 salarygrade 工资等级表中</span><br><span class="hljs-comment">7. emp.salary &gt;= salarygrade.losalary  and emp.salary &lt;= salarygrade.hisalary</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span><br>emp.id,<br>emp.ename,<br>emp.salary,<br>job.jname,<br>job.description,<br>dept.dname,<br>dept.loc,<br>t2.grade<br><span class="hljs-keyword">FROM</span><br>emp<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job <span class="hljs-keyword">ON</span> emp.job_id <span class="hljs-operator">=</span> job.id<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> dept.id <span class="hljs-operator">=</span> emp.dept_id<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> salarygrade t2 <span class="hljs-keyword">ON</span> emp.salary <span class="hljs-keyword">BETWEEN</span> t2.losalary <span class="hljs-keyword">and</span> t2.hisalary;<br></code></pre></td></tr></table></figure></li><li><p>查询出部门编号、部门名称、部门位置、部门人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">1. 部门编号、部门名称、部门位置 来自于部门 dept 表</span><br><span class="hljs-comment">2. 部门人数: 在emp表中 按照dept_id 进行分组，然后count(*)统计数量</span><br><span class="hljs-comment">3. 使用子查询，让部门表和分组后的表进行内连接</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 根据部门id分组查询每一个部门id和员工数</span><br><span class="hljs-keyword">select</span> dept_id, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_id;<br><br><span class="hljs-keyword">SELECT</span><br>dept.id,<br>dept.dname,<br>dept.loc,<br>t1.count<br><span class="hljs-keyword">FROM</span><br>dept,<br>(<br><span class="hljs-keyword">SELECT</span><br>dept_id,<br><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) count<br><span class="hljs-keyword">FROM</span><br>emp<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>dept_id<br>) t1<br><span class="hljs-keyword">WHERE</span><br>dept.id <span class="hljs-operator">=</span> t1.dept_id<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="4，事务"><a href="#4，事务" class="headerlink" title="4，事务"></a>4，事务</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1  概述"></a>4.1  概述</h3><blockquote><p>数据库的事务（Transaction）是一种机制、一个操作序列，包含了&#x3D;&#x3D;一组数据库操作命令&#x3D;&#x3D;。</p><p>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令&#x3D;&#x3D;要么同时成功，要么同时失败&#x3D;&#x3D;。</p><p>事务是一个不可分割的工作逻辑单元。</p></blockquote><p>这些概念不好理解，接下来举例说明，如下图有一张表</p><p><img src="/images/image-20210724224955876.png"> </p><p>张三和李四账户中各有100块钱，现李四需要转换500块钱给张三，具体的转账操作为</p><ul><li>第一步：查询李四账户余额</li><li>第二步：从李四账户金额 -500</li><li>第三步：给张三账户金额 +500</li></ul><p>现在假设在转账过程中第二步完成后出现了异常第三步没有执行，就会造成李四账户金额少了500，而张三金额并没有多500；这样的系统是有问题的。如果解决呢？使用事务可以解决上述问题</p><p><img src="/images/image-20210724225537533.png"> </p><p>从上图可以看到在转账前开启事务，如果出现了异常回滚事务，三步正常执行就提交事务，这样就可以完美解决问题。</p><h3 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2  语法"></a>4.2  语法</h3><ul><li><p>开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION;<br>或者  <br><span class="hljs-keyword">BEGIN</span>;<br></code></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">rollback</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-3-代码验证"><a href="#4-3-代码验证" class="headerlink" title="4.3  代码验证"></a>4.3  代码验证</h3><ul><li><p>环境准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> account;<br><br><span class="hljs-comment">-- 创建账户表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> account(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>money <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account(name,money) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure></li><li><p>不加事务演示问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 转账操作</span><br><span class="hljs-comment">-- 1. 查询李四账户金额是否大于500</span><br><br><span class="hljs-comment">-- 2. 李四账户 -500</span><br><span class="hljs-keyword">UPDATE</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br>出现异常了...  <span class="hljs-comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span><br><span class="hljs-comment">-- 3. 张三账户 +500</span><br><span class="hljs-keyword">UPDATE</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><p>整体执行结果肯定会出问题，我们查询账户表中数据，发现李四账户少了500。</p><p><img src="/images/image-20210724230250263.png"> </p></li><li><p>添加事务sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-comment">-- 转账操作</span><br><span class="hljs-comment">-- 1. 查询李四账户金额是否大于500</span><br><br><span class="hljs-comment">-- 2. 李四账户 -500</span><br><span class="hljs-keyword">UPDATE</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br>出现异常了...  <span class="hljs-comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span><br><span class="hljs-comment">-- 3. 张三账户 +500</span><br><span class="hljs-keyword">UPDATE</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure><p>上面sql中的执行成功进选择执行提交事务，而出现问题则执行回滚事务的语句。以后我们肯定不可能这样操作，而是在java中进行操作，在java中可以抓取异常，没出现异常提交事务，出现异常回滚事务。</p></li></ul><h3 id="4-4-事务的四大特征"><a href="#4-4-事务的四大特征" class="headerlink" title="4.4  事务的四大特征"></a>4.4  事务的四大特征</h3><ul><li><p>原子性（Atomicity）: 事务是不可分割的最小操作单位，要么同时成功，要么同时失败</p></li><li><p>一致性（Consistency） :事务完成时，必须使所有的数据都保持一致状态</p></li><li><p>隔离性（Isolation） :多个事务之间，操作的可见性</p></li><li><p>持久性（Durability） :事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p></li></ul><blockquote><p>&#x3D;&#x3D;说明：&#x3D;&#x3D;</p><p>mysql中事务是自动提交的。</p><p>也就是说我们不添加事务执行sql语句，语句执行完毕会自动的提交事务。</p><p>可以通过下面语句查询默认提交方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT @<span class="hljs-meta">@autocommit</span>;<br></code></pre></td></tr></table></figure><p>查询到的结果是1 则表示自动提交，结果是0表示手动提交。当然也可以通过下面语句修改提交方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列化</title>
    <link href="/2022/05/31/java%20%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/05/31/java%20%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="序列化定义"><a href="#序列化定义" class="headerlink" title="序列化定义"></a>序列化定义</h2><p>将一个类对象转换成可存储、可传输状态的过程。序列化有两个过程：</p><p>1、序列化：将对象编码成字节流（serializing）</p><p>2、反序列化：从字节流编码中重新构建对象（deserializing)。对象序列化后，可以在进程内&#x2F;进程间、网络间进行传输，也可以做本地持久化存储。</p><h2 id="为什么要序列化"><a href="#为什么要序列化" class="headerlink" title="为什么要序列化"></a>为什么要序列化</h2><p>系统底层并不认识对象，数据传输是以字节序列形式传递，以进程间通信为例，需要将对象转化为字节序列(字节序列中包括该对象的类型，成员信息等)，然后在目标进程里通过反序列化字节序列，将字节序列转换成对象。</p><h3 id="Serializable（Java自带）"><a href="#Serializable（Java自带）" class="headerlink" title="Serializable（Java自带）"></a>Serializable（Java自带）</h3><p>Serializable是序列化的意思，表示将一个对象转换成可存储或可传输的状态。序列化后的对象可以在网络上进行传输，也可以存储到本地。</p><h3 id="Parcelable（android-专用）"><a href="#Parcelable（android-专用）" class="headerlink" title="Parcelable（android 专用）"></a>Parcelable（android 专用）</h3><p>除了Serializable之外，使用Parcelable也可以实现相同的效果，</p><p>不过不同于将对象进行序列化，Parcelable方式的实现原理是将一个完整的对象进行分解，</p><p>而分解后的每一部分都是Intent所支持的数据类型，这样也就实现传递对象的功能了。</p><h3 id="实现Parcelable的作用"><a href="#实现Parcelable的作用" class="headerlink" title="实现Parcelable的作用"></a>实现Parcelable的作用</h3><p>1）永久性保存对象，保存对象的字节序列到本地文件中；</p><p>2）通过序列化对象在网络中传递对象；</p><p>3）通过序列化在进程间传递对象。</p><h3 id="选择序列化方法的原则"><a href="#选择序列化方法的原则" class="headerlink" title="选择序列化方法的原则"></a>选择序列化方法的原则</h3><p>1）在使用内存的时候，Parcelable比Serializable性能高，所以推荐使用Parcelable。</p><p>2）Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。</p><p>3）Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点，但此时还是建议使用Serializable 。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件研发流程</title>
    <link href="/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E8%BD%AF%E4%BB%B6%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E8%BD%AF%E4%BB%B6%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="软件产品开发流程："><a href="#软件产品开发流程：" class="headerlink" title="软件产品开发流程："></a>软件产品开发流程：</h2><p>下图所示的是一个软件产品开发大体上所需要经历的全部流程：</p><p><img src="/images/rjyflc.jpg"></p><h2 id="具体流程如下："><a href="#具体流程如下：" class="headerlink" title="具体流程如下："></a>具体流程如下：</h2><ol><li>启动<br>在项目启动阶段，主要确定项目的目标及其可行性。我们需要对项目的背景、干系人、解决的问题等等进行分析。并制定项目章程和组建项目团队，包括：产品经理、<a href="https://so.csdn.net/so/search?q=%E6%9E%B6%E6%9E%84&spm=1001.2101.3001.7020">架构</a>工程师、UI工程师、开发工程师、测试工程师等。完成以上准备工作之后，召开项目启动会，启动会结束后则进入下一步的工作。</li><li>规划<br>在项目的规划阶段，项目经理需要和项目需求方，以及项目的相关干系人确定项目的范围，创建WBS(<strong>把工作进行彻底分解，并梳理出其间的逻辑关系，利用整分合原则组织起来</strong>)，确定项目的里程碑和项目计划。同时制定项目的管理计划，包括成本，质量。风险等方面的预测和控制方案。</li><li>需求<br>在需求阶段，需要对采集的需求进行需求分析，编写PRD文档(<strong>PRD就是将宏观抽象化的业务，拆分成具体化的功能需求，并通过文字或图像等方式呈现出来</strong>)、UI设计、高保真设计。最后进入需求评审，评审通过则进入下一步的工作。</li><li>设计<br>在设计阶段，设计人员根据需求文档，对软件系统进行设计，包括数据结构、系统架构、业务模型及规则、流程控制、模块接口等。 输出概要设计，详细设计文档，以及数据库设计说明书等。</li><li>开发<br>在明确需求后，开发工程师正式进入编码阶段，根据产品原型图、UI效果图、设计文档，选择合适的开发环境、开发工具、开发语言等等进行实现，这个阶段也是个很长很难的阶段，也是软件实现的核心。</li><li>功能测试<br>对软件进行测试是保证软件质量的重要手段。开发工程师开发完成后，可以交由测试工程师测试。测试工程师测试到BUG要反馈给开发，开发进行修改。功能测试通常需要进行很多次，直到测试通过，达到质量要求。</li><li>端到端测试<br>在端到端测试阶段，测试人员根据完整的业务流程设计可以覆盖全流程的端到端测试案例，然后基于端到端案例对系统的各个模块进行全面测试，确保系统能够符合需求和验收质量标准。</li><li>用户验收测试<br>用户验收测试阶段，也是通常的UAT(User Acceptance Test)<strong>用户验收测试阶段</strong>，用户验收测试是最终用户可以检查软件是否符合业务要求的最后阶段。UAT由了解要求并了解构建软件目的的最终用户执行。此测试是在软件运行之前执行的最后一次测试。最终用户使用现实生活场景并为真实数据构建UAT测试用例，用户验收测试在最终用户在上线之前验证软件是否满足这些业务需求方面具有重要作用。</li><li>上线<br>所有测试通过，并与客户或者上级达成一致后，系统进行试运行，稳定后上线。<br>上线包括：上线部署、部署后验证、整理交付物（需求文档、设计文档、安装部署手册、产品帮助等等）和运维移交。</li><li>收尾<br>项目的收尾阶段，移交项目成果，释放项目团队，进行项目回顾总结，项目汇报，完成项目结项。</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器种类</title>
    <link href="/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%8D%E7%B1%BB/"/>
    <url>/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%8D%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>服务器的种类是有很多种的，按照不同的属性划分种类也是不同的，从外形方面来划分，可以分为四种，分别是刀片服务器、机架式服务器、塔式服务器和机柜式服务器，下面我们详细的介绍一下这几种类型的服务器。 </p><h2 id="1、刀片服务器"><a href="#1、刀片服务器" class="headerlink" title="1、刀片服务器"></a>1、刀片服务器</h2><p>这种是比较常见的，主要是在标准的机架式机箱内安装多个卡式的服务器单元，这样可以实现高可用和高密度，每一个“刀片”其实就是一个系统主板。可以通过”板载”硬盘来实现操作系统的启动，这个就类似一个独立服务器，各个母板之间没有关联，各自运行各自的系统，服务不同的客户群。基于这种模式，管理员也可以将各个母板结合在一起，为共同的用户群服务，这样网络环境的速度是非常快的。 </p><p><img src="/images/dpfwq1.webp"></p><h2 id="2、机架式服务器"><a href="#2、机架式服务器" class="headerlink" title="2、机架式服务器"></a>2、机架式服务器</h2><p>这种服务器一般是功能型的，它外形比较像交换机，规格有1U、2U、4U等，安装在标准的19英寸机柜里面，其中1U规格的是最节省空间的。企业在选择主机的时候，会考虑体积、功耗、发热量等主机的物理参数，在有限的空间内如何能够更合理的布局自己的服务器是很重要的。1U的规格虽然很节省空间，但是性能也较差，4U以上的性能是很高的，可扩展性也很好。 </p><p>1U（ 1U&#x3D;1.75 英寸 ） 2U 4U 主要厚度会逐渐变大</p><p><img src="/images/jgsfwq1.webp"></p><h2 id="3、塔式服务器"><a href="#3、塔式服务器" class="headerlink" title="3、塔式服务器"></a>3、塔式服务器</h2><p>这种应该是大家见得最多的一种，它跟立式的PC很像，它的体积是比较大的，因为它的主板有很强的扩展性，插槽也很多，因此塔式服务器的主机机箱比标准的ATX机箱还要大。因为有足够的空间可以进行硬盘和电源的冗余扩展，应用范围也很广泛，不管是速度应用还是存储应用都可以使用这种服务器。 </p><h2 id="4、机柜式服务器"><a href="#4、机柜式服务器" class="headerlink" title="4、机柜式服务器"></a>4、机柜式服务器</h2><p>机柜式服务器一把你情况下是由机架式、刀片式服务器加上其他设备组合成的，内部设备比较多、比较复杂。对于证券、银行、邮电等重要企业，则应采用具有完备的故障自修复能力的系统，关键部件应采用冗余措施，对于关键业务使用的服务器也可以采用双机热备份高可用系统或者是高性能计算机，这样的系统可用性就可以得到很好的保证。 </p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机硬件组成</title>
    <link href="/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/"/>
    <url>/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h2 id="计算机硬件系统五大组成"><a href="#计算机硬件系统五大组成" class="headerlink" title="计算机硬件系统五大组成"></a>计算机硬件系统五大组成</h2><h3 id="1、控制器："><a href="#1、控制器：" class="headerlink" title="1、控制器："></a>1、控制器：</h3><p>​计算机的指挥系统。控制器通过地址访问存储器，从存储器中取出指令，经译码器分析后，根据指令分析结果产生相应的操作控制信号作用于其他部件，使得各部件在控制器控制下有条不紊地协调工作。</p><h3 id="2、运算器："><a href="#2、运算器：" class="headerlink" title="2、运算器："></a>2、运算器：</h3><p>​实现算术运算和逻辑运算的部件。</p><h3 id="3、存储器："><a href="#3、存储器：" class="headerlink" title="3、存储器："></a>3、存储器：</h3><p>​是计算机用来存放所有数据和程序的记忆部件。它的基本功能是按指定的地址存（写）入或者取（读）出信息。 计算机中的存储器可分成两大类：一类是内存储器，简称内存或主存；另一类是外存储器（辅助存储器），简称外存或辅存。 存储器由若干个存储单元组成，每个存储单元都有一个地址，计算机通过地址对存储单元进行读写。一个存储器所包含的字节数称为存储容量，单位有B、KB、MB、GB、TB等。</p><h3 id="4、输入设备："><a href="#4、输入设备：" class="headerlink" title="4、输入设备："></a>4、输入设备：</h3><p>​是向计算机中输入信息（程序、数据、声音、文字、图形、图像等）的设备。常见的输入设备有：键盘、鼠标、图形扫描仪、触摸屏、条形码输入器、光笔等。 外存储器也是一种输入设备。 </p><h3 id="5、输出设备："><a href="#5、输出设备：" class="headerlink" title="5、输出设备："></a>5、输出设备：</h3><p>​主要有显示器、打印机和绘图仪等。外存储器也当作一种输出设备。</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>​我们知道其实计算机是由五大单元：CPU（控制单元、算术逻辑单元）、主存储器、输入单元、输出单元构成的。也可以说CPU+主存储器+输入输出构成了电子计算机的三大核心组件</p><p>1、控制单元+算数逻辑单元&#x3D;&gt;CPU </p><p>2、主存储器，即内存</p><p>3、输入单元Input+输出单元Outpu&#x3D;&gt;IO设备</p><h3 id="处理器（CPU概念）"><a href="#处理器（CPU概念）" class="headerlink" title="处理器（CPU概念）"></a>处理器（CPU概念）</h3><p>​    通常将运算器和控制器合称为中央处理器(Central Processing Unit，CPU)。其中运算器用来主要负责程序运算与逻辑判断，控制器则主要协调各组件和各单元的工作，所以CPU的工作主要在于管理和运算。可以说计算机的大脑就是CPU，它从内存中<strong>取指令-&gt;解码-&gt;执行，</strong>然后再取指-&gt;解码-&gt;执行下一条指令，周而复始，直至整个程序被执行完成。  </p><pre><code class="hljs">     既然CPU的重点在于进行运算和判断，那么要被运算与判断的数据是从哪里来的？CPU读取的数据都是从主存储器（内存）来的！主存储器内的数据则是从输入单元所传输进来！而CPU处理完毕的数据也必须先写回主存储器中，最后数据才从主存储器传输到输出单元。</code></pre><p><img src="/images/jgsfwq2.jpg"></p><h3 id="1、寄存器"><a href="#1、寄存器" class="headerlink" title="1、寄存器"></a>1、寄存器</h3><p>cpu中也会有存储功能，这就是寄存器。因访问内存以得到指令或数据的时间比cpu执行指令花费的时间要长得多，所以，所有CPU内部都有一些用来保存关键变量和临时数据的寄存器，这样通常在cpu的指令集中专门提供一些指令，用来将一个字（可以理解为数据）从内存调入寄存器，以及将一个字从寄存器存入内存。cpu其他的指令集可以把来自寄存器、内存的操作数据组合，或者用两者产生一个结果，比如将两个字相加并把结果存在寄存器或内存中。</p><h3 id="2、64位"><a href="#2、64位" class="headerlink" title="2、64位"></a>2、64位</h3><p>cpu的位数指的是cpu一次性能从内存中取出多少位二进制指令，64bit指的是一次性能从内存中取出64位二进制指令。<br>    在2003年以前由Intel所开发的x86架构CPU由8位升级到16、32位，后来AMD依此架构修改新一代的CPU为64位，到现在，个人计算机CPU通常都是x86_64的架构。</p><p>cpu具有向下兼容性</p><h3 id="3、4核8线程"><a href="#3、4核8线程" class="headerlink" title="3、4核8线程"></a>3、4核8线程</h3><p>​它由 Intel 研发，是把处理器内部的一个物理CPU模拟成两个逻辑CPU（以后也许有多个），让单个处理器就能使用线程级的并行计算，进而兼容多线程操作系统和软件。超线程技术充分利用空闲CPU资源，在相同时间内完成更多工作，在一定程度上提高了运行效率和性能。<br>  所以才会出现了我们提到的四核八线程，也就是将四个物理核心模拟成八个逻辑核心，同时会有四核支持八线程的操作。<br>  但是呢，四核八线程虽然模拟出来的是八核，其实和真实八核区别很大，虽然采用超线程技术能同时执行两个线程，但它并不能像两个真实CPU那样，每个CPU都具有独立的资源。单一资源同时只能支持一个CPU占用，因此当这些资源闲置后另一个CPU才能继续占用。并且，单一核心模拟出的两个逻辑核心的单个性能会有所下降。</p><h3 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h3><p>​ 计算机中第二重要的就是存储了，所有人都意淫着存储：速度快（这样cpu的等待存储器的延迟就降低了）+容量大+价钱便宜。然后同时兼备三者是不可能的，所以有了如下的不同的处理方式 </p><p><img src="/images/jgsfwq3.png"></p><p> 存储器系统采用如上图的分层结构，顶层的存储器速度较高，容量较小，与底层的存储器相比每位的成本较高，其差别往往是十亿数量级的 </p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>RAM:我们安装的qq、微信、爱奇艺都是运行的RAM内存</p><p>ROM: BIOS(Basic Input Output System基本的输入输出操作系统)  电脑自带基本的控制硬件系统（如图）</p><p><img src="/images/jgsfwq4.webp"></p><p>CMOS: 许多计算机利用CMOS存储器来<strong>保持当前时间和日期</strong>。CMOS存储器和递增时间的电路由一小块<strong>电池驱动</strong>，所以，即使计算机没有加电，时间也仍然可以正确地更新，除此之外<strong>CMOS还可以保存配置的参数，比如，哪一个是启动磁盘等</strong>，之所以采用CMOS是因为它耗电非常少，一块工厂原装电池往往能使用若干年，但是当电池失效时，相关的配置和时间等都将丢失 </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>程序的运行与计算机三大核心硬件cpu、内存、硬件的关系</p><p>1、程序最先是存放在硬盘中的</p><p>2、程序的运行需要先经历加载的过程：程序的代码&#x2F;数据从硬盘读入内存</p><p>3、然后cpu从内存中读取指令来运行</p><p>安装软件都是先装到硬盘中，软件的运行都要把数据加载到内存中。所以说计算机硬盘的大小决定了能够安装的软件数目，而计算机内容的大小决定了计算机能够同时运行的软件数目</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络基础</title>
    <link href="/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p> 计算机网络学习的核心内容就是网络协议的学习。网络协议是为计算机网络中进行数据交换而建立的规则、标准或者说是约定的集合。因为不同用户的数据终端可能采取的字符集是不同的，两者需要进行通信，必须要在一定的标准上进行。一个很形象地比喻就是我们的语言，我们大天朝地广人多，地方性语言也非常丰富，而且方言之间差距巨大。A地区的方言可能B地区的人根本无法接受，所以我们要为全国人名进行沟通建立一个语言标准，这就是我们的普通话的作用。同样，放眼全球，我们与外国友人沟通的标准语言是英语，所以我们才要苦逼的学习英语。</p><p>计算机网络协议同我们的语言一样，多种多样。而ARPA公司与1977年到1979年推出了一种名为ARPANET的网络协议受到了广泛的热捧，其中最主要的原因就是它推出了人尽皆知的TCP&#x2F;IP标准网络协议。目前TCP&#x2F;IP协议已经成为Internet中的”通用语言”，下图为不同计算机群之间利用TCP&#x2F;IP进行通信的示意图。</p><h2 id="1-网络层次划分"><a href="#1-网络层次划分" class="headerlink" title="1. 网络层次划分"></a><strong>1. 网络层次划分</strong></h2><p> 互联网协议按照功能不同分为osi七层或tcp&#x2F;ip五层或tcp&#x2F;ip四层 </p><p><img src="/images/wljc1.png"></p><p> 每层运行常见物理设备 </p><p><img src="/images/wljc2.png"></p><p> OSI七层协议数据传输的封包与解包过程  </p><p><img src="/images/wljc3.gif"></p><h2 id="2、-tcp-x2F-ip五层模型讲解"><a href="#2、-tcp-x2F-ip五层模型讲解" class="headerlink" title="2、 tcp&#x2F;ip五层模型讲解"></a>2、 tcp&#x2F;ip五层模型讲解</h2><p>我们将应用层，表示层，会话层并作应用层，从tcp／ip五层协议的角度来阐述每层的由来与功能，搞清楚了每层的主要协议</p><p>就理解了整个互联网通信的原理。</p><p>首先，用户感知到的只是最上面一层应用层，自上而下每层都依赖于下一层，所以我们从最下一层开始切入，比较好理解</p><p>每层都运行特定的协议，越往上越靠近用户，越往下越靠近硬件</p><h3 id="2-1、物理层"><a href="#2-1、物理层" class="headerlink" title="2.1、物理层"></a>2.1、物理层</h3><p> 物理层由来：上面提到，孤立的计算机之间要想一起玩，就必须接入internet，言外之意就是计算机之间必须完成组网 </p><p><img src="/images/wljc4.png"></p><p> 物理层功能：主要是基于电器特性发送高低电压(电信号)，高电压对应数字1，低电压对应数字0 </p><h3 id="2-2、数据链路层"><a href="#2-2、数据链路层" class="headerlink" title="2.2、数据链路层"></a>2.2、数据链路层</h3><p>数据链路层由来：单纯的电信号0和1没有任何意义，必须规定电信号多少位一组，每组什么意思</p><p>数据链路层的功能：定义了电信号的分组方式</p><h4 id="以太网协议："><a href="#以太网协议：" class="headerlink" title="以太网协议："></a>以太网协议：</h4><p>早期的时候各个公司都有自己的分组方式，后来形成了统一的标准，即以太网协议ethernet</p><p>ethernet规定</p><ul><li>一组电信号构成一个数据包，叫做‘帧’</li><li>每一数据帧分成：报头head和数据data两部分</li></ul><p>head包含：(固定18个字节)</p><ul><li>发送者／源地址，6个字节</li><li>接收者／目标地址，6个字节</li><li>数据类型，6个字节</li></ul><p>data包含：(最短46字节，最长1500字节)</p><ul><li>数据包的具体内容</li></ul><p>head长度＋data长度＝最短64字节，最长1518字节，超过最大限制就分片发送</p><h4 id="mac地址："><a href="#mac地址：" class="headerlink" title="mac地址："></a>mac地址：</h4><p>head中包含的源和目标地址由来：ethernet规定接入internet的设备都必须具备网卡，发送端和接收端的地址便是指网卡的地址，即mac地址</p><p>mac地址：每块网卡出厂时都被烧制上一个世界唯一的mac地址，长度为48位2进制，通常由12位16进制数表示（前六位是厂商编号，后六位是流水线号）</p><h4 id="广播："><a href="#广播：" class="headerlink" title="广播："></a>广播：</h4><p>有了mac地址，同一网络内的两台主机就可以通信了（一台主机通过arp协议获取另外一台主机的mac地址）</p><p>ethernet采用最原始的方式，广播的方式进行通信，即计算机通信基本靠吼</p><p><img src="/images/wljc5.png"></p><h3 id="2-3、网络层"><a href="#2-3、网络层" class="headerlink" title="2.3、网络层"></a>2.3、网络层</h3><p>网络层由来：有了ethernet、mac地址、广播的发送方式，世界上的计算机就可以彼此通信了，问题是世界范围的互联网是由</p><p>一个个彼此隔离的小的局域网组成的，那么如果所有的通信都采用以太网的广播方式，那么一台机器发送的包全世界都会收到，</p><p>这就不仅仅是效率低的问题了，这会是一种灾难</p><p><img src="/images/wljc6.png"></p><p>上图结论：必须找出一种方法来区分哪些计算机属于同一广播域，哪些不是，如果是就采用广播的方式发送，如果不是，</p><p>就采用路由的方式（向不同广播域／子网分发数据包），mac地址是无法区分的，它只跟厂商有关</p><p>网络层功能：引入一套新的地址用来区分不同的广播域／子网，这套地址即网络地址</p><h4 id="IP协议："><a href="#IP协议：" class="headerlink" title="IP协议："></a>IP协议：</h4><ul><li>规定网络地址的协议叫ip协议，它定义的地址称之为ip地址，广泛采用的v4版本即ipv4，它规定网络地址由32位2进制表示</li><li>范围0.0.0.0-255.255.255.255</li><li>一个ip地址通常写成四段十进制数，例：172.16.10.1</li></ul><h4 id="ip地址分成两部分"><a href="#ip地址分成两部分" class="headerlink" title="ip地址分成两部分"></a>ip地址分成两部分</h4><ul><li>网络部分：标识子网</li><li>主机部分：标识主机</li></ul><p>注意：单纯的ip地址段只是标识了ip地址的种类，从网络部分或主机部分都无法辨识一个ip所处的子网</p><p>例：172.16.10.1与172.16.10.2并不能确定二者处于同一子网</p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.10.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p><p>比如，已知IP地址172.16.10.1和172.16.10.2的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，</p><p>172.16.10.1：10101100.00010000.00001010.000000001</p><p>255255.255.255.0:11111111.11111111.11111111.00000000</p><p>AND运算得网络地址结果：10101100.00010000.00001010.000000001-&gt;172.16.10.0</p><p>172.16.10.2：10101100.00010000.00001010.000000010</p><p>255255.255.255.0:11111111.11111111.11111111.00000000</p><p>AND运算得网络地址结果：10101100.00010000.00001010.000000001-&gt;172.16.10.0</p><p>结果都是172.16.10.0，因此它们在同一个子网络。</p><p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p><h4 id="ip数据包"><a href="#ip数据包" class="headerlink" title="ip数据包"></a>ip数据包</h4><p>ip数据包也分为head和data部分，无须为ip包定义单独的栏位，直接放入以太网包的data部分</p><p>head：长度为20到60字节</p><p>data：最长为65,515字节。</p><p>而以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p><table><thead><tr><th>以太网头</th><th>ip 头</th><th>ip数据</th></tr></thead><tbody><tr><td>head</td><td>ip</td><td>data</td></tr></tbody></table><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><p>arp协议由来：计算机通信基本靠吼，即广播的方式，所有上层的包到最后都要封装上以太网头，然后通过以太网协议发送，在谈及以太网协议时候，我门了解到</p><p>通信是基于mac的广播方式实现，计算机在发包时，获取自身的mac是容易的，如何获取目标主机的mac，就需要通过arp协议</p><p>arp协议功能：广播的方式发送数据包，获取目标主机的mac地址</p><p>协议工作方式：每台主机ip都是已知的</p><p>例如：主机172.16.10.10&#x2F;24访问172.16.10.11&#x2F;24</p><p>一：首先通过ip地址和子网掩码区分出自己所处的子网</p><table><thead><tr><th>场景</th><th>数据包地址</th></tr></thead><tbody><tr><td>同一子网</td><td>目标主机mac，目标主机ip</td></tr><tr><td>不同子网</td><td>网关mac，目标主机ip</td></tr></tbody></table><p>二：分析172.16.10.10&#x2F;24与172.16.10.11&#x2F;24处于同一网络(如果不是同一网络，那么下表中目标ip为172.16.10.1,通过arp获取的是网关的mac)</p><table><thead><tr><th></th><th>源mac</th><th>目标mac</th><th>源ip</th><th>目标ip</th><th>数据部分</th></tr></thead><tbody><tr><td>发送端主机</td><td>发送端mac</td><td>FF:FF:FF:FF:FF:FF</td><td>172.16.10.10&#x2F;24</td><td>172.16.10.11&#x2F;24</td><td>数据</td></tr></tbody></table><p>三：这个包会以广播的方式在发送端所处的自网内传输，所有主机接收后拆开包，发现目标ip为自己的，就响应，返回自己的mac</p><h3 id="2-4、传输层"><a href="#2-4、传输层" class="headerlink" title="2.4、传输层"></a>2.4、传输层</h3><p>传输层的由来：网络层的ip帮我们区分子网，以太网层的mac帮我们找到主机，然后大家使用的都是应用程序，你的电脑上可能同时开启qq，暴风影音，等多个应用程序，</p><p>那么我们通过ip和mac找到了一台特定的主机，如何标识这台主机上的应用程序，答案就是端口，端口即应用程序与网卡关联的编号。</p><p>传输层功能：建立端口到端口的通信</p><p>补充：端口范围0-65535，0-1023为系统占用端口</p><h4 id="tcp协议："><a href="#tcp协议：" class="headerlink" title="tcp协议："></a>tcp协议：</h4><p>可靠传输，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p><table><thead><tr><th>以太网头</th><th>ip 头</th><th>tcp头</th><th>数据</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="udp协议："><a href="#udp协议：" class="headerlink" title="udp协议："></a>udp协议：</h4><p>不可靠传输，”报头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p><table><thead><tr><th>以太网头</th><th>ip头</th><th>udp头</th><th>数据</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="tcp三次握手和四次挥手"><a href="#tcp三次握手和四次挥手" class="headerlink" title="tcp三次握手和四次挥手"></a>tcp三次握手和四次挥手</h4><p><img src="/images/wljc7.png"></p><h3 id="2-5、应用层"><a href="#2-5、应用层" class="headerlink" title="2.5、应用层"></a>2.5、应用层</h3><p>应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 </p><p>应用层功能：规定应用程序的数据格式。</p><p>例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/wljc8.png"></p><h2 id="3、dhcp、DNS"><a href="#3、dhcp、DNS" class="headerlink" title="3、dhcp、DNS"></a>3、dhcp、DNS</h2><h4 id="dhcp"><a href="#dhcp" class="headerlink" title="dhcp"></a>dhcp</h4><p> 作用：自动分配IP地址 </p><p>想实现网络通信，每台主机需具备四要素</p><ul><li>本机的IP地址</li><li>子网掩码</li><li>网关的IP地址</li><li>DNS的IP地址</li></ul><p>获取这四要素分两种方式</p><p>1.静态获取</p><p>即手动配置</p><p>2.动态获取</p><p>通过dhcp获取</p><table><thead><tr><th>以太网头</th><th>ip头</th><th>udp头</th><th>dhcp数据包</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>DNS的作用：在互联网中，其实没有类似于<a href="http://www.xxx.com/">www.xxx.com</a>这种域名方式，而替代的是以IP地址，如222.222.222.222，那我们在IE地址栏中应当输入222.222.222.222才能打开网站<a href="http://www.xxx.com,但我们细想一下,互联网上的网站成千上万,如果每个网站登陆都需要记住一大串数字,那是不是特别不方便,对于记忆力不强的人,根本无法记住这么烦琐的数字.这个时候dns就出现了,它的作用就是将222.222.222.222解析为www.xxx.com,那么我们登陆的时候就直接输入域名就可以了./">www.xxx.com，但我们细想一下，互联网上的网站成千上万，如果每个网站登陆都需要记住一大串数字，那是不是特别不方便，对于记忆力不强的人，根本无法记住这么烦琐的数字。这个时候DNS就出现了，它的作用就是将222.222.222.222解析为www.xxx.com，那么我们登陆的时候就直接输入域名就可以了。</a></p><p>为什么一定要设置DNS才能上网？有些朋友可能会发现，为什么我可能登陆QQ、MSN，但却打不开网页呢？其实大部分原因都是因为DNS服务器故障造成的，DNS服务器地址是唯一的，是运营商提供给终端用户用来解析IP地址及域名的关系，而如果不设定DNS服务器地址，那么就无法查询地址的去向，自然也就打不开网页，而QQ、MSN等即时聊天软件，采用的是UDP传输协议，即不可靠传输协议，无需提供DNS服务器地址，也同样可以登陆。</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvm虚拟机</title>
    <link href="/2022/05/31/java%20jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2022/05/31/java%20jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="jvm虚拟机"><a href="#jvm虚拟机" class="headerlink" title="jvm虚拟机"></a>jvm虚拟机</h2><p>Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。</p><h2 id="Java-的优点"><a href="#Java-的优点" class="headerlink" title="Java 的优点"></a>Java 的优点</h2><ul><li>是一门结构严谨、面向对象的编程语言。</li><li>摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的理想。</li><li>提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题。</li><li>实现了热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获得更高的性能。</li><li>有一套完善的应用程序接口和无数的来自商业机构和开源社区的第三方类库来帮助实现各种各样的功能。</li></ul><h2 id="Java-平台的逻辑结构"><a href="#Java-平台的逻辑结构" class="headerlink" title="Java 平台的逻辑结构"></a>Java 平台的逻辑结构</h2><p><img src="/images/xnj1.webp"></p><ul><li>Java Language    java语音 其实就是我们接触写的java代码</li><li>Tools &amp; Tool APIs      java的一些工具类</li><li>JDK(Java SE Development Kit)，Java标准开发包，它提供了编译、运行Java程序所需的各种工具和资源，包括Java编译器、Java运行时环境，以及常用的Java类库等。</li><li>JRE( Java Runtime Environment) 、Java运行环境，用于解释执行Java的字节码文件。普通用户而只需要安装 JRE（Java Runtime Environment）来运行 Java 程序。而程序开发者必须安装JDK来编译、调试程序。</li><li>JVM(Java Virtual Mechinal)，Java虚拟机，是JRE的一部分。它是整个java实现跨平台的最核心的部分，负责解释执行字节码文件，是可运行java字节码文件的虚拟计算机。所有平台的上的JVM向编译器提供相同的接口，而编译器只需要面向虚拟机，生成虚拟机能识别的代码，然后由虚拟机来解释执行。</li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul><li>JVM 是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。简单的说，JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序。</li><li>Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。</li></ul><p><img src="/images/xnj2.png"></p><h3 id="class-文件的组成"><a href="#class-文件的组成" class="headerlink" title="class 文件的组成"></a>class 文件的组成</h3><ul><li>结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。</li><li>元数据。对应于 Java 源码中声明与常量的信息。包含类&#x2F;继承的超类&#x2F;实现的接口的声明信息、域与方法声明信息和常量池。</li><li>方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。</li></ul><h3 id="类执行机制"><a href="#类执行机制" class="headerlink" title="类执行机制"></a>类执行机制</h3><ul><li>JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。</li></ul><h3 id="jvm运行时数据区"><a href="#jvm运行时数据区" class="headerlink" title="jvm运行时数据区"></a>jvm运行时数据区</h3><p><img src="/images/xnj3.png"></p><h4 id="1、程序计数器PC"><a href="#1、程序计数器PC" class="headerlink" title="1、程序计数器PC"></a>1、程序计数器PC</h4><p>1、程序计数器是线程私有的区域,每个线程当然得有个计数器记录当前执行到那个指令。</p><p>2、占用的内存空间小，可以把它看成是当前线程所执行的字节码的行号指示器。如果线程在执行Java方法，这个计数器记录的是正在执行的虚拟机字节码指令地址；如果执行的是Native方法，这个计数器的值为空（Undefined）。</p><p>3、此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域</p><h4 id="2、虚拟机栈"><a href="#2、虚拟机栈" class="headerlink" title="2、虚拟机栈"></a>2、虚拟机栈</h4><p>这个区域也是我们平时口中说的堆栈的栈，关于这个块区域有如下要点：</p><p>1.属于线程私有，与线程的生命周期相同</p><p>2.每一个java方法被执行的时候，这个区域会生成一个栈帧,执行引擎每调用一个函数时，就为这个函数创建一个栈帧，并加入虚拟机栈。换个角度理解，每个函数从调用到执行结束，其实是对应一个栈帧的入栈和出栈</p><p>4.栈帧中存放的局部变量有8种基本数据类型，以及引用类型（对象的内存地址）</p><p>5.当线程请求的栈的深度超出了虚拟机栈允许的深度时，会抛出StackOverFlow的错误</p><p>6.当Java虚拟机动态扩展到无法申请足够内存时会抛出OutOfMemory的错误</p><h4 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h4><p>类似于这样:System.arraycopy()调用c里面的方法</p><p>memcpy(void *destin, void *source, unsigned n)</p><h4 id="4、方法区"><a href="#4、方法区" class="headerlink" title="4、方法区"></a>4、方法区</h4><p>1.方法区存放的是类信息、常量、静态变量等。</p><p>2.方法区是各个线程共享区域，很容易理解，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。</p><p>3.另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。</p><p>4.同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。</p><h4 id="5、Java堆"><a href="#5、Java堆" class="headerlink" title="5、Java堆"></a>5、Java堆</h4><p>我们平时说得最多，关注得最多的一个区域，new 出来的对象，就存放在这里！我们后期进行的性能优化主要针对这部分内存，GC的主战场，这个地方存放的几乎所有的对象实例和数组数据。这里我大概进行了如下概括：</p><p>1.由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。再细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。</p><p>2.当堆无法再扩展时，会抛出OutOfMemoryError异常。</p><h5 id="Java堆内存结构"><a href="#Java堆内存结构" class="headerlink" title="Java堆内存结构"></a>Java堆内存结构</h5><p>为了后面章节知识点的理解，我们应该先对Java堆内存结构划分有一定的了解。Java将堆内存分为3大部分：新生代、老年代和永久代，其中新生代又进一步划分为Eden、S0、S1(Survivor)三个区。结构如下图所示：</p><p>+—————————+——————————-+——————-+</p><p>|          |       |        |                               |                   |</p><p>|   Eden   |   S0  |   S1   |       Old generation          |      Perm         |</p><p>|          |       |        |                               |                   |</p><p>+—————————+——————————-+——————-+</p><p>|&lt;—-Young Gen Space——&gt;|</p><p>我们在程序中new出来的对象一般情况下都会在新生代里的Eden区里面分配空间，如果存活时间足够长将会进入Survivor区，进而如果存活时间再长，还会被提升分配到老年代里面。持久代里面存放的是Class类元数据、方法描述等。</p><h2 id="分代回收算法"><a href="#分代回收算法" class="headerlink" title="分代回收算法"></a>分代回收算法</h2><p>我们一般讨论的垃圾回收主要针对Java堆内存中的新生代和老年代，也正因为新生代和老年代结构上的不同，所以产生了分代回收算法，即新生代的垃圾回收和老年代的垃圾回收采用的是不同的回收算法。针对新生代，主要采用复制算法，而针对老年代，通常采用标记-清除算法或者标记-整理算法来进行回收。</p><h3 id="1、-清除算法"><a href="#1、-清除算法" class="headerlink" title="1、 清除算法"></a>1、 清除算法</h3><p><img src="/images/xnj4.png"></p><p>标记清除算法（Mark-Sweep）是最基础的一种垃圾回收算法，它分为2部分，先把内存区域中的这些对象进行标记，哪些属于可回收标记出来，然后把这些垃圾拎出来清理掉。就像上图一样，清理掉的垃圾就变成未使用的内存区域，等待被再次使用。</p><p>这逻辑再清晰不过了，并且也很好操作，但它存在一个很大的问题，那就是内存碎片。</p><p>上图中等方块的假设是 2M，小一些的是 1M，大一些的是 4M。等我们回收完，内存就会切成了很多段。我们知道开辟内存空间时，需要的是连续的内存区域，这时候我们需要一个 2M的内存区域，其中有2个 1M 是没法用的。这样就导致，其实我们本身还有这么多的内存的，但却用不了。</p><h3 id="2、复制算法"><a href="#2、复制算法" class="headerlink" title="2、复制算法"></a>2、复制算法</h3><p><img src="/images/xnj5.png"></p><p>复制算法（Copying）是在标记清除算法上演化而来，解决标记清除算法的内存碎片问题。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。保证了内存的连续可用，内存分配时也就不用考虑内存碎片等复杂情况，逻辑清晰，运行高效。</p><p>上面的图很清楚，也很明显的暴露了另一个问题，合着我这140平的大三房，只能当70平米的小两房来使？代价实在太高。</p><h3 id="3、标记整理算法"><a href="#3、标记整理算法" class="headerlink" title="3、标记整理算法"></a>3、标记整理算法</h3><p><img src="/images/xnj6.png"></p><p>标记整理算法（Mark-Compact）标记过程仍然与标记 — 清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，再清理掉端边界以外的内存区域。</p><p>标记整理算法一方面在标记-清除算法上做了升级，解决了内存碎片的问题，也规避了复制算法只能利用一半内存区域的弊端。看起来很美好，但从上图可以看到，它对内存变动更频繁，需要整理所有存活对象的引用地址，在效率上比复制算法要差很多。</p><p>分代收集算法分代收集算法（Generational Collection）严格来说并不是一种思想或理论，而是融合上述3种基础的算法思想，而产生的针对不同情况所采用不同算法的一套组合拳。对象存活周期的不同将内存划分为几块。一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记-清理或者标记 — 整理算法来进行回收。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建个人博客</title>
    <link href="/2022/05/31/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/31/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h2><p>Hexo是一个基于 node.js的快速生成静态博客的开源框架,支持 Markdown和大多数 Octopress<br>插件,一个命令即可部署到 Github页面、 Giteee、 Heroku等,强大的APl,可无限扩展,拥有<br>数百个主题和插件。 </p><p>简单来说就是开始生成一套你个人的博客网站</p><p>官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h3><p>直接到官网上下载安装即可<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>Node自带npm</li></ul><h3 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li></ul><h2 id="开始安装Hexo"><a href="#开始安装Hexo" class="headerlink" title="开始安装Hexo"></a>开始安装Hexo</h2><h3 id="1、安装hexo"><a href="#1、安装hexo" class="headerlink" title="1、安装hexo"></a>1、安装hexo</h3><p> 你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下 </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span> <br></code></pre></td></tr></table></figure><p> 用<code>hexo -v</code>查看一下版本 </p><h3 id="2、初始化hexo，新建存储博客的文件夹"><a href="#2、初始化hexo，新建存储博客的文件夹" class="headerlink" title="2、初始化hexo，新建存储博客的文件夹"></a>2、初始化hexo，新建存储博客的文件夹</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> myblog<br></code></pre></td></tr></table></figure><h3 id="3、进入文件夹，安装一下npm"><a href="#3、进入文件夹，安装一下npm" class="headerlink" title="3、进入文件夹，安装一下npm"></a>3、进入文件夹，安装一下npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure><p> 可以看到我们的hexo站点就已经安装好了，接下来就可以直接启动他了 </p><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><h3 id="4、启动服务站点"><a href="#4、启动服务站点" class="headerlink" title="4、启动服务站点"></a>4、启动服务站点</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g <br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p> 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。 </p><p><img src="/images/grbk1.jpg"></p><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p><img src="/images/grbk2.jpg"></p><p> 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。 </p><p><img src="/images/grbk3.jpg"></p><h2 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2><p>回到你的git bash中，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。<br></code></pre></td></tr></table></figure><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img src="/images/grbk4.jpg"></p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p><img src="/images/grbk5.jpg"></p><p>在gitbash中，查看是否成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com <br></code></pre></td></tr></table></figure><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="https://fxn-sm.github.io/">https://fxn-sm.github.io</a> 这个网站看到你的博客了！！</p><p><img src="/images/grbk6.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo更换主题</title>
    <link href="/2022/05/31/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/05/31/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一款-Material-Design-风格的主题"><a href="#一款-Material-Design-风格的主题" class="headerlink" title="一款 Material Design 风格的主题"></a>一款 Material Design 风格的主题</h1><p>github地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>官方文档：<a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a></p><h2 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h2><h3 id="1、集成"><a href="#1、集成" class="headerlink" title="1、集成"></a>1、集成</h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p> 然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。 </p><h3 id="2、指定主题"><a href="#2、指定主题" class="headerlink" title="2、指定主题"></a>2、指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="3-创建「关于页」"><a href="#3-创建「关于页」" class="headerlink" title="3. 创建「关于页」"></a>3. 创建「关于页」</h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
